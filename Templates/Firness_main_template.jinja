#include "BBClientFuzz.h"

INPUT_BUFFER  Input;

/**
  The user Entry Point for Application. The user code starts with this function
  as the real entry point for the application.

  @param[in] ImageHandle    The firmware allocated handle for the EFI image.
  @param[in] SystemTable    A pointer to the EFI System Table.

  @retval EFI_SUCCESS       The entry point is executed successfully.
  @retval other             Some error occurs when executing this entry point.

**/

EFI_STATUS
EFIAPI
FirnessMain (
    IN EFI_HANDLE ImageHandle,
    IN EFI_SYSTEM_TABLE *SystemTable
)
{
    EFI_STATUS Status = EFI_SUCCESS;
    UINT32 _a, _b, _c, _d = 0;

    UINT8 buffer[0x20];
    UINTN size = sizeof(buffer) - 1;
    UINT8 *buffer_ptr = &buffer[0];
    UINTN *size_ptr = &size;

    __asm__ __volatile__(
        "cpuid\n\t"
        : "=a"(_a), "=b"(_b), "=c"(_c), "=d"(_d), "=S"(buffer_ptr), "=D"(size_ptr)
        : "0"((0x0001U << 16U) | 0x4711U), "S"(buffer_ptr), "D"(size_ptr));


    Input.Buffer = buffer_ptr;
    Input.Length = size;


    UINT8 *DriverChoice = NULL;
    ReadBytes(&Input, 1, &Driver_Choice);
    
    switch(Driver_Choice[0]%{{ functions | length }})
    {
        {%- for function, arguments_dict in functions.items() %}
        case {{ loop.index }}:
            Status = Fuzz{{ function }}(Input, SystemTable);
            break;
        {%- endfor %}
    }
    __asm__ __volatile__("cpuid\n\t"
                        : "=a"(_a), "=b"(_b), "=c"(_c), "=d"(_d)
                        : "0"((0x0002U << 16U) | 0x4711U));

    return Status;
}