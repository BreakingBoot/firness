In file included from MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c:9:
./MdeModulePkg/Core/Dxe/DxeMain.h:13:10: fatal error: 'PiDxe.h' file not found
#include <PiDxe.h>
         ^~~~~~~~~
TranslationUnitDecl 0x561dff38f528 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x561dff38fd50 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x561dff38faf0 '__int128'
|-TypedefDecl 0x561dff38fdc0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x561dff38fb10 'unsigned __int128'
|-TypedefDecl 0x561dff3900c8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x561dff38fea0 'struct __NSConstantString_tag'
|   `-Record 0x561dff38fe18 '__NSConstantString_tag'
|-TypedefDecl 0x561dff390160 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x561dff390120 'char *'
|   `-BuiltinType 0x561dff38f5d0 'char'
|-TypedefDecl 0x561dff390458 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag[1]'
| `-ConstantArrayType 0x561dff390400 'struct __va_list_tag[1]' 1 
|   `-RecordType 0x561dff390240 'struct __va_list_tag'
|     `-Record 0x561dff3901b8 '__va_list_tag'
|-RecordDecl 0x561dff3fb698 <./MdeModulePkg/Core/Dxe/DxeMain.h:115:9, line:121:1> line:115:9 invalid struct definition
| |-FieldDecl 0x561dff3fb780 <line:116:3, col:17> col:17 invalid ProtocolGuid 'int *'
| |-FieldDecl 0x561dff3fb818 <line:117:3, col:18> col:18 invalid Protocol 'int **'
| |-FieldDecl 0x561dff3fb880 <line:118:3, col:16> col:16 invalid Event 'int'
| |-FieldDecl 0x561dff3fb8e8 <line:119:3, col:17> col:17 invalid Registration 'int *'
| `-FieldDecl 0x561dff3fb950 <line:120:3, col:16> col:16 invalid Present 'int'
|-TypedefDecl 0x561dff3fb9f8 <line:115:1, line:121:3> col:3 EFI_CORE_PROTOCOL_NOTIFY_ENTRY 'struct (unnamed struct at ./MdeModulePkg/Core/Dxe/DxeMain.h:115:9)':'struct (unnamed at ./MdeModulePkg/Core/Dxe/DxeMain.h:115:9)'
| `-ElaboratedType 0x561dff3fb9a0 'struct (unnamed struct at ./MdeModulePkg/Core/Dxe/DxeMain.h:115:9)' sugar
|   `-RecordType 0x561dff3fb720 'struct (unnamed at ./MdeModulePkg/Core/Dxe/DxeMain.h:115:9)'
|     `-Record 0x561dff3fb698 ''
|-RecordDecl 0x561dff3fba68 <line:128:9, line:133:1> line:128:9 invalid struct definition
| |-FieldDecl 0x561dff3fbb28 <line:129:3, col:17> col:17 invalid Signature 'int'
| |-FieldDecl 0x561dff3fbb90 <line:130:3, col:17> col:17 invalid Link 'int'
| |-FieldDecl 0x561dff3fbbf8 <line:131:3, col:17> col:17 invalid Handle 'int'
| `-FieldDecl 0x561dff3fbc60 <line:132:3, col:17> col:17 invalid FvNameGuid 'int'
|-TypedefDecl 0x561dff3fbd08 <line:128:1, line:133:3> col:3 KNOWN_HANDLE 'struct (unnamed struct at ./MdeModulePkg/Core/Dxe/DxeMain.h:128:9)':'struct (unnamed at ./MdeModulePkg/Core/Dxe/DxeMain.h:128:9)'
| `-ElaboratedType 0x561dff3fbcb0 'struct (unnamed struct at ./MdeModulePkg/Core/Dxe/DxeMain.h:128:9)' sugar
|   `-RecordType 0x561dff3fbaf0 'struct (unnamed at ./MdeModulePkg/Core/Dxe/DxeMain.h:128:9)'
|     `-Record 0x561dff3fba68 ''
|-RecordDecl 0x561dff3fbd78 <line:136:9, line:163:1> line:136:9 invalid struct definition
| |-FieldDecl 0x561dff3fbe38 <line:137:3, col:36> col:36 invalid Signature 'int'
| |-FieldDecl 0x561dff3fbea0 <line:138:3, col:36> col:36 invalid Link 'int'
| |-FieldDecl 0x561dff3fbf08 <line:140:3, col:36> col:36 invalid ScheduledLink 'int'
| |-FieldDecl 0x561dff3fbf70 <line:142:3, col:36> col:36 invalid FvHandle 'int'
| |-FieldDecl 0x561dff3fbfd8 <line:143:3, col:36> col:36 invalid FileName 'int'
| |-FieldDecl 0x561dff3fc040 <line:144:3, col:37> col:37 invalid FvFileDevicePath 'int *'
| |-FieldDecl 0x561dff3fc0a8 <line:145:3, col:37> col:37 invalid Fv 'int *'
| |-FieldDecl 0x561dff3fc110 <line:147:3, col:37> col:37 invalid Depex 'int *'
| |-FieldDecl 0x561dff3fc178 <line:148:3, col:36> col:36 invalid DepexSize 'int'
| |-FieldDecl 0x561dff3fc1e0 <line:150:3, col:36> col:36 invalid Before 'int'
| |-FieldDecl 0x561dff3fc248 <line:151:3, col:36> col:36 invalid After 'int'
| |-FieldDecl 0x561dff3fc2b0 <line:152:3, col:36> col:36 invalid BeforeAfterGuid 'int'
| |-FieldDecl 0x561dff3fc318 <line:154:3, col:36> col:36 invalid Dependent 'int'
| |-FieldDecl 0x561dff3fc380 <line:155:3, col:36> col:36 invalid Unrequested 'int'
| |-FieldDecl 0x561dff3fc3e8 <line:156:3, col:36> col:36 invalid Scheduled 'int'
| |-FieldDecl 0x561dff3fc450 <line:157:3, col:36> col:36 invalid Untrusted 'int'
| |-FieldDecl 0x561dff3fc4b8 <line:158:3, col:36> col:36 invalid Initialized 'int'
| |-FieldDecl 0x561dff3fc520 <line:159:3, col:36> col:36 invalid DepexProtocolError 'int'
| |-FieldDecl 0x561dff3fc588 <line:161:3, col:36> col:36 invalid ImageHandle 'int'
| `-FieldDecl 0x561dff3fc5f0 <line:162:3, col:36> col:36 invalid IsFvImage 'int'
|-TypedefDecl 0x561dff3fc7a8 <line:136:1, line:163:3> col:3 EFI_CORE_DRIVER_ENTRY 'struct (unnamed struct at ./MdeModulePkg/Core/Dxe/DxeMain.h:136:9)':'struct (unnamed at ./MdeModulePkg/Core/Dxe/DxeMain.h:136:9)'
| `-ElaboratedType 0x561dff3fc750 'struct (unnamed struct at ./MdeModulePkg/Core/Dxe/DxeMain.h:136:9)' sugar
|   `-RecordType 0x561dff3fbe00 'struct (unnamed at ./MdeModulePkg/Core/Dxe/DxeMain.h:136:9)'
|     `-Record 0x561dff3fbd78 ''
|-RecordDecl 0x561dff3fc818 <line:169:9, line:180:1> line:169:9 invalid struct definition
| |-FieldDecl 0x561dff3fc8d8 <line:170:3, col:27> col:27 invalid Signature 'int'
| |-FieldDecl 0x561dff3fc940 <line:171:3, col:27> col:27 invalid Link 'int'
| |-FieldDecl 0x561dff3fc9a8 <line:172:3, col:27> col:27 invalid BaseAddress 'int'
| |-FieldDecl 0x561dff3fca10 <line:173:3, col:27> col:27 invalid EndAddress 'int'
| |-FieldDecl 0x561dff3fca78 <line:174:3, col:27> col:27 invalid Capabilities 'int'
| |-FieldDecl 0x561dff3fcae0 <line:175:3, col:27> col:27 invalid Attributes 'int'
| |-FieldDecl 0x561dff3fcb48 <line:176:3, col:27> col:27 invalid GcdMemoryType 'int'
| |-FieldDecl 0x561dff3fcbb0 <line:177:3, col:27> col:27 invalid GcdIoType 'int'
| |-FieldDecl 0x561dff3fcc18 <line:178:3, col:27> col:27 invalid ImageHandle 'int'
| `-FieldDecl 0x561dff3fcc80 <line:179:3, col:27> col:27 invalid DeviceHandle 'int'
|-TypedefDecl 0x561dff3fcd28 <line:169:1, line:180:3> col:3 EFI_GCD_MAP_ENTRY 'struct (unnamed struct at ./MdeModulePkg/Core/Dxe/DxeMain.h:169:9)':'struct (unnamed at ./MdeModulePkg/Core/Dxe/DxeMain.h:169:9)'
| `-ElaboratedType 0x561dff3fccd0 'struct (unnamed struct at ./MdeModulePkg/Core/Dxe/DxeMain.h:169:9)' sugar
|   `-RecordType 0x561dff3fc8a0 'struct (unnamed at ./MdeModulePkg/Core/Dxe/DxeMain.h:169:9)'
|     `-Record 0x561dff3fc818 ''
|-RecordDecl 0x561dff3fcd98 <line:184:9, line:226:1> line:184:9 invalid struct definition
| |-FieldDecl 0x561dff3fce58 <line:185:3, col:43> col:43 invalid Signature 'int'
| |-FieldDecl 0x561dff3fcef0 <line:187:3, col:43> col:43 invalid Handle 'int'
| | `-FullComment 0x561dff417310 <line:186:6, col:18>
| |   `-ParagraphComment 0x561dff4172e0 <col:6, col:18>
| |     `-TextComment 0x561dff4172b0 <col:6, col:18> Text=" Image handle"
| |-FieldDecl 0x561dff3fcf80 <line:189:3, col:43> col:43 invalid Type 'int'
| | `-FullComment 0x561dff4173e0 <line:188:6, col:16>
| |   `-ParagraphComment 0x561dff4173b0 <col:6, col:16>
| |     `-TextComment 0x561dff417380 <col:6, col:16> Text=" Image type"
| |-FieldDecl 0x561dff3fd010 <line:191:3, col:43> col:43 invalid Started 'int'
| | `-FullComment 0x561dff41ba30 <line:190:6, col:35>
| |   `-ParagraphComment 0x561dff41ba00 <col:6, col:35>
| |     `-TextComment 0x561dff417450 <col:6, col:35> Text=" If entrypoint has been called"
| |-FieldDecl 0x561dff3fd0a0 <line:193:3, col:43> col:43 invalid EntryPoint 'int'
| | `-FullComment 0x561dff41bb00 <line:192:6, col:29>
| |   `-ParagraphComment 0x561dff41bad0 <col:6, col:29>
| |     `-TextComment 0x561dff41baa0 <col:6, col:29> Text=" The image's entry point"
| |-FieldDecl 0x561dff3fd130 <line:195:3, col:43> col:43 invalid Info 'int'
| | `-FullComment 0x561dff41bbd0 <line:194:6, col:27>
| |   `-ParagraphComment 0x561dff41bba0 <col:6, col:27>
| |     `-TextComment 0x561dff41bb70 <col:6, col:27> Text=" loaded image protocol"
| |-FieldDecl 0x561dff3fd1c0 <line:197:3, col:43> col:43 invalid ImageBasePage 'int'
| | `-FullComment 0x561dff41bca0 <line:196:6, col:24>
| |   `-ParagraphComment 0x561dff41bc70 <col:6, col:24>
| |     `-TextComment 0x561dff41bc40 <col:6, col:24> Text=" Location in memory"
| |-FieldDecl 0x561dff3fd250 <line:199:3, col:43> col:43 invalid NumberOfPages 'int'
| | `-FullComment 0x561dff41bd70 <line:198:6, col:21>
| |   `-ParagraphComment 0x561dff41bd40 <col:6, col:21>
| |     `-TextComment 0x561dff41bd10 <col:6, col:21> Text=" Number of pages"
| |-FieldDecl 0x561dff3fd2e0 <line:201:3, col:44> col:44 invalid FixupData 'int *'
| | `-FullComment 0x561dff41be40 <line:200:6, col:25>
| |   `-ParagraphComment 0x561dff41be10 <col:6, col:25>
| |     `-TextComment 0x561dff41bde0 <col:6, col:25> Text=" Original fixup data"
| |-FieldDecl 0x561dff3fd370 <line:203:3, col:43> col:43 invalid Tpl 'int'
| | `-FullComment 0x561dff41bf10 <line:202:6, col:26>
| |   `-ParagraphComment 0x561dff41bee0 <col:6, col:26>
| |     `-TextComment 0x561dff41beb0 <col:6, col:26> Text=" Tpl of started image"
| |-FieldDecl 0x561dff3fd400 <line:205:3, col:43> col:43 invalid Status 'int'
| | `-FullComment 0x561dff41bfe0 <line:204:6, col:38>
| |   `-ParagraphComment 0x561dff41bfb0 <col:6, col:38>
| |     `-TextComment 0x561dff41bf80 <col:6, col:38> Text=" Status returned by started image"
| |-FieldDecl 0x561dff3fd490 <line:207:3, col:43> col:43 invalid ExitDataSize 'int'
| | `-FullComment 0x561dff41c0b0 <line:206:6, col:41>
| |   `-ParagraphComment 0x561dff41c080 <col:6, col:41>
| |     `-TextComment 0x561dff41c050 <col:6, col:41> Text=" Size of ExitData from started image"
| |-FieldDecl 0x561dff3fd520 <line:209:3, col:44> col:44 invalid ExitData 'int *'
| | `-FullComment 0x561dff41c180 <line:208:6, col:45>
| |   `-ParagraphComment 0x561dff41c150 <col:6, col:45>
| |     `-TextComment 0x561dff41c120 <col:6, col:45> Text=" Pointer to exit data from started image"
| |-FieldDecl 0x561dff3fd5b0 <line:211:3, col:44> col:44 invalid JumpBuffer 'int *'
| | `-FullComment 0x561dff41c250 <line:210:6, col:57>
| |   `-ParagraphComment 0x561dff41c220 <col:6, col:57>
| |     `-TextComment 0x561dff41c1f0 <col:6, col:57> Text=" Pointer to pool allocation for context save/restore"
| |-FieldDecl 0x561dff3fd640 <line:213:3, col:44> col:44 invalid JumpContext 'int *'
| | `-FullComment 0x561dff41c320 <line:212:6, col:48>
| |   `-ParagraphComment 0x561dff41c2f0 <col:6, col:48>
| |     `-TextComment 0x561dff41c2c0 <col:6, col:48> Text=" Pointer to buffer for context save/restore"
| |-FieldDecl 0x561dff3fd6d0 <line:215:3, col:43> col:43 invalid Machine 'int'
| | `-FullComment 0x561dff41c3f0 <line:214:6, col:32>
| |   `-ParagraphComment 0x561dff41c3c0 <col:6, col:32>
| |     `-TextComment 0x561dff41c390 <col:6, col:32> Text=" Machine type from PE image"
| |-FieldDecl 0x561dff3feb48 <line:217:3, col:44> col:44 invalid PeCoffEmu 'int *'
| | `-FullComment 0x561dff41c4c0 <line:216:6, col:45>
| |   `-ParagraphComment 0x561dff41c490 <col:6, col:45>
| |     `-TextComment 0x561dff41c460 <col:6, col:45> Text=" PE/COFF Image Emulator Protocol pointer"
| |-FieldDecl 0x561dff3febe0 <line:219:3, col:44> col:44 invalid RuntimeData 'int *'
| | `-FullComment 0x561dff41c590 <line:218:6, col:24>
| |   `-ParagraphComment 0x561dff41c560 <col:6, col:24>
| |     `-TextComment 0x561dff41c530 <col:6, col:24> Text=" Runtime image list"
| |-FieldDecl 0x561dff3fec70 <line:221:3, col:44> col:44 invalid LoadedImageDevicePath 'int *'
| | `-FullComment 0x561dff41c660 <line:220:6, col:50>
| |   `-ParagraphComment 0x561dff41c630 <col:6, col:50>
| |     `-TextComment 0x561dff41c600 <col:6, col:50> Text=" Pointer to Loaded Image Device Path Protocol"
| |-FieldDecl 0x561dff3fed00 <line:223:3, col:43> col:43 invalid ImageContext 'int'
| | `-FullComment 0x561dff41c730 <line:222:6, col:31>
| |   `-ParagraphComment 0x561dff41c700 <col:6, col:31>
| |     `-TextComment 0x561dff41c6d0 <col:6, col:31> Text=" PeCoffLoader ImageContext"
| `-FieldDecl 0x561dff3fed90 <line:225:3, col:43> col:43 invalid LoadImageStatus 'int'
|   `-FullComment 0x561dff41c800 <line:224:6, col:45>
|     `-ParagraphComment 0x561dff41c7d0 <col:6, col:45>
|       `-TextComment 0x561dff41c7a0 <col:6, col:45> Text=" Status returned by LoadImage() service."
|-TypedefDecl 0x561dff3fee38 <line:184:1, line:226:3> col:3 LOADED_IMAGE_PRIVATE_DATA 'struct (unnamed struct at ./MdeModulePkg/Core/Dxe/DxeMain.h:184:9)':'struct (unnamed at ./MdeModulePkg/Core/Dxe/DxeMain.h:184:9)'
| `-ElaboratedType 0x561dff3fede0 'struct (unnamed struct at ./MdeModulePkg/Core/Dxe/DxeMain.h:184:9)' sugar
|   `-RecordType 0x561dff3fce20 'struct (unnamed at ./MdeModulePkg/Core/Dxe/DxeMain.h:184:9)'
|     `-Record 0x561dff3fcd98 ''
|-RecordDecl 0x561dff3feea8 <line:233:9, line:238:1> line:233:9 invalid struct definition
| |-FieldDecl 0x561dff3fef68 <line:234:3, col:27> col:27 invalid Signature 'int'
| |-FieldDecl 0x561dff3fefd0 <line:235:3, col:27> col:27 invalid Link 'int'
| |-FieldDecl 0x561dff3ff038 <line:236:3, col:27> col:27 invalid CodeSegmentBase 'int'
| `-FieldDecl 0x561dff3ff0a0 <line:237:3, col:27> col:27 invalid CodeSegmentSize 'int'
|-TypedefDecl 0x561dff3ff148 <line:233:1, line:238:3> col:3 IMAGE_PROPERTIES_RECORD_CODE_SECTION 'struct (unnamed struct at ./MdeModulePkg/Core/Dxe/DxeMain.h:233:9)':'struct (unnamed at ./MdeModulePkg/Core/Dxe/DxeMain.h:233:9)'
| `-ElaboratedType 0x561dff3ff0f0 'struct (unnamed struct at ./MdeModulePkg/Core/Dxe/DxeMain.h:233:9)' sugar
|   `-RecordType 0x561dff3fef30 'struct (unnamed at ./MdeModulePkg/Core/Dxe/DxeMain.h:233:9)'
|     `-Record 0x561dff3feea8 ''
|-RecordDecl 0x561dff3ff1b8 <line:242:9, line:249:1> line:242:9 invalid struct definition
| |-FieldDecl 0x561dff3ff278 <line:243:3, col:27> col:27 invalid Signature 'int'
| |-FieldDecl 0x561dff3ff2e0 <line:244:3, col:27> col:27 invalid Link 'int'
| |-FieldDecl 0x561dff3ff348 <line:245:3, col:27> col:27 invalid ImageBase 'int'
| |-FieldDecl 0x561dff3ff3b0 <line:246:3, col:27> col:27 invalid ImageSize 'int'
| |-FieldDecl 0x561dff3ff418 <line:247:3, col:27> col:27 invalid CodeSegmentCount 'int'
| `-FieldDecl 0x561dff3ff480 <line:248:3, col:27> col:27 invalid CodeSegmentList 'int'
|-TypedefDecl 0x561dff3ff528 <line:242:1, line:249:3> col:3 IMAGE_PROPERTIES_RECORD 'struct (unnamed struct at ./MdeModulePkg/Core/Dxe/DxeMain.h:242:9)':'struct (unnamed at ./MdeModulePkg/Core/Dxe/DxeMain.h:242:9)'
| `-ElaboratedType 0x561dff3ff4d0 'struct (unnamed struct at ./MdeModulePkg/Core/Dxe/DxeMain.h:242:9)' sugar
|   `-RecordType 0x561dff3ff240 'struct (unnamed at ./MdeModulePkg/Core/Dxe/DxeMain.h:242:9)'
|     `-Record 0x561dff3ff1b8 ''
|-VarDecl 0x561dff3ff5b0 <line:254:1, col:31> col:31 invalid gDxeCoreST 'int *' extern
|-VarDecl 0x561dff3ff630 <line:255:1, col:31> col:31 invalid gDxeCoreRT 'int *' extern
|-VarDecl 0x561dff3ff6b0 <line:256:1, col:31> col:31 invalid gDxeCoreDS 'int *' extern
|-VarDecl 0x561dff3ff730 <line:257:1, col:30> col:30 invalid gDxeCoreImageHandle 'int' extern
|-VarDecl 0x561dff3ff7b0 <line:259:1, col:17> col:17 invalid gMemoryMapTerminated 'int' extern
|-VarDecl 0x561dff3ff830 <line:261:1, col:33> col:33 invalid gEfiDecompress 'int' extern
|-VarDecl 0x561dff3ff8b0 <line:263:1, col:43> col:43 invalid gRuntime 'int *' extern
|-VarDecl 0x561dff3ff930 <line:264:1, col:43> col:43 invalid gCpu 'int *' extern
|-VarDecl 0x561dff3ff9b0 <line:265:1, col:43> col:43 invalid gWatchdogTimer 'int *' extern
|-VarDecl 0x561dff3ffa30 <line:266:1, col:43> col:43 invalid gMetronome 'int *' extern
|-VarDecl 0x561dff3ffab0 <line:267:1, col:43> col:43 invalid gTimer 'int *' extern
|-VarDecl 0x561dff400050 <line:268:1, col:43> col:43 invalid gSecurity 'int *' extern
|-VarDecl 0x561dff4000d0 <line:269:1, col:43> col:43 invalid gSecurity2 'int *' extern
|-VarDecl 0x561dff400150 <line:270:1, col:43> col:43 invalid gBds 'int *' extern
|-VarDecl 0x561dff4001d0 <line:271:1, col:43> col:43 invalid gSmmBase2 'int *' extern
|-VarDecl 0x561dff400250 <line:273:1, col:17> col:17 invalid gEfiCurrentTpl 'int' extern
|-VarDecl 0x561dff4002d0 <line:275:1, col:36> col:36 invalid gDxeCoreFileName 'int *' extern
|-VarDecl 0x561dff400350 <line:276:1, col:36> col:36 invalid gDxeCoreLoadedImage 'int *' extern
|-VarDecl 0x561dff4003f0 <line:278:1, col:37> col:37 invalid gMemoryTypeInformation 'int' extern
|-VarDecl 0x561dff400470 <line:280:1, col:35> col:35 invalid gDispatcherRunning 'int' extern
|-VarDecl 0x561dff4004f0 <line:281:1, col:35> col:35 invalid gRuntimeTemplate 'int' extern
|-VarDecl 0x561dff400570 <line:283:1, col:17> col:17 invalid gMemoryAttributesTableForwardCfi 'int' extern
|-VarDecl 0x561dff4005f0 <line:285:1, col:52> col:52 invalid gLoadModuleAtFixAddressConfigurationTable 'int' extern
|-VarDecl 0x561dff400670 <line:286:1, col:52> col:52 invalid gLoadFixedAddressCodeMemoryReady 'int' extern
|-FunctionDecl 0x561dff400760 <line:295:1, line:298:3> line:296:1 invalid CoreInitializePool 'int ()'
| `-FullComment 0x561dff41c8d0 <line:292:1, col:32>
|   `-ParagraphComment 0x561dff41c8a0 <col:1, col:32>
|     `-TextComment 0x561dff41c870 <col:1, col:32> Text="  Called to initialize the pool."
|-FunctionDecl 0x561dff400910 <line:315:1, line:321:3> line:316:1 invalid CoreAddMemoryDescriptor 'int (int)'
| |-ParmVarDecl 0x561dff400840 <line:317:3, col:6> col:6 invalid EFI_MEMORY_TYPE 'int'
| `-FullComment 0x561dff41ced0 <line:301:1, line:312:53>
|   |-ParagraphComment 0x561dff41ca00 <line:301:1, line:304:40>
|   | |-TextComment 0x561dff41c940 <line:301:1, col:60> Text="  Called to initialize the memory map and add descriptors to"
|   | |-TextComment 0x561dff41c960 <line:302:1, col:30> Text="  the current descriptor list."
|   | |-TextComment 0x561dff41c980 <line:303:1, col:59> Text="  The first descriptor that is added must be general usable"
|   | `-TextComment 0x561dff41c9a0 <line:304:1, col:40> Text="  memory as the addition allocates heap."
|   |-ParagraphComment 0x561dff41ca50 <line:306:1, col:2>
|   | `-TextComment 0x561dff41ca20 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff41ca70 <col:3, line:307:2> [in] implicitly Param="Type"
|   | `-ParagraphComment 0x561dff41cb20 <line:306:15, line:307:2>
|   |   |-TextComment 0x561dff41cad0 <line:306:15, col:58> Text="                   The type of memory to add"
|   |   `-TextComment 0x561dff41caf0 <line:307:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff41cb40 <col:3, line:309:2> [in] implicitly Param="Start"
|   | `-ParagraphComment 0x561dff41cc20 <line:307:16, line:309:2>
|   |   |-TextComment 0x561dff41cba0 <line:307:16, col:81> Text="                  The starting address in the memory range Must be"
|   |   |-TextComment 0x561dff41cbc0 <line:308:1, col:45> Text="                                 page aligned"
|   |   `-TextComment 0x561dff41cbe0 <line:309:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff41cc40 <col:3, line:310:2> [in] implicitly Param="NumberOfPages"
|   | `-ParagraphComment 0x561dff41ccf0 <line:309:24, line:310:2>
|   |   |-TextComment 0x561dff41cca0 <line:309:24, col:65> Text="          The number of pages in the range"
|   |   `-TextComment 0x561dff41ccc0 <line:310:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff41cd10 <col:3, col:64> [in] implicitly Param="Attribute"
|   | `-ParagraphComment 0x561dff41cda0 <col:20, col:64>
|   |   `-TextComment 0x561dff41cd70 <col:20, col:64> Text="              Attributes of the memory to add"
|   |-ParagraphComment 0x561dff41cdf0 <line:312:1, col:2>
|   | `-TextComment 0x561dff41cdc0 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff41ce10 <col:3, col:53> Name="return"
|     `-ParagraphComment 0x561dff41ce70 <col:10, col:53>
|       `-TextComment 0x561dff41ce40 <col:10, col:53> Text=" None.  The range is added to the memory map"
|-FunctionDecl 0x561dff400a10 <line:327:1, line:330:3> line:328:1 invalid CoreReleaseGcdMemoryLock 'int ()'
| `-FullComment 0x561dff41cfa0 <line:324:1, col:45>
|   `-ParagraphComment 0x561dff41cf70 <col:1, col:45>
|     `-TextComment 0x561dff41cf40 <col:1, col:45> Text="  Release memory lock on mGcdMemorySpaceLock."
|-FunctionDecl 0x561dff400b00 <line:336:1, line:339:3> line:337:1 invalid CoreAcquireGcdMemoryLock 'int ()'
| `-FullComment 0x561dff41d070 <line:333:1, col:45>
|   `-ParagraphComment 0x561dff41d040 <col:1, col:45>
|     `-TextComment 0x561dff41d010 <col:1, col:45> Text="  Acquire memory lock on mGcdMemorySpaceLock."
|-FunctionDecl 0x561dff400c78 <line:356:1, line:361:3> line:357:1 invalid CoreInitializeMemoryServices 'int (int)'
| |-ParmVarDecl 0x561dff400be0 <line:358:3, col:7> col:7 invalid VOID 'int'
| `-FullComment 0x561dff41d5e0 <line:342:1, line:353:74>
|   |-ParagraphComment 0x561dff41d1b0 <line:342:1, line:346:74>
|   | |-TextComment 0x561dff41d0e0 <line:342:1, col:68> Text="  External function. Initializes memory services based on the memory"
|   | |-TextComment 0x561dff41d100 <line:343:1, col:71> Text="  descriptor HOBs.  This function is responsible for priming the memory"
|   | |-TextComment 0x561dff41d120 <line:344:1, col:66> Text="  map, so memory allocations and resource allocations can be made."
|   | |-TextComment 0x561dff41d140 <line:345:1, col:71> Text="  The first part of this function can not depend on any memory services"
|   | `-TextComment 0x561dff41d160 <line:346:1, col:74> Text="  until at least one memory descriptor is provided to the memory services."
|   |-ParagraphComment 0x561dff41d200 <line:348:1, col:2>
|   | `-TextComment 0x561dff41d1d0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff41d220 <col:3, line:349:2> [in] implicitly Param="HobStart"
|   | `-ParagraphComment 0x561dff41d2d0 <line:348:19, line:349:2>
|   |   |-TextComment 0x561dff41d280 <line:348:19, col:62> Text="               The start address of the HOB."
|   |   `-TextComment 0x561dff41d2a0 <line:349:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff41d2f0 <col:3, line:351:2> [in] implicitly Param="MemoryBaseAddress"
|   | `-ParagraphComment 0x561dff41d3e0 <line:349:28, line:351:2>
|   |   |-TextComment 0x561dff41d360 <line:349:28, col:81> Text="      Start address of memory region found to init DXE"
|   |   |-TextComment 0x561dff41d380 <line:350:1, col:38> Text="                                 core."
|   |   `-TextComment 0x561dff41d3a0 <line:351:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff41d400 <col:3, col:80> [in] implicitly Param="MemoryLength"
|   | `-ParagraphComment 0x561dff41d490 <col:23, col:80>
|   |   `-TextComment 0x561dff41d460 <col:23, col:80> Text="           Length of memory region found to init DXE core."
|   |-ParagraphComment 0x561dff41d4e0 <line:353:1, col:2>
|   | `-TextComment 0x561dff41d4b0 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff41d500 <col:3, col:74> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff41d580 <col:22, col:74>
|       `-TextComment 0x561dff41d550 <col:22, col:74> Text="            Memory services successfully initialized."
|-FunctionDecl 0x561dff400df8 <line:377:1, line:382:3> line:378:1 invalid CoreInitializeGcdServices 'int (int)'
| |-ParmVarDecl 0x561dff400d60 <line:379:3, col:6> col:6 invalid OUT 'int'
| `-FullComment 0x561dff41dbe0 <line:364:1, line:374:71>
|   |-ParagraphComment 0x561dff41d6f0 <line:364:1, line:367:46>
|   | |-TextComment 0x561dff41d650 <line:364:1, col:80> Text="  External function. Initializes the GCD and memory services based on the memory"
|   | |-TextComment 0x561dff41d670 <line:365:1, col:80> Text="  descriptor HOBs.  This function is responsible for priming the GCD map and the"
|   | |-TextComment 0x561dff41d690 <line:366:1, col:77> Text="  memory map, so memory allocations and resource allocations can be made. The"
|   | `-TextComment 0x561dff41d6b0 <line:367:1, col:46> Text="  HobStart will be relocated to a pool buffer."
|   |-ParagraphComment 0x561dff41d740 <line:369:1, col:2>
|   | `-TextComment 0x561dff41d710 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff41d760 <col:3, line:370:2> [in] implicitly Param="HobStart"
|   | `-ParagraphComment 0x561dff41d810 <line:369:19, line:370:2>
|   |   |-TextComment 0x561dff41d7c0 <line:369:19, col:61> Text="               The start address of the HOB"
|   |   `-TextComment 0x561dff41d7e0 <line:370:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff41d830 <col:3, line:372:2> [in] implicitly Param="MemoryBaseAddress"
|   | `-ParagraphComment 0x561dff41d920 <line:370:28, line:372:2>
|   |   |-TextComment 0x561dff41d8a0 <line:370:28, col:81> Text="      Start address of memory region found to init DXE"
|   |   |-TextComment 0x561dff41d8c0 <line:371:1, col:38> Text="                                 core."
|   |   `-TextComment 0x561dff41d8e0 <line:372:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff41d940 <col:3, col:80> [in] implicitly Param="MemoryLength"
|   | `-ParagraphComment 0x561dff41d9d0 <col:23, col:80>
|   |   `-TextComment 0x561dff41d9a0 <col:23, col:80> Text="           Length of memory region found to init DXE core."
|   |-ParagraphComment 0x561dff41dae0 <line:374:1, col:2>
|   | `-TextComment 0x561dff41dab0 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff41db00 <col:3, col:71> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff41db80 <col:22, col:71>
|       `-TextComment 0x561dff41db50 <col:22, col:71> Text="            GCD services successfully initialized."
|-FunctionDecl 0x561dff400ef0 <line:390:1, line:393:3> line:391:1 invalid CoreInitializeEventServices 'int ()'
| `-FullComment 0x561dff41ddb0 <line:385:1, line:387:54>
|   |-ParagraphComment 0x561dff41dc80 <line:385:1, col:30>
|   | `-TextComment 0x561dff41dc50 <col:1, col:30> Text="  Initializes "event" support."
|   |-ParagraphComment 0x561dff41dcd0 <line:387:1, col:2>
|   | `-TextComment 0x561dff41dca0 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff41dcf0 <col:3, col:54> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff41dd70 <col:22, col:54>
|       `-TextComment 0x561dff41dd40 <col:22, col:54> Text="            Always return success"
|-FunctionDecl 0x561dff402760 <line:404:1, line:407:3> line:405:1 invalid CoreInitializeImageServices 'int (int)'
| |-ParmVarDecl 0x561dff400fd0 <line:406:3, col:7> col:7 invalid VOID 'int'
| `-FullComment 0x561dff41e090 <line:396:1, line:401:22>
|   |-ParagraphComment 0x561dff41de70 <line:396:1, line:397:28>
|   | |-TextComment 0x561dff41de20 <line:396:1, col:76> Text="  Add the Image Services to EFI Boot Services Table and install the protocol"
|   | `-TextComment 0x561dff41de40 <line:397:1, col:28> Text="  interfaces for this image."
|   |-ParagraphComment 0x561dff41dec0 <line:399:1, col:2>
|   | `-TextComment 0x561dff41de90 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff41dee0 <col:3, col:55> [in] implicitly Param="HobStart"
|   | `-ParagraphComment 0x561dff41df70 <col:19, col:55>
|   |   `-TextComment 0x561dff41df40 <col:19, col:55> Text="                The HOB to initialize"
|   |-ParagraphComment 0x561dff41dfc0 <line:401:1, col:2>
|   | `-TextComment 0x561dff41df90 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff41dfe0 <col:3, col:22> Name="return"
|     `-ParagraphComment 0x561dff41e040 <col:10, col:22>
|       `-TextComment 0x561dff41e010 <col:10, col:22> Text=" Status code."
|-FunctionDecl 0x561dff402860 <line:413:1, line:416:3> line:414:1 invalid CoreNotifyOnProtocolInstallation 'int ()'
| `-FullComment 0x561dff41e160 <line:410:1, col:86>
|   `-ParagraphComment 0x561dff41e130 <col:1, col:86>
|     `-TextComment 0x561dff41e100 <col:1, col:86> Text="  Creates an event that is fired everytime a Protocol of a specific type is installed."
|-FunctionDecl 0x561dff402950 <line:425:1, line:428:3> line:426:1 invalid CoreAllEfiServicesAvailable 'int ()'
| `-FullComment 0x561dff41e3f0 <line:419:1, line:422:65>
|   |-ParagraphComment 0x561dff41e200 <line:419:1, col:47>
|   | `-TextComment 0x561dff41e1d0 <col:1, col:47> Text="  Return TRUE if all AP services are available."
|   |-ParagraphComment 0x561dff41e250 <line:421:1, col:2>
|   | `-TextComment 0x561dff41e220 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff41e270 <col:3, line:422:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff41e310 <line:421:22, line:422:2>
|   |   |-TextComment 0x561dff41e2c0 <line:421:22, col:54> Text="    All AP services are available"
|   |   `-TextComment 0x561dff41e2e0 <line:422:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff41e330 <col:3, col:65> Name="retval" Arg[0]="EFI_NOT_FOUND"
|     `-ParagraphComment 0x561dff41e3b0 <col:24, col:65>
|       `-TextComment 0x561dff41e380 <col:24, col:65> Text="  At least one AP service is not available"
|-FunctionDecl 0x561dff402ac8 <line:437:1, line:440:3> line:438:1 invalid CalculateEfiHdrCrc 'int (int)'
| |-ParmVarDecl 0x561dff402a30 <line:439:3, col:7> col:7 invalid OUT 'int'
| `-FullComment 0x561dff41e5f0 <line:431:1, line:434:66>
|   |-ParagraphComment 0x561dff41e4b0 <line:431:1, line:432:19>
|   | |-TextComment 0x561dff41e460 <line:431:1, col:75> Text="  Calcualte the 32-bit CRC in a EFI table using the service provided by the"
|   | `-TextComment 0x561dff41e480 <line:432:1, col:19> Text="  gRuntime service."
|   |-ParagraphComment 0x561dff41e500 <line:434:1, col:2>
|   | `-TextComment 0x561dff41e4d0 <col:1, col:2> Text="  "
|   `-ParamCommandComment 0x561dff41e520 <col:3, col:66> [in] implicitly Param="Hdr"
|     `-ParagraphComment 0x561dff41e5b0 <col:14, col:66>
|       `-TextComment 0x561dff41e580 <col:14, col:66> Text="                    Pointer to an EFI standard header"
|-VarDecl 0x561dff402bb0 <line:449:1, line:450:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff41e7f0 <line:443:1, line:446:45>
|   |-ParagraphComment 0x561dff41e690 <line:443:1, col:48>
|   | `-TextComment 0x561dff41e660 <col:1, col:48> Text="  Called by the platform code to process a tick."
|   |-ParagraphComment 0x561dff41e6e0 <line:445:1, col:2>
|   | `-TextComment 0x561dff41e6b0 <col:1, col:2> Text="  "
|   `-ParamCommandComment 0x561dff41e700 <col:3, line:446:45> [in] implicitly Param="Duration"
|     `-ParagraphComment 0x561dff41e7b0 <line:445:19, line:446:45>
|       |-TextComment 0x561dff41e760 <line:445:19, col:80> Text="               The number of 100ns elapsed since the last call"
|       `-TextComment 0x561dff41e780 <line:446:1, col:45> Text="                                 to TimerTick"
|-FunctionDecl 0x561dff402c70 <line:460:1, line:463:3> line:461:1 invalid CoreInitializeDispatcher 'int ()'
| `-FullComment 0x561dff41e8e0 <line:456:1, line:457:41>
|   `-ParagraphComment 0x561dff41e8b0 <line:456:1, line:457:41>
|     |-TextComment 0x561dff41e860 <line:456:1, col:80> Text="  Initialize the dispatcher. Initialize the notification function that runs when"
|     `-TextComment 0x561dff41e880 <line:457:1, col:41> Text="  an FV2 protocol is added to the system."
|-FunctionDecl 0x561dff402de8 <line:478:1, line:481:3> line:479:1 invalid CoreIsSchedulable 'int (int)'
| |-ParmVarDecl 0x561dff402d50 <line:480:3, col:7> col:7 invalid EFI_CORE_DRIVER_ENTRY 'int'
| `-FullComment 0x561dff41ed30 <line:466:1, line:475:42>
|   |-ParagraphComment 0x561dff41e9f0 <line:466:1, line:469:57>
|   | |-TextComment 0x561dff41e950 <line:466:1, col:74> Text="  This is the POSTFIX version of the dependency evaluator.  This code does"
|   | |-TextComment 0x561dff41e970 <line:467:1, col:69> Text="  not need to handle Before or After, as it is not valid to call this"
|   | |-TextComment 0x561dff41e990 <line:468:1, col:76> Text="  routine in this case. The SOR is just ignored and is a nop in the grammer."
|   | `-TextComment 0x561dff41e9b0 <line:469:1, col:57> Text="  POSTFIX means all the math is done on top of the stack."
|   |-ParagraphComment 0x561dff41ea40 <line:471:1, col:2>
|   | `-TextComment 0x561dff41ea10 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff41ea60 <col:3, col:62> [in] implicitly Param="DriverEntry"
|   | `-ParagraphComment 0x561dff41eb10 <col:22, col:62>
|   |   `-TextComment 0x561dff41eae0 <col:22, col:62> Text="           DriverEntry element to update."
|   |-ParagraphComment 0x561dff41eb60 <line:473:1, col:2>
|   | `-TextComment 0x561dff41eb30 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff41eb80 <col:3, line:474:2> Name="retval" Arg[0]="TRUE"
|   | `-ParagraphComment 0x561dff41ec20 <line:473:15, line:474:2>
|   |   |-TextComment 0x561dff41ebd0 <line:473:15, col:58> Text="                  If driver is ready to run."
|   |   `-TextComment 0x561dff41ebf0 <line:474:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff41ec40 <col:3, line:475:42> Name="retval" Arg[0]="FALSE"
|     `-ParagraphComment 0x561dff41ece0 <line:474:16, line:475:42>
|       |-TextComment 0x561dff41ec90 <line:474:16, col:81> Text="                 If driver is not ready to run or some fatal error"
|       `-TextComment 0x561dff41ecb0 <line:475:1, col:42> Text="                                was found."
|-FunctionDecl 0x561dff402f68 <line:495:1, line:498:3> line:496:1 invalid CorePreProcessDepex 'int (int)'
| |-ParmVarDecl 0x561dff402ed0 <line:497:3, col:7> col:7 invalid EFI_CORE_DRIVER_ENTRY 'int'
| `-FullComment 0x561dff41f0b0 <line:484:1, line:492:48>
|   |-ParagraphComment 0x561dff41ee70 <line:484:1, line:488:13>
|   | |-TextComment 0x561dff41eda0 <line:484:1, col:72> Text="  Preprocess dependency expression and update DriverEntry to reflect the"
|   | |-TextComment 0x561dff41edc0 <line:485:1, col:71> Text="  state of  Before, After, and SOR dependencies. If DriverEntry->Before"
|   | |-TextComment 0x561dff41ede0 <line:486:1, col:70> Text="  or DriverEntry->After is set it will never be cleared. If SOR is set"
|   | |-TextComment 0x561dff41ee00 <line:487:1, col:66> Text="  it will be cleared by CoreSchedule(), and then the driver can be"
|   | `-TextComment 0x561dff41ee20 <line:488:1, col:13> Text="  dispatched."
|   |-ParagraphComment 0x561dff41eec0 <line:490:1, col:2>
|   | `-TextComment 0x561dff41ee90 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff41eee0 <col:3, col:63> [in] implicitly Param="DriverEntry"
|   | `-ParagraphComment 0x561dff41ef70 <col:22, col:63>
|   |   `-TextComment 0x561dff41ef40 <col:22, col:63> Text="           DriverEntry element to update ."
|   |-ParagraphComment 0x561dff41efc0 <line:492:1, col:2>
|   | `-TextComment 0x561dff41ef90 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff41efe0 <col:3, col:48> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff41f060 <col:22, col:48>
|       `-TextComment 0x561dff41f030 <col:22, col:48> Text="           It always works."
|-VarDecl 0x561dff403050 <line:510:1, line:511:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff41f540 <line:501:1, line:507:53>
|   |-ParagraphComment 0x561dff41f150 <line:501:1, col:31>
|   | `-TextComment 0x561dff41f120 <col:1, col:31> Text="  Terminates all boot services."
|   |-ParagraphComment 0x561dff41f1a0 <line:503:1, col:2>
|   | `-TextComment 0x561dff41f170 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff41f1c0 <col:3, line:504:2> [in] implicitly Param="ImageHandle"
|   | `-ParagraphComment 0x561dff41f270 <line:503:22, line:504:2>
|   |   |-TextComment 0x561dff41f220 <line:503:22, col:74> Text="            Handle that identifies the exiting image."
|   |   `-TextComment 0x561dff41f240 <line:504:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff41f290 <col:3, col:62> [in] implicitly Param="MapKey"
|   | `-ParagraphComment 0x561dff41f320 <col:17, col:62>
|   |   `-TextComment 0x561dff41f2f0 <col:17, col:62> Text="                 Key to the latest memory map."
|   |-ParagraphComment 0x561dff41f370 <line:506:1, col:2>
|   | `-TextComment 0x561dff41f340 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff41f390 <col:3, line:507:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff41f430 <line:506:22, line:507:2>
|   |   |-TextComment 0x561dff41f3e0 <line:506:22, col:57> Text="            Boot Services terminated"
|   |   `-TextComment 0x561dff41f400 <line:507:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff41f450 <col:3, col:53> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|     `-ParagraphComment 0x561dff41f4e0 <col:32, col:53>
|       `-TextComment 0x561dff41f4b0 <col:32, col:53> Text="  MapKey is incorrect."
|-FunctionDecl 0x561dff403198 <line:528:1, line:531:3> line:529:1 invalid CoreTerminateMemoryMap 'int (int)'
| |-ParmVarDecl 0x561dff403100 <line:530:3, col:6> col:6 invalid UINTN 'int'
| `-FullComment 0x561dff41f940 <line:518:1, line:525:50>
|   |-ParagraphComment 0x561dff41f600 <line:518:1, line:519:74>
|   | |-TextComment 0x561dff41f5b0 <line:518:1, col:67> Text="  Make sure the memory map is following all the construction rules,"
|   | `-TextComment 0x561dff41f5d0 <line:519:1, col:74> Text="  it is the last time to check memory map error before exit boot services."
|   |-ParagraphComment 0x561dff41f650 <line:521:1, col:2>
|   | `-TextComment 0x561dff41f620 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff41f670 <col:3, col:47> [in] implicitly Param="MapKey"
|   | `-ParagraphComment 0x561dff41f700 <col:17, col:47>
|   |   `-TextComment 0x561dff41f6d0 <col:17, col:47> Text="                 Memory map key"
|   |-ParagraphComment 0x561dff41f750 <line:523:1, col:2>
|   | `-TextComment 0x561dff41f720 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff41f770 <col:3, line:525:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff41f850 <line:523:32, line:525:2>
|   |   |-TextComment 0x561dff41f7d0 <line:523:32, col:76> Text="  Memory map not consistent with construction"
|   |   |-TextComment 0x561dff41f7f0 <line:524:1, col:39> Text="                                 rules."
|   |   `-TextComment 0x561dff41f810 <line:525:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff41f870 <col:3, col:50> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff41f8f0 <col:22, col:50>
|       `-TextComment 0x561dff41f8c0 <col:22, col:50> Text="            Valid memory map."
|-FunctionDecl 0x561dff403318 <line:539:1, line:542:3> line:540:1 invalid CoreNotifySignalList 'int (int)'
| |-ParmVarDecl 0x561dff403280 <line:541:3, col:6> col:6 invalid EFI_GUID 'int'
| `-FullComment 0x561dff41fb40 <line:534:1, line:536:51>
|   |-ParagraphComment 0x561dff41f9e0 <line:534:1, col:39>
|   | `-TextComment 0x561dff41f9b0 <col:1, col:39> Text="  Signals all events in the EventGroup."
|   |-ParagraphComment 0x561dff41fa30 <line:536:1, col:2>
|   | `-TextComment 0x561dff41fa00 <col:1, col:2> Text="  "
|   `-ParamCommandComment 0x561dff41fa50 <col:3, col:51> [in] implicitly Param="EventGroup"
|     `-ParagraphComment 0x561dff41fb00 <col:21, col:51>
|       `-TextComment 0x561dff41fad0 <col:21, col:51> Text="             The list to signal"
|-VarDecl 0x561dff403400 <line:559:1, line:560:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff420140 <line:545:1, line:556:63>
|   |-ParagraphComment 0x561dff41fc00 <line:545:1, line:546:23>
|   | |-TextComment 0x561dff41fbb0 <line:545:1, col:81> Text="  Boot Service called to add, modify, or remove a system configuration table from"
|   | `-TextComment 0x561dff41fbd0 <line:546:1, col:23> Text="  the EFI System Table."
|   |-ParagraphComment 0x561dff41fc50 <line:548:1, col:2>
|   | `-TextComment 0x561dff41fc20 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff41fc70 <col:3, line:550:2> [in] implicitly Param="Guid"
|   | `-ParagraphComment 0x561dff41fd50 <line:548:15, line:550:2>
|   |   |-TextComment 0x561dff41fcd0 <line:548:15, col:77> Text="           Pointer to the GUID for the entry to add, update, or"
|   |   |-TextComment 0x561dff41fcf0 <line:549:1, col:31> Text="                         remove"
|   |   `-TextComment 0x561dff41fd10 <line:550:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff41fd70 <col:3, line:551:56> [in] implicitly Param="Table"
|   | `-ParagraphComment 0x561dff41fe20 <line:550:16, line:551:56>
|   |   |-TextComment 0x561dff41fdd0 <line:550:16, col:81> Text="          Pointer to the configuration table for the entry to add,"
|   |   `-TextComment 0x561dff41fdf0 <line:551:1, col:56> Text="                         update, or remove, may be NULL."
|   |-ParagraphComment 0x561dff41fe70 <line:553:1, col:2>
|   | `-TextComment 0x561dff41fe40 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff41fe90 <col:3, line:554:2> Name="return"
|   | `-ParagraphComment 0x561dff41ff10 <line:553:10, line:554:2>
|   |   |-TextComment 0x561dff41fec0 <line:553:10, col:80> Text=" EFI_SUCCESS               Guid, Table pair added, updated, or removed."
|   |   `-TextComment 0x561dff41fee0 <line:554:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff41ff30 <col:3, line:555:2> Name="return"
|   | `-ParagraphComment 0x561dff41ffb0 <line:554:10, line:555:2>
|   |   |-TextComment 0x561dff41ff60 <line:554:10, col:57> Text=" EFI_INVALID_PARAMETER     Input GUID not valid."
|   |   `-TextComment 0x561dff41ff80 <line:555:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff41ffd0 <col:3, line:556:2> Name="return"
|   | `-ParagraphComment 0x561dff420050 <line:555:10, line:556:2>
|   |   |-TextComment 0x561dff420000 <line:555:10, col:74> Text=" EFI_NOT_FOUND             Attempted to delete non-existant entry"
|   |   `-TextComment 0x561dff420020 <line:556:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff420070 <col:3, col:63> Name="return"
|     `-ParagraphComment 0x561dff4200d0 <col:10, col:63>
|       `-TextComment 0x561dff4200a0 <col:10, col:63> Text=" EFI_OUT_OF_RESOURCES      Not enough memory available"
|-VarDecl 0x561dff4034b0 <line:575:1, line:576:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff420420 <line:567:1, line:572:42>
|   |-ParagraphComment 0x561dff420200 <line:567:1, line:568:62>
|   | |-TextComment 0x561dff4201b0 <line:567:1, col:49> Text="  Raise the task priority level to the new level."
|   | `-TextComment 0x561dff4201d0 <line:568:1, col:62> Text="  High level is implemented by disabling processor interrupts."
|   |-ParagraphComment 0x561dff420250 <line:570:1, col:2>
|   | `-TextComment 0x561dff420220 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff420270 <col:3, col:41> [in] implicitly Param="NewTpl"
|   | `-ParagraphComment 0x561dff420300 <col:17, col:41>
|   |   `-TextComment 0x561dff4202d0 <col:17, col:41> Text="  New task priority level"
|   |-ParagraphComment 0x561dff420350 <line:572:1, col:2>
|   | `-TextComment 0x561dff420320 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff420370 <col:3, col:42> Name="return"
|     `-ParagraphComment 0x561dff4203d0 <col:10, col:42>
|       `-TextComment 0x561dff4203a0 <col:10, col:42> Text=" The previous task priority level"
|-VarDecl 0x561dff403560 <line:588:1, line:589:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff420620 <line:582:1, line:585:43>
|   |-ParagraphComment 0x561dff4204e0 <line:582:1, line:583:68>
|   | |-TextComment 0x561dff420490 <line:582:1, col:62> Text="  Lowers the task priority to the previous value.   If the new"
|   | `-TextComment 0x561dff4204b0 <line:583:1, col:68> Text="  priority unmasks events at a higher priority, they are dispatched."
|   |-ParagraphComment 0x561dff420530 <line:585:1, col:2>
|   | `-TextComment 0x561dff420500 <col:1, col:2> Text="  "
|   `-ParamCommandComment 0x561dff420550 <col:3, col:43> [in] implicitly Param="NewTpl"
|     `-ParagraphComment 0x561dff4205e0 <col:17, col:43>
|       `-TextComment 0x561dff4205b0 <col:17, col:43> Text="  New, lower, task priority"
|-VarDecl 0x561dff403610 <line:604:1, line:605:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff420a00 <line:595:1, line:601:64>
|   |-ParagraphComment 0x561dff4206c0 <line:595:1, col:34>
|   | `-TextComment 0x561dff420690 <col:1, col:34> Text="  Introduces a fine-grained stall."
|   |-ParagraphComment 0x561dff420710 <line:597:1, col:2>
|   | `-TextComment 0x561dff4206e0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff420730 <col:3, col:79> [in] implicitly Param="Microseconds"
|   | `-ParagraphComment 0x561dff4207c0 <col:23, col:79>
|   |   `-TextComment 0x561dff420790 <col:23, col:79> Text="           The number of microseconds to stall execution."
|   |-ParagraphComment 0x561dff420810 <line:599:1, col:2>
|   | `-TextComment 0x561dff4207e0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff420830 <col:3, line:601:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff420900 <line:599:22, line:601:2>
|   |   |-TextComment 0x561dff420880 <line:599:22, col:81> Text="            Execution was stalled for at least the requested"
|   |   |-TextComment 0x561dff4208a0 <line:600:1, col:56> Text="                                 amount of microseconds."
|   |   `-TextComment 0x561dff4208c0 <line:601:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff420920 <col:3, col:64> Name="retval" Arg[0]="EFI_NOT_AVAILABLE_YET"
|     `-ParagraphComment 0x561dff4209b0 <col:32, col:64>
|       `-TextComment 0x561dff420980 <col:32, col:64> Text="  gMetronome is not available yet"
|-VarDecl 0x561dff4036c0 <line:632:1, line:633:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff4212b0 <line:611:1, line:629:76>
|   |-ParagraphComment 0x561dff420aa0 <line:611:1, col:35>
|   | `-TextComment 0x561dff420a70 <col:1, col:35> Text="  Sets the system's watchdog timer."
|   |-ParagraphComment 0x561dff420b10 <line:613:1, col:2>
|   | `-TextComment 0x561dff420ae0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff420b30 <col:3, line:615:2> [in] implicitly Param="Timeout"
|   | `-ParagraphComment 0x561dff420c10 <line:613:18, line:615:2>
|   |   |-TextComment 0x561dff420b90 <line:613:18, col:77> Text="         The number of seconds to set the watchdog timer to."
|   |   |-TextComment 0x561dff420bb0 <line:614:1, col:61> Text="                          A value of zero disables the timer."
|   |   `-TextComment 0x561dff420bd0 <line:615:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff420c30 <col:3, line:619:2> [in] implicitly Param="WatchdogCode"
|   | `-ParagraphComment 0x561dff420d60 <line:615:23, line:619:2>
|   |   |-TextComment 0x561dff420c90 <line:615:23, col:77> Text="    The numeric code to log on a watchdog timer timeout"
|   |   |-TextComment 0x561dff420cb0 <line:616:1, col:78> Text="                          event. The firmware reserves codes 0x0000 to 0xFFFF."
|   |   |-TextComment 0x561dff420cd0 <line:617:1, col:77> Text="                          Loaders and operating systems may use other timeout"
|   |   |-TextComment 0x561dff420cf0 <line:618:1, col:32> Text="                          codes."
|   |   `-TextComment 0x561dff420d10 <line:619:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff420d80 <col:3, line:620:2> [in] implicitly Param="DataSize"
|   | `-ParagraphComment 0x561dff420e30 <line:619:19, line:620:2>
|   |   |-TextComment 0x561dff420de0 <line:619:19, col:62> Text="        The size, in bytes, of WatchdogData."
|   |   `-TextComment 0x561dff420e00 <line:620:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff420e50 <col:3, line:624:41> [in] implicitly Param="WatchdogData"
|   | `-ParagraphComment 0x561dff420f80 <line:620:23, line:624:41>
|   |   |-TextComment 0x561dff420eb0 <line:620:23, col:79> Text="    A data buffer that includes a Null-terminated Unicode"
|   |   |-TextComment 0x561dff420ed0 <line:621:1, col:80> Text="                          string, optionally followed by additional binary data."
|   |   |-TextComment 0x561dff420ef0 <line:622:1, col:78> Text="                          The string is a description that the call may use to"
|   |   |-TextComment 0x561dff420f10 <line:623:1, col:73> Text="                          further indicate the reason to be logged with a"
|   |   `-TextComment 0x561dff420f30 <line:624:1, col:41> Text="                          watchdog event."
|   |-ParagraphComment 0x561dff420fd0 <line:626:1, col:2>
|   | `-TextComment 0x561dff420fa0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff420ff0 <col:3, line:627:2> Name="return"
|   | `-ParagraphComment 0x561dff421070 <line:626:10, line:627:2>
|   |   |-TextComment 0x561dff421020 <line:626:10, col:56> Text=" EFI_SUCCESS               Timeout has been set"
|   |   `-TextComment 0x561dff421040 <line:627:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff421090 <col:3, line:628:2> Name="return"
|   | `-ParagraphComment 0x561dff421110 <line:627:10, line:628:2>
|   |   |-TextComment 0x561dff4210c0 <line:627:10, col:70> Text=" EFI_NOT_AVAILABLE_YET     WatchdogTimer is not available yet"
|   |   `-TextComment 0x561dff4210e0 <line:628:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff421130 <col:3, line:629:2> Name="return"
|   | `-ParagraphComment 0x561dff4211b0 <line:628:10, line:629:2>
|   |   |-TextComment 0x561dff421160 <line:628:10, col:85> Text=" EFI_UNSUPPORTED           System does not have a timer (currently not used)"
|   |   `-TextComment 0x561dff421180 <line:629:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff4211d0 <col:3, col:76> Name="return"
|     `-ParagraphComment 0x561dff421230 <col:10, col:76>
|       `-TextComment 0x561dff421200 <col:10, col:76> Text=" EFI_DEVICE_ERROR          Could not complete due to hardware error"
|-VarDecl 0x561dff407bb0 <line:655:1, line:656:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff421870 <line:642:1, line:652:21>
|   |-ParagraphComment 0x561dff421370 <line:642:1, line:643:76>
|   | |-TextComment 0x561dff421320 <line:642:1, col:87> Text="  Wrapper function to CoreInstallProtocolInterfaceNotify.  This is the public API which"
|   | `-TextComment 0x561dff421340 <line:643:1, col:76> Text="  Calls the private one which contains a BOOLEAN parameter for notifications"
|   |-ParagraphComment 0x561dff4213c0 <line:645:1, col:2>
|   | `-TextComment 0x561dff421390 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4213e0 <col:3, line:647:2> [in] implicitly Param="UserHandle"
|   | `-ParagraphComment 0x561dff4214c0 <line:645:21, line:647:2>
|   |   |-TextComment 0x561dff421440 <line:645:21, col:79> Text="             The handle to install the protocol handler on,"
|   |   |-TextComment 0x561dff421460 <line:646:1, col:75> Text="                                 or NULL if a new handle is to be allocated"
|   |   `-TextComment 0x561dff421480 <line:647:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4214e0 <col:3, line:648:2> [in] implicitly Param="Protocol"
|   | `-ParagraphComment 0x561dff421590 <line:647:19, line:648:2>
|   |   |-TextComment 0x561dff421540 <line:647:19, col:66> Text="               The protocol to add to the handle"
|   |   `-TextComment 0x561dff421560 <line:648:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4215b0 <col:3, line:650:2> [in] implicitly Param="InterfaceType"
|   | `-ParagraphComment 0x561dff421690 <line:648:24, line:650:2>
|   |   |-TextComment 0x561dff421610 <line:648:24, col:75> Text="          Indicates whether Interface is supplied in"
|   |   |-TextComment 0x561dff421630 <line:649:1, col:45> Text="                                 native form."
|   |   `-TextComment 0x561dff421650 <line:650:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4216b0 <col:3, col:75> [in] implicitly Param="Interface"
|   | `-ParagraphComment 0x561dff421740 <col:20, col:75>
|   |   `-TextComment 0x561dff421710 <col:20, col:75> Text="              The interface for the protocol being added"
|   |-ParagraphComment 0x561dff421790 <line:652:1, col:2>
|   | `-TextComment 0x561dff421760 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff4217b0 <col:3, col:21> Name="return"
|     `-ParagraphComment 0x561dff421810 <col:10, col:21>
|       `-TextComment 0x561dff4217e0 <col:10, col:21> Text=" Status code"
|-FunctionDecl 0x561dff407cf8 <line:681:1, line:688:3> line:682:1 invalid CoreInstallProtocolInterfaceNotify 'int (int)'
| |-ParmVarDecl 0x561dff407c60 <line:683:3, col:6> col:6 invalid OUT 'int'
| `-FullComment 0x561dff4220f0 <line:665:1, line:678:74>
|   |-ParagraphComment 0x561dff421910 <line:665:1, col:67>
|   | `-TextComment 0x561dff4218e0 <col:1, col:67> Text="  Installs a protocol interface into the boot services environment."
|   |-ParagraphComment 0x561dff421960 <line:667:1, col:2>
|   | `-TextComment 0x561dff421930 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff421980 <col:3, line:669:2> [in] implicitly Param="UserHandle"
|   | `-ParagraphComment 0x561dff421a60 <line:667:21, line:669:2>
|   |   |-TextComment 0x561dff4219e0 <line:667:21, col:79> Text="             The handle to install the protocol handler on,"
|   |   |-TextComment 0x561dff421a00 <line:668:1, col:75> Text="                                 or NULL if a new handle is to be allocated"
|   |   `-TextComment 0x561dff421a20 <line:669:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff421a80 <col:3, line:670:2> [in] implicitly Param="Protocol"
|   | `-ParagraphComment 0x561dff421b40 <line:669:19, line:670:2>
|   |   |-TextComment 0x561dff421af0 <line:669:19, col:66> Text="               The protocol to add to the handle"
|   |   `-TextComment 0x561dff421b10 <line:670:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff421b60 <col:3, line:672:2> [in] implicitly Param="InterfaceType"
|   | `-ParagraphComment 0x561dff421c40 <line:670:24, line:672:2>
|   |   |-TextComment 0x561dff421bc0 <line:670:24, col:75> Text="          Indicates whether Interface is supplied in"
|   |   |-TextComment 0x561dff421be0 <line:671:1, col:45> Text="                                 native form."
|   |   `-TextComment 0x561dff421c00 <line:672:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff421c60 <col:3, line:673:2> [in] implicitly Param="Interface"
|   | `-ParagraphComment 0x561dff421d10 <line:672:20, line:673:2>
|   |   |-TextComment 0x561dff421cc0 <line:672:20, col:75> Text="              The interface for the protocol being added"
|   |   `-TextComment 0x561dff421ce0 <line:673:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff421d30 <col:3, line:674:50> [in] implicitly Param="Notify"
|   | `-ParagraphComment 0x561dff421de0 <line:673:17, line:674:50>
|   |   |-TextComment 0x561dff421d90 <line:673:17, col:79> Text="                 indicates whether notify the notification list"
|   |   `-TextComment 0x561dff421db0 <line:674:1, col:50> Text="                                 for this protocol"
|   |-ParagraphComment 0x561dff421e30 <line:676:1, col:2>
|   | `-TextComment 0x561dff421e00 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff421e50 <col:3, line:677:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff421f00 <line:676:32, line:677:2>
|   |   |-TextComment 0x561dff421eb0 <line:676:32, col:50> Text="  Invalid parameter"
|   |   `-TextComment 0x561dff421ed0 <line:677:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff421f20 <col:3, line:678:2> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|   | `-ParagraphComment 0x561dff421fd0 <line:677:31, line:678:2>
|   |   |-TextComment 0x561dff421f80 <line:677:31, col:61> Text="   No enough buffer to allocate"
|   |   `-TextComment 0x561dff421fa0 <line:678:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff421ff0 <col:3, col:74> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff422070 <col:22, col:74>
|       `-TextComment 0x561dff422040 <col:22, col:74> Text="            Protocol interface successfully installed"
|-VarDecl 0x561dff407de0 <line:711:1, line:712:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff422940 <line:691:1, line:708:97>
|   |-ParagraphComment 0x561dff422200 <line:691:1, line:694:41>
|   | |-TextComment 0x561dff422160 <line:691:1, col:75> Text="  Installs a list of protocol interface into the boot services environment."
|   | |-TextComment 0x561dff422180 <line:692:1, col:72> Text="  This function calls InstallProtocolInterface() in a loop. If any error"
|   | |-TextComment 0x561dff4221a0 <line:693:1, col:71> Text="  occures all the protocols added by this function are removed. This is"
|   | `-TextComment 0x561dff4221c0 <line:694:1, col:41> Text="  basically a lib function to save space."
|   |-ParagraphComment 0x561dff422250 <line:696:1, col:2>
|   | `-TextComment 0x561dff422220 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff422270 <col:3, line:698:2> [in] implicitly Param="Handle"
|   | `-ParagraphComment 0x561dff422350 <line:696:17, line:698:2>
|   |   |-TextComment 0x561dff4222d0 <line:696:17, col:80> Text="                 The handle to install the protocol handlers on,"
|   |   |-TextComment 0x561dff4222f0 <line:697:1, col:75> Text="                                 or NULL if a new handle is to be allocated"
|   |   `-TextComment 0x561dff422310 <line:698:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff422370 <col:3, line:701:63> [in] implicitly Param="..."
|   | `-ParagraphComment 0x561dff422470 <line:698:14, line:701:63>
|   |   |-TextComment 0x561dff4223d0 <line:698:14, col:79> Text="                    EFI_GUID followed by protocol instance. A NULL"
|   |   |-TextComment 0x561dff4223f0 <line:699:1, col:72> Text="                                 terminates the  list. The pairs are the"
|   |   |-TextComment 0x561dff422410 <line:700:1, col:81> Text="                                 arguments to InstallProtocolInterface(). All the"
|   |   `-TextComment 0x561dff422430 <line:701:1, col:63> Text="                                 protocols are added to Handle."
|   |-ParagraphComment 0x561dff4224c0 <line:703:1, col:2>
|   | `-TextComment 0x561dff422490 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4224e0 <col:3, line:704:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff422580 <line:703:22, line:704:2>
|   |   |-TextComment 0x561dff422530 <line:703:22, col:74> Text="            All the protocol interface was installed."
|   |   `-TextComment 0x561dff422550 <line:704:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4225a0 <col:3, line:705:2> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|   | `-ParagraphComment 0x561dff422650 <line:704:31, line:705:2>
|   |   |-TextComment 0x561dff422600 <line:704:31, col:98> Text="   There was not enough memory in pool to install all the protocols."
|   |   `-TextComment 0x561dff422620 <line:705:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff422670 <col:3, line:707:2> Name="retval" Arg[0]="EFI_ALREADY_STARTED"
|   | `-ParagraphComment 0x561dff422750 <line:705:30, line:707:2>
|   |   |-TextComment 0x561dff4226d0 <line:705:30, col:105> Text="    A Device Path Protocol instance was passed in that is already present in"
|   |   |-TextComment 0x561dff4226f0 <line:706:1, col:53> Text="                                 the handle database."
|   |   `-TextComment 0x561dff422710 <line:707:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff422770 <col:3, line:708:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff422820 <line:707:32, line:708:2>
|   |   |-TextComment 0x561dff4227d0 <line:707:32, col:48> Text="  Handle is NULL."
|   |   `-TextComment 0x561dff4227f0 <line:708:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff422840 <col:3, col:97> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|     `-ParagraphComment 0x561dff4228d0 <col:32, col:97>
|       `-TextComment 0x561dff4228a0 <col:32, col:97> Text="  Protocol is already installed on the handle specified by Handle."
|-VarDecl 0x561dff407e90 <line:732:1, line:733:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff423700 <line:719:1, line:729:21>
|   |-ParagraphComment 0x561dff422a30 <line:719:1, line:721:41>
|   | |-TextComment 0x561dff4229b0 <line:719:1, col:75> Text="  Uninstalls a list of protocol interface in the boot services environment."
|   | |-TextComment 0x561dff4229d0 <line:720:1, col:68> Text="  This function calls UnisatllProtocolInterface() in a loop. This is"
|   | `-TextComment 0x561dff4229f0 <line:721:1, col:41> Text="  basically a lib function to save space."
|   |-ParagraphComment 0x561dff422a80 <line:723:1, col:2>
|   | `-TextComment 0x561dff422a50 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff422aa0 <col:3, line:724:2> [in] implicitly Param="Handle"
|   | `-ParagraphComment 0x561dff4234c0 <line:723:17, line:724:2>
|   |   |-TextComment 0x561dff423470 <line:723:17, col:69> Text="                 The handle to uninstall the protocol"
|   |   `-TextComment 0x561dff423490 <line:724:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4234e0 <col:3, line:727:67> [in] implicitly Param="..."
|   | `-ParagraphComment 0x561dff4235e0 <line:724:14, line:727:67>
|   |   |-TextComment 0x561dff423540 <line:724:14, col:79> Text="                    EFI_GUID followed by protocol instance. A NULL"
|   |   |-TextComment 0x561dff423560 <line:725:1, col:72> Text="                                 terminates the  list. The pairs are the"
|   |   |-TextComment 0x561dff423580 <line:726:1, col:79> Text="                                 arguments to UninstallProtocolInterface(). All"
|   |   `-TextComment 0x561dff4235a0 <line:727:1, col:67> Text="                                 the protocols are added to Handle."
|   |-ParagraphComment 0x561dff423630 <line:729:1, col:2>
|   | `-TextComment 0x561dff423600 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff423650 <col:3, col:21> Name="return"
|     `-ParagraphComment 0x561dff4236b0 <col:10, col:21>
|       `-TextComment 0x561dff423680 <col:10, col:21> Text=" Status code"
|-VarDecl 0x561dff407f40 <line:753:1, line:754:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff423e30 <line:740:1, line:750:75>
|   |-ParagraphComment 0x561dff4237a0 <line:740:1, col:116>
|   | `-TextComment 0x561dff423770 <col:1, col:116> Text="  Reinstall a protocol interface on a device handle.  The OldInterface for Protocol is replaced by the NewInterface."
|   |-ParagraphComment 0x561dff4237f0 <line:742:1, col:2>
|   | `-TextComment 0x561dff4237c0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff423810 <col:3, line:744:2> [in] implicitly Param="UserHandle"
|   | `-ParagraphComment 0x561dff4238f0 <line:742:21, line:744:2>
|   |   |-TextComment 0x561dff423870 <line:742:21, col:71> Text="             Handle on which the interface is to be"
|   |   |-TextComment 0x561dff423890 <line:743:1, col:44> Text="                                 reinstalled"
|   |   `-TextComment 0x561dff4238b0 <line:744:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff423910 <col:3, line:745:2> [in] implicitly Param="Protocol"
|   | `-ParagraphComment 0x561dff4239c0 <line:744:19, line:745:2>
|   |   |-TextComment 0x561dff423970 <line:744:19, col:64> Text="               The numeric ID of the interface"
|   |   `-TextComment 0x561dff423990 <line:745:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4239e0 <col:3, line:746:2> [in] implicitly Param="OldInterface"
|   | `-ParagraphComment 0x561dff423a90 <line:745:23, line:746:2>
|   |   |-TextComment 0x561dff423a40 <line:745:23, col:63> Text="           A pointer to the old interface"
|   |   `-TextComment 0x561dff423a60 <line:746:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff423ab0 <col:3, col:63> [in] implicitly Param="NewInterface"
|   | `-ParagraphComment 0x561dff423b40 <col:23, col:63>
|   |   `-TextComment 0x561dff423b10 <col:23, col:63> Text="           A pointer to the new interface"
|   |-ParagraphComment 0x561dff423b90 <line:748:1, col:2>
|   | `-TextComment 0x561dff423b60 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff423bb0 <col:3, line:749:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff423c50 <line:748:22, line:749:2>
|   |   |-TextComment 0x561dff423c00 <line:748:22, col:69> Text="            The protocol interface was installed"
|   |   `-TextComment 0x561dff423c20 <line:749:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff423c70 <col:3, line:750:2> Name="retval" Arg[0]="EFI_NOT_FOUND"
|   | `-ParagraphComment 0x561dff423d10 <line:749:24, line:750:2>
|   |   |-TextComment 0x561dff423cc0 <line:749:24, col:77> Text="          The OldInterface on the handle was not found"
|   |   `-TextComment 0x561dff423ce0 <line:750:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff423d30 <col:3, col:75> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|     `-ParagraphComment 0x561dff423dc0 <col:32, col:75>
|       `-TextComment 0x561dff423d90 <col:32, col:75> Text="  One of the parameters has an invalid value"
|-VarDecl 0x561dff407ff0 <line:775:1, line:776:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff4243e0 <line:763:1, line:772:77>
|   |-ParagraphComment 0x561dff423f20 <line:763:1, line:765:18>
|   | |-TextComment 0x561dff423ea0 <line:763:1, col:66> Text="  Uninstalls all instances of a protocol:interfacer from a handle."
|   | |-TextComment 0x561dff423ec0 <line:764:1, col:63> Text="  If the last protocol interface is remove from the handle, the"
|   | `-TextComment 0x561dff423ee0 <line:765:1, col:18> Text="  handle is freed."
|   |-ParagraphComment 0x561dff423f70 <line:767:1, col:2>
|   | `-TextComment 0x561dff423f40 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff423f90 <col:3, line:768:2> [in] implicitly Param="UserHandle"
|   | `-ParagraphComment 0x561dff424040 <line:767:21, line:768:2>
|   |   |-TextComment 0x561dff423ff0 <line:767:21, col:79> Text="             The handle to remove the protocol handler from"
|   |   `-TextComment 0x561dff424010 <line:768:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff424060 <col:3, line:769:2> [in] implicitly Param="Protocol"
|   | `-ParagraphComment 0x561dff424110 <line:768:19, line:769:2>
|   |   |-TextComment 0x561dff4240c0 <line:768:19, col:79> Text="               The protocol, of protocol:interface, to remove"
|   |   `-TextComment 0x561dff4240e0 <line:769:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff424130 <col:3, col:80> [in] implicitly Param="Interface"
|   | `-ParagraphComment 0x561dff4241c0 <col:20, col:80>
|   |   `-TextComment 0x561dff424190 <col:20, col:80> Text="              The interface, of protocol:interface, to remove"
|   |-ParagraphComment 0x561dff424210 <line:771:1, col:2>
|   | `-TextComment 0x561dff4241e0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff424230 <col:3, line:772:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff4242e0 <line:771:32, line:772:2>
|   |   |-TextComment 0x561dff424290 <line:771:32, col:50> Text="  Protocol is NULL."
|   |   `-TextComment 0x561dff4242b0 <line:772:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff424300 <col:3, col:77> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff424380 <col:22, col:77>
|       `-TextComment 0x561dff424350 <col:22, col:77> Text="            Protocol interface successfully uninstalled."
|-VarDecl 0x561dff4080a0 <line:794:1, line:795:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff424880 <line:784:1, line:791:57>
|   |-ParagraphComment 0x561dff424490 <line:784:1, col:68>
|   | `-TextComment 0x561dff424460 <col:1, col:68> Text="  Queries a handle to determine if it supports a specified protocol."
|   |-ParagraphComment 0x561dff4244e0 <line:786:1, col:2>
|   | `-TextComment 0x561dff4244b0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff424500 <col:3, line:787:2> [in] implicitly Param="UserHandle"
|   | `-ParagraphComment 0x561dff4245b0 <line:786:21, line:787:2>
|   |   |-TextComment 0x561dff424560 <line:786:21, col:58> Text="             The handle being queried."
|   |   `-TextComment 0x561dff424580 <line:787:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4245d0 <col:3, line:788:2> [in] implicitly Param="Protocol"
|   | `-ParagraphComment 0x561dff424680 <line:787:19, line:788:2>
|   |   |-TextComment 0x561dff424630 <line:787:19, col:81> Text="               The published unique identifier of the protocol."
|   |   `-TextComment 0x561dff424650 <line:788:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4246a0 <col:3, line:789:78> [in] implicitly Param="Interface"
|   | `-ParagraphComment 0x561dff424750 <line:788:20, line:789:78>
|   |   |-TextComment 0x561dff424700 <line:788:20, col:76> Text="              Supplies the address where a pointer to the"
|   |   `-TextComment 0x561dff424720 <line:789:1, col:78> Text="                                 corresponding Protocol Interface is returned."
|   |-ParagraphComment 0x561dff4247a0 <line:791:1, col:2>
|   | `-TextComment 0x561dff424770 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff4247c0 <col:3, col:57> Name="return"
|     `-ParagraphComment 0x561dff424820 <col:10, col:57>
|       `-TextComment 0x561dff4247f0 <col:10, col:57> Text=" The requested protocol interface for the handle"
|-VarDecl 0x561dff408150 <line:822:1, line:823:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff425170 <line:803:1, line:819:60>
|   |-ParagraphComment 0x561dff424970 <line:803:1, line:805:42>
|   | |-TextComment 0x561dff4248f0 <line:803:1, col:60> Text="  Locates the installed protocol handler for the handle, and"
|   | |-TextComment 0x561dff424910 <line:804:1, col:64> Text="  invokes it to obtain the protocol interface. Usage information"
|   | `-TextComment 0x561dff424930 <line:805:1, col:42> Text="  is registered in the protocol data base."
|   |-ParagraphComment 0x561dff4249c0 <line:807:1, col:2>
|   | `-TextComment 0x561dff424990 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4249e0 <col:3, line:808:2> [in] implicitly Param="UserHandle"
|   | `-ParagraphComment 0x561dff424a90 <line:807:21, line:808:2>
|   |   |-TextComment 0x561dff424a40 <line:807:21, col:79> Text="             The handle to obtain the protocol interface on"
|   |   `-TextComment 0x561dff424a60 <line:808:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff424ab0 <col:3, line:809:2> [in] implicitly Param="Protocol"
|   | `-ParagraphComment 0x561dff424b60 <line:808:19, line:809:2>
|   |   |-TextComment 0x561dff424b10 <line:808:19, col:55> Text="               The ID of the protocol"
|   |   `-TextComment 0x561dff424b30 <line:809:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff424b80 <col:3, line:810:2> [in] implicitly Param="Interface"
|   | `-ParagraphComment 0x561dff424c30 <line:809:20, line:810:2>
|   |   |-TextComment 0x561dff424be0 <line:809:20, col:78> Text="              The location to return the protocol interface"
|   |   `-TextComment 0x561dff424c00 <line:810:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff424c50 <col:3, line:813:2> [in] implicitly Param="ImageHandle"
|   | `-ParagraphComment 0x561dff424d50 <line:810:22, line:813:2>
|   |   |-TextComment 0x561dff424cb0 <line:810:22, col:76> Text="            The handle of the Image that is opening the"
|   |   |-TextComment 0x561dff424cd0 <line:811:1, col:77> Text="                                 protocol interface specified by Protocol and"
|   |   |-TextComment 0x561dff424cf0 <line:812:1, col:43> Text="                                 Interface."
|   |   `-TextComment 0x561dff424d10 <line:813:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff424d70 <col:3, line:815:2> [in] implicitly Param="ControllerHandle"
|   | `-ParagraphComment 0x561dff424e60 <line:813:27, line:815:2>
|   |   |-TextComment 0x561dff424de0 <line:813:27, col:77> Text="       The controller handle that is requiring this"
|   |   |-TextComment 0x561dff424e00 <line:814:1, col:43> Text="                                 interface."
|   |   `-TextComment 0x561dff424e20 <line:815:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff424e80 <col:3, line:816:66> [in] implicitly Param="Attributes"
|   | `-ParagraphComment 0x561dff424f30 <line:815:21, line:816:66>
|   |   |-TextComment 0x561dff424ee0 <line:815:21, col:72> Text="             The open mode of the protocol interface"
|   |   `-TextComment 0x561dff424f00 <line:816:1, col:66> Text="                                 specified by Handle and Protocol."
|   |-ParagraphComment 0x561dff424f80 <line:818:1, col:2>
|   | `-TextComment 0x561dff424f50 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff424fa0 <col:3, line:819:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff425050 <line:818:32, line:819:2>
|   |   |-TextComment 0x561dff425000 <line:818:32, col:50> Text="  Protocol is NULL."
|   |   `-TextComment 0x561dff425020 <line:819:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff425070 <col:3, col:60> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff4250f0 <col:22, col:60>
|       `-TextComment 0x561dff4250c0 <col:22, col:60> Text="            Get the protocol interface."
|-VarDecl 0x561dff408200 <line:844:1, line:845:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff425630 <line:834:1, line:841:62>
|   |-ParagraphComment 0x561dff425210 <line:834:1, col:57>
|   | `-TextComment 0x561dff4251e0 <col:1, col:57> Text="  Return information about Opened protocols in the system"
|   |-ParagraphComment 0x561dff425260 <line:836:1, col:2>
|   | `-TextComment 0x561dff425230 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff425280 <col:3, line:837:2> [in] implicitly Param="UserHandle"
|   | `-ParagraphComment 0x561dff425330 <line:836:21, line:837:2>
|   |   |-TextComment 0x561dff4252e0 <line:836:21, col:78> Text="             The handle to close the protocol interface on"
|   |   `-TextComment 0x561dff425300 <line:837:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff425350 <col:3, line:838:2> [in] implicitly Param="Protocol"
|   | `-ParagraphComment 0x561dff425400 <line:837:19, line:838:2>
|   |   |-TextComment 0x561dff4253b0 <line:837:19, col:55> Text="               The ID of the protocol"
|   |   `-TextComment 0x561dff4253d0 <line:838:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff425420 <col:3, line:841:2> [in] implicitly Param="EntryBuffer"
|   | `-ParagraphComment 0x561dff425530 <line:838:22, line:841:2>
|   |   |-TextComment 0x561dff425490 <line:838:22, col:71> Text="            A pointer to a buffer of open protocol"
|   |   |-TextComment 0x561dff4254b0 <line:839:1, col:59> Text="                                 information in the form of"
|   |   |-TextComment 0x561dff4254d0 <line:840:1, col:80> Text="                                 EFI_OPEN_PROTOCOL_INFORMATION_ENTRY structures."
|   |   `-TextComment 0x561dff4254f0 <line:841:1, col:2> Text="  "
|   `-ParamCommandComment 0x561dff425550 <col:3, col:62> [in] implicitly Param="EntryCount"
|     `-ParagraphComment 0x561dff4255e0 <col:21, col:62>
|       `-TextComment 0x561dff4255b0 <col:21, col:62> Text="             Number of EntryBuffer entries"
|-VarDecl 0x561dff4082b0 <line:878:1, line:879:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff425f20 <line:854:1, line:875:45>
|   |-ParagraphComment 0x561dff4256d0 <line:854:1, col:69>
|   | `-TextComment 0x561dff4256a0 <col:1, col:69> Text="  Closes a protocol on a handle that was opened using OpenProtocol()."
|   |-ParagraphComment 0x561dff425720 <line:856:1, col:2>
|   | `-TextComment 0x561dff4256f0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff425740 <col:3, line:859:2> [in] implicitly Param="UserHandle"
|   | `-ParagraphComment 0x561dff425840 <line:856:21, line:859:2>
|   |   |-TextComment 0x561dff4257a0 <line:856:21, col:79> Text="             The handle for the protocol interface that was"
|   |   |-TextComment 0x561dff4257c0 <line:857:1, col:78> Text="                                 previously opened with OpenProtocol(), and is"
|   |   |-TextComment 0x561dff4257e0 <line:858:1, col:50> Text="                                 now being closed."
|   |   `-TextComment 0x561dff425800 <line:859:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff425860 <col:3, line:862:2> [in] implicitly Param="Protocol"
|   | `-ParagraphComment 0x561dff425960 <line:859:19, line:862:2>
|   |   |-TextComment 0x561dff4258c0 <line:859:19, col:81> Text="               The published unique identifier of the protocol."
|   |   |-TextComment 0x561dff4258e0 <line:860:1, col:79> Text="                                 It is the caller's responsibility to pass in a"
|   |   |-TextComment 0x561dff425900 <line:861:1, col:44> Text="                                 valid GUID."
|   |   `-TextComment 0x561dff425920 <line:862:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff425980 <col:3, line:864:2> [in] implicitly Param="AgentHandle"
|   | `-ParagraphComment 0x561dff425a60 <line:862:22, line:864:2>
|   |   |-TextComment 0x561dff4259e0 <line:862:22, col:76> Text="            The handle of the agent that is closing the"
|   |   |-TextComment 0x561dff425a00 <line:863:1, col:52> Text="                                 protocol interface."
|   |   `-TextComment 0x561dff425a20 <line:864:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff425a80 <col:3, line:869:61> [in] implicitly Param="ControllerHandle"
|   | `-ParagraphComment 0x561dff425be0 <line:864:27, line:869:61>
|   |   |-TextComment 0x561dff425af0 <line:864:27, col:80> Text="       If the agent that opened a protocol is a driver"
|   |   |-TextComment 0x561dff425b10 <line:865:1, col:77> Text="                                 that follows the EFI Driver Model, then this"
|   |   |-TextComment 0x561dff425b30 <line:866:1, col:81> Text="                                 parameter is the controller handle that required"
|   |   |-TextComment 0x561dff425b50 <line:867:1, col:78> Text="                                 the protocol interface. If the agent does not"
|   |   |-TextComment 0x561dff425b70 <line:868:1, col:81> Text="                                 follow the EFI Driver Model, then this parameter"
|   |   `-TextComment 0x561dff425b90 <line:869:1, col:61> Text="                                 is optional and may be NULL."
|   |-ParagraphComment 0x561dff425c30 <line:871:1, col:2>
|   | `-TextComment 0x561dff425c00 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff425c50 <col:3, line:872:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff425cf0 <line:871:22, line:872:2>
|   |   |-TextComment 0x561dff425ca0 <line:871:22, col:66> Text="            The protocol instance was closed."
|   |   `-TextComment 0x561dff425cc0 <line:872:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff425d10 <col:3, line:874:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff425df0 <line:872:32, line:874:2>
|   |   |-TextComment 0x561dff425d70 <line:872:32, col:81> Text="  Handle, AgentHandle or ControllerHandle is not a"
|   |   |-TextComment 0x561dff425d90 <line:873:1, col:50> Text="                                 valid EFI_HANDLE."
|   |   `-TextComment 0x561dff425db0 <line:874:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff425e10 <col:3, line:875:45> Name="retval" Arg[0]="EFI_NOT_FOUND"
|     `-ParagraphComment 0x561dff425eb0 <line:874:24, line:875:45>
|       |-TextComment 0x561dff425e60 <line:874:24, col:71> Text="          Can not find the specified protocol or"
|       `-TextComment 0x561dff425e80 <line:875:1, col:45> Text="                                 AgentHandle."
|-VarDecl 0x561dff408360 <line:910:1, line:911:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff426940 <line:888:1, line:907:41>
|   |-ParagraphComment 0x561dff425fe0 <line:888:1, line:889:12>
|   | |-TextComment 0x561dff425f90 <line:888:1, col:101> Text="  Retrieves the list of protocol interface GUIDs that are installed on a handle in a buffer allocated"
|   | `-TextComment 0x561dff425fb0 <line:889:1, col:12> Text="  from pool."
|   |-ParagraphComment 0x561dff426030 <line:891:1, col:2>
|   | `-TextComment 0x561dff426000 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff426050 <col:3, line:893:2> [in] implicitly Param="UserHandle"
|   | `-ParagraphComment 0x561dff426130 <line:891:21, line:893:2>
|   |   |-TextComment 0x561dff4260b0 <line:891:21, col:78> Text="             The handle from which to retrieve the list of"
|   |   |-TextComment 0x561dff4260d0 <line:892:1, col:58> Text="                                 protocol interface GUIDs."
|   |   `-TextComment 0x561dff4260f0 <line:893:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff426150 <col:3, line:895:2> [in] implicitly Param="ProtocolBuffer"
|   | `-ParagraphComment 0x561dff426230 <line:893:25, line:895:2>
|   |   |-TextComment 0x561dff4261b0 <line:893:25, col:81> Text="         A pointer to the list of protocol interface GUID"
|   |   |-TextComment 0x561dff4261d0 <line:894:1, col:71> Text="                                 pointers that are installed on Handle."
|   |   `-TextComment 0x561dff4261f0 <line:895:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff426250 <col:3, line:896:51> [in] implicitly Param="ProtocolBufferCount"
|   | `-ParagraphComment 0x561dff426310 <line:895:30, line:896:51>
|   |   |-TextComment 0x561dff4262c0 <line:895:30, col:81> Text="    A pointer to the number of GUID pointers present"
|   |   `-TextComment 0x561dff4262e0 <line:896:1, col:51> Text="                                 in ProtocolBuffer."
|   |-ParagraphComment 0x561dff426360 <line:898:1, col:2>
|   | `-TextComment 0x561dff426330 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff426380 <col:3, line:902:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff4264b0 <line:898:22, line:902:2>
|   |   |-TextComment 0x561dff4263d0 <line:898:22, col:79> Text="            The list of protocol interface GUIDs installed"
|   |   |-TextComment 0x561dff4263f0 <line:899:1, col:78> Text="                                 on Handle was returned in ProtocolBuffer. The"
|   |   |-TextComment 0x561dff426410 <line:900:1, col:80> Text="                                 number of protocol interface GUIDs was returned"
|   |   |-TextComment 0x561dff426430 <line:901:1, col:56> Text="                                 in ProtocolBufferCount."
|   |   `-TextComment 0x561dff426450 <line:902:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4264d0 <col:3, line:903:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff426580 <line:902:32, line:903:2>
|   |   |-TextComment 0x561dff426530 <line:902:32, col:48> Text="  Handle is NULL."
|   |   `-TextComment 0x561dff426550 <line:903:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4265a0 <col:3, line:904:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff426650 <line:903:32, line:904:2>
|   |   |-TextComment 0x561dff426600 <line:903:32, col:66> Text="  Handle is not a valid EFI_HANDLE."
|   |   `-TextComment 0x561dff426620 <line:904:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff426670 <col:3, line:905:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff426720 <line:904:32, line:905:2>
|   |   |-TextComment 0x561dff4266d0 <line:904:32, col:56> Text="  ProtocolBuffer is NULL."
|   |   `-TextComment 0x561dff4266f0 <line:905:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff426740 <col:3, line:906:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff4267f0 <line:905:32, line:906:2>
|   |   |-TextComment 0x561dff4267a0 <line:905:32, col:61> Text="  ProtocolBufferCount is NULL."
|   |   `-TextComment 0x561dff4267c0 <line:906:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff426810 <col:3, line:907:41> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|     `-ParagraphComment 0x561dff4268c0 <line:906:31, line:907:41>
|       |-TextComment 0x561dff426870 <line:906:31, col:77> Text="   There is not enough pool memory to store the"
|       `-TextComment 0x561dff426890 <line:907:1, col:41> Text="                                 results."
|-VarDecl 0x561dff408410 <line:931:1, line:932:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff426ef0 <line:919:1, line:928:52>
|   |-ParagraphComment 0x561dff4269e0 <line:919:1, col:66>
|   | `-TextComment 0x561dff4269b0 <col:1, col:66> Text="  Add a new protocol notification record for the request protocol."
|   |-ParagraphComment 0x561dff426a30 <line:921:1, col:2>
|   | `-TextComment 0x561dff426a00 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff426a50 <col:3, line:923:2> [in] implicitly Param="Protocol"
|   | `-ParagraphComment 0x561dff426b30 <line:921:19, line:923:2>
|   |   |-TextComment 0x561dff426ab0 <line:921:19, col:73> Text="               The requested protocol to add the notify"
|   |   |-TextComment 0x561dff426ad0 <line:922:1, col:45> Text="                                 registration"
|   |   `-TextComment 0x561dff426af0 <line:923:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff426b50 <col:3, line:924:2> [in] implicitly Param="Event"
|   | `-ParagraphComment 0x561dff426c00 <line:923:16, line:924:2>
|   |   |-TextComment 0x561dff426bb0 <line:923:16, col:52> Text="                  The event to signal"
|   |   `-TextComment 0x561dff426bd0 <line:924:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff426c20 <col:3, col:64> [in] implicitly Param="Registration"
|   | `-ParagraphComment 0x561dff426cb0 <col:23, col:64>
|   |   `-TextComment 0x561dff426c80 <col:23, col:64> Text="           Returns the registration record"
|   |-ParagraphComment 0x561dff426d00 <line:926:1, col:2>
|   | `-TextComment 0x561dff426cd0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff426d20 <col:3, line:927:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff426dd0 <line:926:32, line:927:2>
|   |   |-TextComment 0x561dff426d80 <line:926:32, col:50> Text="  Invalid parameter"
|   |   `-TextComment 0x561dff426da0 <line:927:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff426df0 <col:3, line:928:52> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff426e90 <line:927:22, line:928:52>
|       |-TextComment 0x561dff426e40 <line:927:22, col:78> Text="            Successfully returned the registration record"
|       `-TextComment 0x561dff426e60 <line:928:1, col:52> Text="                                 that has been added"
|-FunctionDecl 0x561dff408558 <line:948:1, line:951:3> line:949:1 invalid CoreUnregisterProtocolNotify 'int (int)'
| |-ParmVarDecl 0x561dff4084c0 <line:950:3, col:6> col:6 invalid EFI_EVENT 'int'
| `-FullComment 0x561dff4271d0 <line:940:1, line:945:62>
|   |-ParagraphComment 0x561dff426f90 <line:940:1, col:67>
|   | `-TextComment 0x561dff426f60 <col:1, col:67> Text="  Removes all the events in the protocol database that match Event."
|   |-ParagraphComment 0x561dff426fe0 <line:942:1, col:2>
|   | `-TextComment 0x561dff426fb0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff427000 <col:3, line:943:42> [in] implicitly Param="Event"
|   | `-ParagraphComment 0x561dff4270b0 <line:942:16, line:943:42>
|   |   |-TextComment 0x561dff427060 <line:942:16, col:72> Text="                  The event to search for in the protocol"
|   |   `-TextComment 0x561dff427080 <line:943:1, col:42> Text="                                 database."
|   |-ParagraphComment 0x561dff427100 <line:945:1, col:2>
|   | `-TextComment 0x561dff4270d0 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff427120 <col:3, col:62> Name="return"
|     `-ParagraphComment 0x561dff427180 <col:10, col:62>
|       `-TextComment 0x561dff427150 <col:10, col:62> Text=" EFI_SUCCESS when done searching the entire database."
|-VarDecl 0x561dff408640 <line:971:1, line:972:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff427a80 <line:954:1, line:968:56>
|   |-ParagraphComment 0x561dff427270 <line:954:1, col:61>
|   | `-TextComment 0x561dff427240 <col:1, col:61> Text="  Locates the requested handle(s) and returns them in Buffer."
|   |-ParagraphComment 0x561dff4272c0 <line:956:1, col:2>
|   | `-TextComment 0x561dff427290 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4272e0 <col:3, line:958:2> [in] implicitly Param="SearchType"
|   | `-ParagraphComment 0x561dff4273c0 <line:956:21, line:958:2>
|   |   |-TextComment 0x561dff427340 <line:956:21, col:76> Text="             The type of search to perform to locate the"
|   |   |-TextComment 0x561dff427360 <line:957:1, col:40> Text="                                 handles"
|   |   `-TextComment 0x561dff427380 <line:958:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4273e0 <col:3, line:959:2> [in] implicitly Param="Protocol"
|   | `-ParagraphComment 0x561dff4274a0 <line:958:19, line:959:2>
|   |   |-TextComment 0x561dff427440 <line:958:19, col:59> Text="               The protocol to search for"
|   |   `-TextComment 0x561dff427460 <line:959:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4274c0 <col:3, line:960:2> [in] implicitly Param="SearchKey"
|   | `-ParagraphComment 0x561dff427570 <line:959:20, line:960:2>
|   |   |-TextComment 0x561dff427520 <line:959:20, col:56> Text="              Dependant on SearchType"
|   |   `-TextComment 0x561dff427540 <line:960:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff427590 <col:3, line:962:2> [in] implicitly Param="BufferSize"
|   | `-ParagraphComment 0x561dff427670 <line:960:21, line:962:2>
|   |   |-TextComment 0x561dff4275f0 <line:960:21, col:76> Text="             On input the size of Buffer.  On output the"
|   |   |-TextComment 0x561dff427610 <line:961:1, col:55> Text="                                 size of data returned."
|   |   `-TextComment 0x561dff427630 <line:962:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff427690 <col:3, col:68> [in] implicitly Param="Buffer"
|   | `-ParagraphComment 0x561dff427720 <col:17, col:68>
|   |   `-TextComment 0x561dff4276f0 <col:17, col:68> Text="                 The buffer to return the results in"
|   |-ParagraphComment 0x561dff427770 <line:964:1, col:2>
|   | `-TextComment 0x561dff427740 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff427790 <col:3, line:966:2> Name="retval" Arg[0]="EFI_BUFFER_TOO_SMALL"
|   | `-ParagraphComment 0x561dff427870 <line:964:31, line:966:2>
|   |   |-TextComment 0x561dff4277f0 <line:964:31, col:74> Text="   Buffer too small, required buffer size is"
|   |   |-TextComment 0x561dff427810 <line:965:1, col:56> Text="                                 returned in BufferSize."
|   |   `-TextComment 0x561dff427830 <line:966:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff427890 <col:3, line:967:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff427940 <line:966:32, line:967:2>
|   |   |-TextComment 0x561dff4278f0 <line:966:32, col:50> Text="  Invalid parameter"
|   |   `-TextComment 0x561dff427910 <line:967:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff427960 <col:3, line:968:56> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff427a00 <line:967:22, line:968:56>
|       |-TextComment 0x561dff4279b0 <line:967:22, col:79> Text="            Successfully found the requested handle(s) and"
|       `-TextComment 0x561dff4279d0 <line:968:1, col:56> Text="                                 returns them in Buffer."
|-VarDecl 0x561dff4086f0 <line:996:1, line:997:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff428130 <line:982:1, line:993:76>
|   |-ParagraphComment 0x561dff427b20 <line:982:1, col:93>
|   | `-TextComment 0x561dff427af0 <col:1, col:93> Text="  Locates the handle to a device on the device path that best matches the specified protocol."
|   |-ParagraphComment 0x561dff427b70 <line:984:1, col:2>
|   | `-TextComment 0x561dff427b40 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff427b90 <col:3, line:985:2> [in] implicitly Param="Protocol"
|   | `-ParagraphComment 0x561dff427c40 <line:984:19, line:985:2>
|   |   |-TextComment 0x561dff427bf0 <line:984:19, col:60> Text="               The protocol to search for."
|   |   `-TextComment 0x561dff427c10 <line:985:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff427c60 <col:3, line:989:2> [in] implicitly Param="DevicePath"
|   | `-ParagraphComment 0x561dff427d90 <line:985:21, line:989:2>
|   |   |-TextComment 0x561dff427cc0 <line:985:21, col:79> Text="             On input, a pointer to a pointer to the device"
|   |   |-TextComment 0x561dff427ce0 <line:986:1, col:76> Text="                                 path. On output, the device path pointer is"
|   |   |-TextComment 0x561dff427d00 <line:987:1, col:79> Text="                                 modified to point to the remaining part of the"
|   |   |-TextComment 0x561dff427d20 <line:988:1, col:44> Text="                                 devicepath."
|   |   `-TextComment 0x561dff427d40 <line:989:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff427db0 <col:3, col:73> [in] implicitly Param="Device"
|   | `-ParagraphComment 0x561dff427e40 <col:17, col:73>
|   |   `-TextComment 0x561dff427e10 <col:17, col:73> Text="                 A pointer to the returned device handle."
|   |-ParagraphComment 0x561dff427e90 <line:991:1, col:2>
|   | `-TextComment 0x561dff427e60 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff427eb0 <col:3, line:992:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff427f50 <line:991:22, line:992:2>
|   |   |-TextComment 0x561dff427f00 <line:991:22, col:67> Text="            The resulting handle was returned."
|   |   `-TextComment 0x561dff427f20 <line:992:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff427f70 <col:3, line:993:2> Name="retval" Arg[0]="EFI_NOT_FOUND"
|   | `-ParagraphComment 0x561dff428010 <line:992:24, line:993:2>
|   |   |-TextComment 0x561dff427fc0 <line:992:24, col:63> Text="          No handles matched the search."
|   |   `-TextComment 0x561dff427fe0 <line:993:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff428030 <col:3, col:76> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|     `-ParagraphComment 0x561dff4280c0 <col:32, col:76>
|       `-TextComment 0x561dff428090 <col:32, col:76> Text="  One of the parameters has an invalid value."
|-VarDecl 0x561dff4087a0 <line:1026:1, line:1027:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff428b20 <line:1005:1, line:1023:70>
|   |-ParagraphComment 0x561dff428220 <line:1005:1, line:1007:41>
|   | |-TextComment 0x561dff4281a0 <line:1005:1, col:74> Text="  Function returns an array of handles that support the requested protocol"
|   | |-TextComment 0x561dff4281c0 <line:1006:1, col:74> Text="  in a buffer allocated from pool. This is a version of CoreLocateHandle()"
|   | `-TextComment 0x561dff4281e0 <line:1007:1, col:41> Text="  that allocates a buffer for the caller."
|   |-ParagraphComment 0x561dff428270 <line:1009:1, col:2>
|   | `-TextComment 0x561dff428240 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff428290 <col:3, line:1010:2> [in] implicitly Param="SearchType"
|   | `-ParagraphComment 0x561dff428340 <line:1009:21, line:1010:2>
|   |   |-TextComment 0x561dff4282f0 <line:1009:21, col:78> Text="             Specifies which handle(s) are to be returned."
|   |   `-TextComment 0x561dff428310 <line:1010:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff428360 <col:3, line:1013:2> [in] implicitly Param="Protocol"
|   | `-ParagraphComment 0x561dff428460 <line:1010:19, line:1013:2>
|   |   |-TextComment 0x561dff4283c0 <line:1010:19, col:76> Text="               Provides the protocol to search by.    This"
|   |   |-TextComment 0x561dff4283e0 <line:1011:1, col:71> Text="                                 parameter is only valid for SearchType"
|   |   |-TextComment 0x561dff428400 <line:1012:1, col:44> Text="                                 ByProtocol."
|   |   `-TextComment 0x561dff428420 <line:1013:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4284a0 <col:3, line:1015:2> [in] implicitly Param="SearchKey"
|   | `-ParagraphComment 0x561dff428580 <line:1013:20, line:1015:2>
|   |   |-TextComment 0x561dff428500 <line:1013:20, col:73> Text="              Supplies the search key depending on the"
|   |   |-TextComment 0x561dff428520 <line:1014:1, col:44> Text="                                 SearchType."
|   |   `-TextComment 0x561dff428540 <line:1015:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4285a0 <col:3, line:1016:2> [in] implicitly Param="NumberHandles"
|   | `-ParagraphComment 0x561dff428650 <line:1015:24, line:1016:2>
|   |   |-TextComment 0x561dff428600 <line:1015:24, col:74> Text="          The number of handles returned in Buffer."
|   |   `-TextComment 0x561dff428620 <line:1016:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff428670 <col:3, line:1017:73> [in] implicitly Param="Buffer"
|   | `-ParagraphComment 0x561dff428720 <line:1016:17, line:1017:73>
|   |   |-TextComment 0x561dff4286d0 <line:1016:17, col:80> Text="                 A pointer to the buffer to return the requested"
|   |   `-TextComment 0x561dff4286f0 <line:1017:1, col:73> Text="                                 array of  handles that support Protocol."
|   |-ParagraphComment 0x561dff428770 <line:1019:1, col:2>
|   | `-TextComment 0x561dff428740 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff428790 <col:3, line:1020:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff428830 <line:1019:22, line:1020:2>
|   |   |-TextComment 0x561dff4287e0 <line:1019:22, col:74> Text="            The result array of handles was returned."
|   |   `-TextComment 0x561dff428800 <line:1020:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff428850 <col:3, line:1021:2> Name="retval" Arg[0]="EFI_NOT_FOUND"
|   | `-ParagraphComment 0x561dff4288f0 <line:1020:24, line:1021:2>
|   |   |-TextComment 0x561dff4288a0 <line:1020:24, col:61> Text="          No handles match the search."
|   |   `-TextComment 0x561dff4288c0 <line:1021:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff428910 <col:3, line:1023:2> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|   | `-ParagraphComment 0x561dff4289f0 <line:1021:31, line:1023:2>
|   |   |-TextComment 0x561dff428970 <line:1021:31, col:77> Text="   There is not enough pool memory to store the"
|   |   |-TextComment 0x561dff428990 <line:1022:1, col:50> Text="                                 matching results."
|   |   `-TextComment 0x561dff4289b0 <line:1023:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff428a10 <col:3, col:70> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|     `-ParagraphComment 0x561dff428aa0 <col:32, col:70>
|       `-TextComment 0x561dff428a70 <col:32, col:70> Text="  One or more parameters are not valid."
|-VarDecl 0x561dff408850 <line:1052:1, line:1053:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff4291f0 <line:1037:1, line:1049:61>
|   |-ParagraphComment 0x561dff428c30 <line:1037:1, line:1040:11>
|   | |-TextComment 0x561dff428b90 <line:1037:1, col:72> Text="  Return the first Protocol Interface that matches the Protocol GUID. If"
|   | |-TextComment 0x561dff428bb0 <line:1038:1, col:73> Text="  Registration is passed in, return a Protocol Instance that was just add"
|   | |-TextComment 0x561dff428bd0 <line:1039:1, col:76> Text="  to the system. If Registration is NULL return the first Protocol Interface"
|   | `-TextComment 0x561dff428bf0 <line:1040:1, col:11> Text="  you find."
|   |-ParagraphComment 0x561dff428c80 <line:1042:1, col:2>
|   | `-TextComment 0x561dff428c50 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff428ca0 <col:3, line:1043:2> [in] implicitly Param="Protocol"
|   | `-ParagraphComment 0x561dff428d50 <line:1042:19, line:1043:2>
|   |   |-TextComment 0x561dff428d00 <line:1042:19, col:59> Text="               The protocol to search for"
|   |   `-TextComment 0x561dff428d20 <line:1043:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff428d70 <col:3, line:1045:2> [in] implicitly Param="Registration"
|   | `-ParagraphComment 0x561dff428e50 <line:1043:23, line:1045:2>
|   |   |-TextComment 0x561dff428dd0 <line:1043:23, col:72> Text="           Optional Registration Key returned from"
|   |   |-TextComment 0x561dff428df0 <line:1044:1, col:57> Text="                                 RegisterProtocolNotify()"
|   |   `-TextComment 0x561dff428e10 <line:1045:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff428e70 <col:3, col:74> [in] implicitly Param="Interface"
|   | `-ParagraphComment 0x561dff428f00 <col:20, col:74>
|   |   `-TextComment 0x561dff428ed0 <col:20, col:74> Text="              Return the Protocol interface (instance)."
|   |-ParagraphComment 0x561dff428f50 <line:1047:1, col:2>
|   | `-TextComment 0x561dff428f20 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff428f70 <col:3, line:1048:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff429010 <line:1047:22, line:1048:2>
|   |   |-TextComment 0x561dff428fc0 <line:1047:22, col:65> Text="            If a valid Interface is returned"
|   |   `-TextComment 0x561dff428fe0 <line:1048:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff429030 <col:3, line:1049:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff4290e0 <line:1048:32, line:1049:2>
|   |   |-TextComment 0x561dff429090 <line:1048:32, col:50> Text="  Invalid parameter"
|   |   `-TextComment 0x561dff4290b0 <line:1049:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff429100 <col:3, col:61> Name="retval" Arg[0]="EFI_NOT_FOUND"
|     `-ParagraphComment 0x561dff429180 <col:24, col:61>
|       `-TextComment 0x561dff429150 <col:24, col:61> Text="          Protocol interface not found"
|-FunctionDecl 0x561dff408910 <line:1067:1, line:1070:3> line:1068:1 invalid CoreGetHandleDatabaseKey 'int ()'
| `-FullComment 0x561dff4293a0 <line:1061:1, line:1064:30>
|   |-ParagraphComment 0x561dff429290 <line:1061:1, col:29>
|   | `-TextComment 0x561dff429260 <col:1, col:29> Text="  return handle database key."
|   |-ParagraphComment 0x561dff4292e0 <line:1064:1, col:2>
|   | `-TextComment 0x561dff4292b0 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff429300 <col:3, col:30> Name="return"
|     `-ParagraphComment 0x561dff429360 <col:10, col:30>
|       `-TextComment 0x561dff429330 <col:10, col:30> Text=" Handle database key."
|-FunctionDecl 0x561dff408a88 <line:1079:1, line:1082:3> line:1080:1 invalid CoreConnectHandlesByKey 'int (int)'
| |-ParmVarDecl 0x561dff4089f0 <line:1081:3, col:11> col:11 invalid Key 'int'
| `-FullComment 0x561dff4295c0 <line:1073:1, line:1076:49>
|   |-ParagraphComment 0x561dff429440 <line:1073:1, col:78>
|   | `-TextComment 0x561dff429410 <col:1, col:78> Text="  Go connect any handles that were created or modified while a image executed."
|   |-ParagraphComment 0x561dff4294b0 <line:1075:1, col:2>
|   | `-TextComment 0x561dff429460 <col:1, col:2> Text="  "
|   `-ParamCommandComment 0x561dff4294d0 <col:3, line:1076:49> [in] implicitly Param="Key" ParamIndex=0
|     `-ParagraphComment 0x561dff429580 <line:1075:14, line:1076:49>
|       |-TextComment 0x561dff429530 <line:1075:14, col:73> Text="                    The Key to show that the handle has been"
|       `-TextComment 0x561dff429550 <line:1076:1, col:49> Text="                                 created/modified"
|-VarDecl 0x561dff40a6f0 <line:1110:1, line:1111:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff429f90 <line:1085:1, line:1107:109>
|   |-ParagraphComment 0x561dff429660 <line:1085:1, col:47>
|   | `-TextComment 0x561dff429630 <col:1, col:47> Text="  Connects one or more drivers to a controller."
|   |-ParagraphComment 0x561dff4296b0 <line:1087:1, col:2>
|   | `-TextComment 0x561dff429680 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4296d0 <col:3, line:1088:2> [in] implicitly Param="ControllerHandle"
|   | `-ParagraphComment 0x561dff429790 <line:1087:27, line:1088:2>
|   |   |-TextComment 0x561dff429740 <line:1087:27, col:100> Text="      The handle of the controller to which driver(s) are to be connected."
|   |   `-TextComment 0x561dff429760 <line:1088:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4297b0 <col:3, line:1090:2> [in] implicitly Param="DriverImageHandle"
|   | `-ParagraphComment 0x561dff4298a0 <line:1088:28, line:1090:2>
|   |   |-TextComment 0x561dff429820 <line:1088:28, col:85> Text="     A pointer to an ordered list handles that support the"
|   |   |-TextComment 0x561dff429840 <line:1089:1, col:60> Text="                                EFI_DRIVER_BINDING_PROTOCOL."
|   |   `-TextComment 0x561dff429860 <line:1090:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4298c0 <col:3, line:1092:2> [in] implicitly Param="RemainingDevicePath"
|   | `-ParagraphComment 0x561dff4299b0 <line:1090:30, line:1092:2>
|   |   |-TextComment 0x561dff429930 <line:1090:30, col:90> Text="   A pointer to the device path that specifies a child of the"
|   |   |-TextComment 0x561dff429950 <line:1091:1, col:73> Text="                                controller specified by ControllerHandle."
|   |   `-TextComment 0x561dff429970 <line:1092:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4299d0 <col:3, line:1095:83> [in] implicitly Param="Recursive"
|   | `-ParagraphComment 0x561dff429ad0 <line:1092:20, line:1095:83>
|   |   |-TextComment 0x561dff429a30 <line:1092:20, col:87> Text="             If TRUE, then ConnectController() is called recursively"
|   |   |-TextComment 0x561dff429a50 <line:1093:1, col:99> Text="                                until the entire tree of controllers below the controller specified"
|   |   |-TextComment 0x561dff429a70 <line:1094:1, col:85> Text="                                by ControllerHandle have been created. If FALSE, then"
|   |   `-TextComment 0x561dff429a90 <line:1095:1, col:83> Text="                                the tree of controllers is only expanded one level."
|   |-ParagraphComment 0x561dff429b20 <line:1097:1, col:2>
|   | `-TextComment 0x561dff429af0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff429b40 <col:3, line:1101:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff429c60 <line:1097:22, line:1101:2>
|   |   |-TextComment 0x561dff429b90 <line:1097:22, col:90> Text="           1) One or more drivers were connected to ControllerHandle."
|   |   |-TextComment 0x561dff429bb0 <line:1098:1, col:85> Text="                                2) No drivers were connected to ControllerHandle, but"
|   |   |-TextComment 0x561dff429bd0 <line:1099:1, col:88> Text="                                RemainingDevicePath is not NULL, and it is an End Device"
|   |   |-TextComment 0x561dff429bf0 <line:1100:1, col:42> Text="                                Path Node."
|   |   `-TextComment 0x561dff429c10 <line:1101:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff429c80 <col:3, line:1102:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff429d30 <line:1101:32, line:1102:2>
|   |   |-TextComment 0x561dff429ce0 <line:1101:32, col:57> Text=" ControllerHandle is NULL."
|   |   `-TextComment 0x561dff429d00 <line:1102:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff429d50 <col:3, line:1105:2> Name="retval" Arg[0]="EFI_NOT_FOUND"
|   | `-ParagraphComment 0x561dff429e40 <line:1102:24, line:1105:2>
|   |   |-TextComment 0x561dff429da0 <line:1102:24, col:85> Text="         1) There are no EFI_DRIVER_BINDING_PROTOCOL instances"
|   |   |-TextComment 0x561dff429dc0 <line:1103:1, col:54> Text="                                present in the system."
|   |   |-TextComment 0x561dff429de0 <line:1104:1, col:81> Text="                                2) No drivers were connected to ControllerHandle."
|   |   `-TextComment 0x561dff429e00 <line:1105:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff429e60 <col:3, line:1107:109> Name="retval" Arg[0]="EFI_SECURITY_VIOLATION"
|     `-ParagraphComment 0x561dff429f10 <line:1106:1, line:1107:109>
|       |-TextComment 0x561dff429ec0 <line:1106:1, col:106> Text="                                The user has no permission to start UEFI device drivers on the device path"
|       `-TextComment 0x561dff429ee0 <line:1107:1, col:109> Text="                                associated with the ControllerHandle or specified by the RemainingDevicePath."
|-VarDecl 0x561dff40a7a0 <line:1151:1, line:1152:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff42aca0 <line:1120:1, line:1148:54>
|   |-ParagraphComment 0x561dff42a030 <line:1120:1, col:39>
|   | `-TextComment 0x561dff42a000 <col:1, col:39> Text="  Disonnects a controller from a driver"
|   |-ParagraphComment 0x561dff42a080 <line:1122:1, col:2>
|   | `-TextComment 0x561dff42a050 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42a0a0 <col:3, line:1126:2> [in] implicitly Param="ControllerHandle"
|   | `-ParagraphComment 0x561dff42a1e0 <line:1122:27, line:1126:2>
|   |   |-TextComment 0x561dff42a110 <line:1122:27, col:78> Text="                      ControllerHandle The handle of"
|   |   |-TextComment 0x561dff42a130 <line:1123:1, col:73> Text="                                                the controller from which"
|   |   |-TextComment 0x561dff42a150 <line:1124:1, col:68> Text="                                                driver(s)  are to be"
|   |   |-TextComment 0x561dff42a170 <line:1125:1, col:61> Text="                                                disconnected."
|   |   `-TextComment 0x561dff42a190 <line:1126:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42a200 <col:3, line:1128:2> [in] implicitly Param="DriverImageHandle"
|   | `-ParagraphComment 0x561dff42a2f0 <line:1126:28, line:1128:2>
|   |   |-TextComment 0x561dff42a270 <line:1126:28, col:79> Text="                     DriverImageHandle The driver to"
|   |   |-TextComment 0x561dff42a290 <line:1127:1, col:81> Text="                                                disconnect from ControllerHandle."
|   |   `-TextComment 0x561dff42a2b0 <line:1128:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42a310 <col:3, line:1129:65> [in] implicitly Param="ChildHandle"
|   | `-ParagraphComment 0x561dff42a3c0 <line:1128:22, line:1129:65>
|   |   |-TextComment 0x561dff42a370 <line:1128:22, col:77> Text="                           ChildHandle The handle of the"
|   |   `-TextComment 0x561dff42a390 <line:1129:1, col:65> Text="                                                child to destroy."
|   |-ParagraphComment 0x561dff42a410 <line:1131:1, col:2>
|   | `-TextComment 0x561dff42a3e0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42a430 <col:3, line:1133:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff42a520 <line:1131:22, line:1133:2>
|   |   |-TextComment 0x561dff42a480 <line:1131:22, col:72> Text="                           One or more drivers were"
|   |   |-TextComment 0x561dff42a4c0 <line:1132:1, col:81> Text="                                                disconnected from the controller."
|   |   `-TextComment 0x561dff42a4e0 <line:1133:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42a540 <col:3, line:1135:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff42a610 <line:1133:22, line:1135:2>
|   |   |-TextComment 0x561dff42a590 <line:1133:22, col:81> Text="                           On entry, no drivers are managing"
|   |   |-TextComment 0x561dff42a5b0 <line:1134:1, col:65> Text="                                                ControllerHandle."
|   |   `-TextComment 0x561dff42a5d0 <line:1135:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42a630 <col:3, line:1138:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff42a720 <line:1135:22, line:1138:2>
|   |   |-TextComment 0x561dff42a680 <line:1135:22, col:78> Text="                           DriverImageHandle is not NULL,"
|   |   |-TextComment 0x561dff42a6a0 <line:1136:1, col:81> Text="                                                and on entry DriverImageHandle is"
|   |   |-TextComment 0x561dff42a6c0 <line:1137:1, col:78> Text="                                                not managing ControllerHandle."
|   |   `-TextComment 0x561dff42a6e0 <line:1138:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42a740 <col:3, line:1139:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff42a7f0 <line:1138:32, line:1139:2>
|   |   |-TextComment 0x561dff42a7a0 <line:1138:32, col:73> Text="                 ControllerHandle is NULL."
|   |   `-TextComment 0x561dff42a7c0 <line:1139:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42a810 <col:3, line:1141:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff42a8f0 <line:1139:32, line:1141:2>
|   |   |-TextComment 0x561dff42a870 <line:1139:32, col:78> Text="                 DriverImageHandle is not NULL,"
|   |   |-TextComment 0x561dff42a890 <line:1140:1, col:81> Text="                                                and it is not a valid EFI_HANDLE."
|   |   `-TextComment 0x561dff42a8b0 <line:1141:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42a910 <col:3, line:1143:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff42a9f0 <line:1141:32, line:1143:2>
|   |   |-TextComment 0x561dff42a970 <line:1141:32, col:79> Text="                 ChildHandle is not NULL, and it"
|   |   |-TextComment 0x561dff42a990 <line:1142:1, col:74> Text="                                                is not a valid EFI_HANDLE."
|   |   `-TextComment 0x561dff42a9b0 <line:1143:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42aa10 <col:3, line:1146:2> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|   | `-ParagraphComment 0x561dff42ab10 <line:1143:31, line:1146:2>
|   |   |-TextComment 0x561dff42aa70 <line:1143:31, col:78> Text="                  There are not enough resources"
|   |   |-TextComment 0x561dff42aa90 <line:1144:1, col:75> Text="                                                available to disconnect any"
|   |   |-TextComment 0x561dff42aab0 <line:1145:1, col:78> Text="                                                drivers from ControllerHandle."
|   |   `-TextComment 0x561dff42aad0 <line:1146:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff42ab30 <col:3, line:1148:54> Name="retval" Arg[0]="EFI_DEVICE_ERROR"
|     `-ParagraphComment 0x561dff42ac10 <line:1146:27, line:1148:54>
|       |-TextComment 0x561dff42ab90 <line:1146:27, col:75> Text="                      The controller could not be"
|       |-TextComment 0x561dff42abb0 <line:1147:1, col:80> Text="                                                disconnected because of a device"
|       `-TextComment 0x561dff42abd0 <line:1148:1, col:54> Text="                                                error."
|-VarDecl 0x561dff40a850 <line:1177:1, line:1178:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff42b5d0 <line:1160:1, line:1174:62>
|   |-ParagraphComment 0x561dff42ad40 <line:1160:1, col:38>
|   | `-TextComment 0x561dff42ad10 <col:1, col:38> Text="  Allocates pages from the memory map."
|   |-ParagraphComment 0x561dff42ad90 <line:1162:1, col:2>
|   | `-TextComment 0x561dff42ad60 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42adb0 <col:3, line:1163:2> [in] implicitly Param="Type"
|   | `-ParagraphComment 0x561dff42ae60 <line:1162:15, line:1163:2>
|   |   |-TextComment 0x561dff42ae10 <line:1162:15, col:66> Text="                   The type of allocation to perform"
|   |   `-TextComment 0x561dff42ae30 <line:1163:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42ae80 <col:3, line:1165:2> [in] implicitly Param="MemoryType"
|   | `-ParagraphComment 0x561dff42af60 <line:1163:21, line:1165:2>
|   |   |-TextComment 0x561dff42aee0 <line:1163:21, col:79> Text="             The type of memory to turn the allocated pages"
|   |   |-TextComment 0x561dff42af00 <line:1164:1, col:37> Text="                                 into"
|   |   `-TextComment 0x561dff42af20 <line:1165:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42af80 <col:3, line:1166:2> [in] implicitly Param="NumberOfPages"
|   | `-ParagraphComment 0x561dff42b030 <line:1165:24, line:1166:2>
|   |   |-TextComment 0x561dff42afe0 <line:1165:24, col:64> Text="          The number of pages to allocate"
|   |   `-TextComment 0x561dff42b000 <line:1166:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42b050 <col:3, line:1167:40> [in] implicitly Param="Memory"
|   | `-ParagraphComment 0x561dff42b100 <line:1166:17, line:1167:40>
|   |   |-TextComment 0x561dff42b0b0 <line:1166:17, col:79> Text="                 A pointer to receive the base allocated memory"
|   |   `-TextComment 0x561dff42b0d0 <line:1167:1, col:40> Text="                                 address"
|   |-ParagraphComment 0x561dff42b150 <line:1169:1, col:2>
|   | `-TextComment 0x561dff42b120 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42b170 <col:3, line:1170:2> Name="return"
|   | `-ParagraphComment 0x561dff42b1f0 <line:1169:10, line:1170:2>
|   |   |-TextComment 0x561dff42b1a0 <line:1169:10, col:81> Text=" Status. On success, Memory is filled in with the base address allocated"
|   |   `-TextComment 0x561dff42b1c0 <line:1170:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42b210 <col:3, line:1172:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff42b2f0 <line:1170:32, line:1172:2>
|   |   |-TextComment 0x561dff42b270 <line:1170:32, col:77> Text="  Parameters violate checking rules defined in"
|   |   |-TextComment 0x561dff42b290 <line:1171:1, col:38> Text="                                 spec."
|   |   `-TextComment 0x561dff42b2b0 <line:1172:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42b310 <col:3, line:1173:2> Name="retval" Arg[0]="EFI_NOT_FOUND"
|   | `-ParagraphComment 0x561dff42b3b0 <line:1172:24, line:1173:2>
|   |   |-TextComment 0x561dff42b360 <line:1172:24, col:80> Text="          Could not allocate pages match the requirement."
|   |   `-TextComment 0x561dff42b380 <line:1173:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42b3d0 <col:3, line:1174:2> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|   | `-ParagraphComment 0x561dff42b480 <line:1173:31, line:1174:2>
|   |   |-TextComment 0x561dff42b430 <line:1173:31, col:61> Text="   No enough pages to allocate."
|   |   `-TextComment 0x561dff42b450 <line:1174:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff42b4d0 <col:3, col:62> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff42b550 <col:22, col:62>
|       `-TextComment 0x561dff42b520 <col:22, col:62> Text="            Pages successfully allocated."
|-VarDecl 0x561dff40a900 <line:1197:1, line:1198:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff42bb00 <line:1187:1, line:1194:56>
|   |-ParagraphComment 0x561dff42b670 <line:1187:1, col:33>
|   | `-TextComment 0x561dff42b640 <col:1, col:33> Text="  Frees previous allocated pages."
|   |-ParagraphComment 0x561dff42b6c0 <line:1189:1, col:2>
|   | `-TextComment 0x561dff42b690 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42b6e0 <col:3, line:1190:2> [in] implicitly Param="Memory"
|   | `-ParagraphComment 0x561dff42b790 <line:1189:17, line:1190:2>
|   |   |-TextComment 0x561dff42b740 <line:1189:17, col:67> Text="                 Base address of memory being freed"
|   |   `-TextComment 0x561dff42b760 <line:1190:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42b7b0 <col:3, col:60> [in] implicitly Param="NumberOfPages"
|   | `-ParagraphComment 0x561dff42b840 <col:24, col:60>
|   |   `-TextComment 0x561dff42b810 <col:24, col:60> Text="          The number of pages to free"
|   |-ParagraphComment 0x561dff42b890 <line:1192:1, col:2>
|   | `-TextComment 0x561dff42b860 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42b8b0 <col:3, line:1193:2> Name="retval" Arg[0]="EFI_NOT_FOUND"
|   | `-ParagraphComment 0x561dff42b950 <line:1192:24, line:1193:2>
|   |   |-TextComment 0x561dff42b900 <line:1192:24, col:79> Text="          Could not find the entry that covers the range"
|   |   `-TextComment 0x561dff42b920 <line:1193:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42b970 <col:3, line:1194:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff42ba20 <line:1193:32, line:1194:2>
|   |   |-TextComment 0x561dff42b9d0 <line:1193:32, col:52> Text="  Address not aligned"
|   |   `-TextComment 0x561dff42b9f0 <line:1194:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff42ba40 <col:3, col:56> Name="return"
|     `-ParagraphComment 0x561dff42baa0 <col:10, col:56>
|       `-TextComment 0x561dff42ba70 <col:10, col:56> Text=" EFI_SUCCESS         -Pages successfully freed."
|-VarDecl 0x561dff40a9b0 <line:1234:1, line:1235:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff42c5b0 <line:1205:1, line:1231:76>
|   |-ParagraphComment 0x561dff42bbc0 <line:1205:1, line:1206:75>
|   | |-TextComment 0x561dff42bb70 <line:1205:1, col:80> Text="  This function returns a copy of the current memory map. The map is an array of"
|   | `-TextComment 0x561dff42bb90 <line:1206:1, col:75> Text="  memory descriptors, each of which describes a contiguous block of memory."
|   |-ParagraphComment 0x561dff42bc10 <line:1208:1, col:2>
|   | `-TextComment 0x561dff42bbe0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42bc30 <col:3, line:1215:2> [in] implicitly Param="MemoryMapSize"
|   | `-ParagraphComment 0x561dff42bdd0 <line:1208:24, line:1215:2>
|   |   |-TextComment 0x561dff42bc90 <line:1208:24, col:72> Text="          A pointer to the size, in bytes, of the"
|   |   |-TextComment 0x561dff42bcb0 <line:1209:1, col:80> Text="                                 MemoryMap buffer. On input, this is the size of"
|   |   |-TextComment 0x561dff42bcd0 <line:1210:1, col:80> Text="                                 the buffer allocated by the caller.  On output,"
|   |   |-TextComment 0x561dff42bcf0 <line:1211:1, col:77> Text="                                 it is the size of the buffer returned by the"
|   |   |-TextComment 0x561dff42bd10 <line:1212:1, col:81> Text="                                 firmware  if the buffer was large enough, or the"
|   |   |-TextComment 0x561dff42bd30 <line:1213:1, col:81> Text="                                 size of the buffer needed  to contain the map if"
|   |   |-TextComment 0x561dff42bd50 <line:1214:1, col:58> Text="                                 the buffer was too small."
|   |   `-TextComment 0x561dff42bd70 <line:1215:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42bdf0 <col:3, line:1217:2> [in] implicitly Param="MemoryMap"
|   | `-ParagraphComment 0x561dff42bed0 <line:1215:20, line:1217:2>
|   |   |-TextComment 0x561dff42be50 <line:1215:20, col:81> Text="              A pointer to the buffer in which firmware places"
|   |   |-TextComment 0x561dff42be70 <line:1216:1, col:56> Text="                                 the current memory map."
|   |   `-TextComment 0x561dff42be90 <line:1217:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42bef0 <col:3, line:1219:2> [in] implicitly Param="MapKey"
|   | `-ParagraphComment 0x561dff42bfd0 <line:1217:17, line:1219:2>
|   |   |-TextComment 0x561dff42bf50 <line:1217:17, col:76> Text="                 A pointer to the location in which firmware"
|   |   |-TextComment 0x561dff42bf70 <line:1218:1, col:76> Text="                                 returns the key for the current memory map."
|   |   `-TextComment 0x561dff42bf90 <line:1219:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42bff0 <col:3, line:1222:2> [in] implicitly Param="DescriptorSize"
|   | `-ParagraphComment 0x561dff42c0f0 <line:1219:25, line:1222:2>
|   |   |-TextComment 0x561dff42c050 <line:1219:25, col:76> Text="         A pointer to the location in which firmware"
|   |   |-TextComment 0x561dff42c070 <line:1220:1, col:77> Text="                                 returns the size, in bytes, of an individual"
|   |   |-TextComment 0x561dff42c090 <line:1221:1, col:55> Text="                                 EFI_MEMORY_DESCRIPTOR."
|   |   `-TextComment 0x561dff42c0b0 <line:1222:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42c110 <col:3, line:1224:55> [in] implicitly Param="DescriptorVersion"
|   | `-ParagraphComment 0x561dff42c200 <line:1222:28, line:1224:55>
|   |   |-TextComment 0x561dff42c180 <line:1222:28, col:76> Text="      A pointer to the location in which firmware"
|   |   |-TextComment 0x561dff42c1a0 <line:1223:1, col:79> Text="                                 returns the version number associated with the"
|   |   `-TextComment 0x561dff42c1c0 <line:1224:1, col:55> Text="                                 EFI_MEMORY_DESCRIPTOR."
|   |-ParagraphComment 0x561dff42c250 <line:1226:1, col:2>
|   | `-TextComment 0x561dff42c220 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42c270 <col:3, line:1228:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff42c340 <line:1226:22, line:1228:2>
|   |   |-TextComment 0x561dff42c2c0 <line:1226:22, col:77> Text="            The memory map was returned in the MemoryMap"
|   |   |-TextComment 0x561dff42c2e0 <line:1227:1, col:40> Text="                                 buffer."
|   |   `-TextComment 0x561dff42c300 <line:1228:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42c360 <col:3, line:1231:2> Name="retval" Arg[0]="EFI_BUFFER_TOO_SMALL"
|   | `-ParagraphComment 0x561dff42c460 <line:1228:31, line:1231:2>
|   |   |-TextComment 0x561dff42c3c0 <line:1228:31, col:80> Text="   The MemoryMap buffer was too small. The current"
|   |   |-TextComment 0x561dff42c3e0 <line:1229:1, col:77> Text="                                 buffer size needed to hold the memory map is"
|   |   |-TextComment 0x561dff42c400 <line:1230:1, col:59> Text="                                 returned in MemoryMapSize."
|   |   `-TextComment 0x561dff42c420 <line:1231:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff42c480 <col:3, col:76> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|     `-ParagraphComment 0x561dff42c530 <col:32, col:76>
|       `-TextComment 0x561dff42c500 <col:32, col:76> Text="  One of the parameters has an invalid value."
|-VarDecl 0x561dff40aa60 <line:1257:1, line:1258:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff42cc10 <line:1245:1, line:1254:61>
|   |-ParagraphComment 0x561dff42c650 <line:1245:1, col:37>
|   | `-TextComment 0x561dff42c620 <col:1, col:37> Text="  Allocate pool of a particular type."
|   |-ParagraphComment 0x561dff42c6a0 <line:1247:1, col:2>
|   | `-TextComment 0x561dff42c670 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42c6c0 <col:3, line:1248:2> [in] implicitly Param="PoolType"
|   | `-ParagraphComment 0x561dff42c770 <line:1247:19, line:1248:2>
|   |   |-TextComment 0x561dff42c720 <line:1247:19, col:57> Text="               Type of pool to allocate"
|   |   `-TextComment 0x561dff42c740 <line:1248:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42c790 <col:3, line:1249:2> [in] implicitly Param="Size"
|   | `-ParagraphComment 0x561dff42c840 <line:1248:15, line:1249:2>
|   |   |-TextComment 0x561dff42c7f0 <line:1248:15, col:63> Text="                   The amount of pool to allocate"
|   |   `-TextComment 0x561dff42c810 <line:1249:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42c860 <col:3, line:1250:37> [in] implicitly Param="Buffer"
|   | `-ParagraphComment 0x561dff42c910 <line:1249:17, line:1250:37>
|   |   |-TextComment 0x561dff42c8c0 <line:1249:17, col:81> Text="                 The address to return a pointer to the allocated"
|   |   `-TextComment 0x561dff42c8e0 <line:1250:1, col:37> Text="                                 pool"
|   |-ParagraphComment 0x561dff42c960 <line:1252:1, col:2>
|   | `-TextComment 0x561dff42c930 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42c980 <col:3, line:1253:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff42ca30 <line:1252:32, line:1253:2>
|   |   |-TextComment 0x561dff42c9e0 <line:1252:32, col:69> Text="  PoolType not valid or Buffer is NULL"
|   |   `-TextComment 0x561dff42ca00 <line:1253:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42ca50 <col:3, line:1254:2> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|   | `-ParagraphComment 0x561dff42cb00 <line:1253:31, line:1254:2>
|   |   |-TextComment 0x561dff42cab0 <line:1253:31, col:81> Text="   Size exceeds max pool size or allocation failed."
|   |   `-TextComment 0x561dff42cad0 <line:1254:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff42cb20 <col:3, col:61> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff42cba0 <col:22, col:61>
|       `-TextComment 0x561dff42cb70 <col:22, col:61> Text="            Pool successfully allocated."
|-VarDecl 0x561dff40ab10 <line:1278:1, line:1279:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff42d270 <line:1266:1, line:1275:61>
|   |-ParagraphComment 0x561dff42ccb0 <line:1266:1, col:37>
|   | `-TextComment 0x561dff42cc80 <col:1, col:37> Text="  Allocate pool of a particular type."
|   |-ParagraphComment 0x561dff42cd00 <line:1268:1, col:2>
|   | `-TextComment 0x561dff42ccd0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42cd20 <col:3, line:1269:2> [in] implicitly Param="PoolType"
|   | `-ParagraphComment 0x561dff42cdd0 <line:1268:19, line:1269:2>
|   |   |-TextComment 0x561dff42cd80 <line:1268:19, col:57> Text="               Type of pool to allocate"
|   |   `-TextComment 0x561dff42cda0 <line:1269:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42cdf0 <col:3, line:1270:2> [in] implicitly Param="Size"
|   | `-ParagraphComment 0x561dff42cea0 <line:1269:15, line:1270:2>
|   |   |-TextComment 0x561dff42ce50 <line:1269:15, col:63> Text="                   The amount of pool to allocate"
|   |   `-TextComment 0x561dff42ce70 <line:1270:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42cec0 <col:3, line:1271:37> [in] implicitly Param="Buffer"
|   | `-ParagraphComment 0x561dff42cf70 <line:1270:17, line:1271:37>
|   |   |-TextComment 0x561dff42cf20 <line:1270:17, col:81> Text="                 The address to return a pointer to the allocated"
|   |   `-TextComment 0x561dff42cf40 <line:1271:1, col:37> Text="                                 pool"
|   |-ParagraphComment 0x561dff42cfc0 <line:1273:1, col:2>
|   | `-TextComment 0x561dff42cf90 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42cfe0 <col:3, line:1274:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff42d090 <line:1273:32, line:1274:2>
|   |   |-TextComment 0x561dff42d040 <line:1273:32, col:69> Text="  PoolType not valid or Buffer is NULL"
|   |   `-TextComment 0x561dff42d060 <line:1274:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42d0b0 <col:3, line:1275:2> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|   | `-ParagraphComment 0x561dff42d160 <line:1274:31, line:1275:2>
|   |   |-TextComment 0x561dff42d110 <line:1274:31, col:81> Text="   Size exceeds max pool size or allocation failed."
|   |   `-TextComment 0x561dff42d130 <line:1275:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff42d180 <col:3, col:61> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff42d200 <col:22, col:61>
|       `-TextComment 0x561dff42d1d0 <col:22, col:61> Text="            Pool successfully allocated."
|-VarDecl 0x561dff40abc0 <line:1295:1, line:1296:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff42d630 <line:1287:1, line:1292:57>
|   |-ParagraphComment 0x561dff42d310 <line:1287:1, col:13>
|   | `-TextComment 0x561dff42d2e0 <col:1, col:13> Text="  Frees pool."
|   |-ParagraphComment 0x561dff42d360 <line:1289:1, col:2>
|   | `-TextComment 0x561dff42d330 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42d380 <col:3, col:65> [in] implicitly Param="Buffer"
|   | `-ParagraphComment 0x561dff42d410 <col:17, col:65>
|   |   `-TextComment 0x561dff42d3e0 <col:17, col:65> Text="                 The allocated pool entry to free"
|   |-ParagraphComment 0x561dff42d460 <line:1291:1, col:2>
|   | `-TextComment 0x561dff42d430 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42d480 <col:3, line:1292:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff42d540 <line:1291:32, line:1292:2>
|   |   |-TextComment 0x561dff42d4f0 <line:1291:32, col:61> Text="  Buffer is not a valid value."
|   |   `-TextComment 0x561dff42d510 <line:1292:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff42d560 <col:3, col:57> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff42d5e0 <col:22, col:57>
|       `-TextComment 0x561dff42d5b0 <col:22, col:57> Text="            Pool successfully freed."
|-VarDecl 0x561dff40ac70 <line:1311:1, line:1312:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff42dac0 <line:1302:1, line:1308:57>
|   |-ParagraphComment 0x561dff42d6d0 <line:1302:1, col:13>
|   | `-TextComment 0x561dff42d6a0 <col:1, col:13> Text="  Frees pool."
|   |-ParagraphComment 0x561dff42d720 <line:1304:1, col:2>
|   | `-TextComment 0x561dff42d6f0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42d740 <col:3, line:1305:2> [in] implicitly Param="Buffer"
|   | `-ParagraphComment 0x561dff42d7f0 <line:1304:17, line:1305:2>
|   |   |-TextComment 0x561dff42d7a0 <line:1304:17, col:65> Text="                 The allocated pool entry to free"
|   |   `-TextComment 0x561dff42d7c0 <line:1305:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42d810 <col:3, col:53> [in] implicitly Param="PoolType"
|   | `-ParagraphComment 0x561dff42d8a0 <col:19, col:53>
|   |   `-TextComment 0x561dff42d870 <col:19, col:53> Text="               Pointer to pool type"
|   |-ParagraphComment 0x561dff42d8f0 <line:1307:1, col:2>
|   | `-TextComment 0x561dff42d8c0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42d910 <col:3, line:1308:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff42d9c0 <line:1307:32, line:1308:2>
|   |   |-TextComment 0x561dff42d970 <line:1307:32, col:61> Text="  Buffer is not a valid value."
|   |   `-TextComment 0x561dff42d990 <line:1308:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff42d9e0 <col:3, col:57> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff42da60 <col:22, col:57>
|       `-TextComment 0x561dff42da30 <col:22, col:57> Text="            Pool successfully freed."
|-VarDecl 0x561dff40ad20 <line:1352:1, line:1353:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff42eab0 <line:1319:1, line:1349:97>
|   |-ParagraphComment 0x561dff42db60 <line:1319:1, col:67>
|   | `-TextComment 0x561dff42db30 <col:1, col:67> Text="  Loads an EFI image into memory and returns a handle to the image."
|   |-ParagraphComment 0x561dff42dbb0 <line:1321:1, col:2>
|   | `-TextComment 0x561dff42db80 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42dbd0 <col:3, line:1325:2> [in] implicitly Param="BootPolicy"
|   | `-ParagraphComment 0x561dff42dd00 <line:1321:21, line:1325:2>
|   |   |-TextComment 0x561dff42dc30 <line:1321:21, col:80> Text="              If TRUE, indicates that the request originates"
|   |   |-TextComment 0x561dff42dc50 <line:1322:1, col:74> Text="                                  from the boot manager, and that the boot"
|   |   |-TextComment 0x561dff42dc70 <line:1323:1, col:77> Text="                                  manager is attempting to load FilePath as a"
|   |   |-TextComment 0x561dff42dc90 <line:1324:1, col:49> Text="                                  boot selection."
|   |   `-TextComment 0x561dff42dcb0 <line:1325:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42dd20 <col:3, line:1326:2> [in] implicitly Param="ParentImageHandle"
|   | `-ParagraphComment 0x561dff42dde0 <line:1325:28, line:1326:2>
|   |   |-TextComment 0x561dff42dd90 <line:1325:28, col:60> Text="       The caller's image handle."
|   |   `-TextComment 0x561dff42ddb0 <line:1326:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42de00 <col:3, line:1328:2> [in] implicitly Param="FilePath"
|   | `-ParagraphComment 0x561dff42dee0 <line:1326:19, line:1328:2>
|   |   |-TextComment 0x561dff42de60 <line:1326:19, col:80> Text="                The specific file path from which the image is"
|   |   |-TextComment 0x561dff42de80 <line:1327:1, col:41> Text="                                  loaded."
|   |   `-TextComment 0x561dff42dea0 <line:1328:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42df00 <col:3, line:1330:2> [in] implicitly Param="SourceBuffer"
|   | `-ParagraphComment 0x561dff42dfe0 <line:1328:23, line:1330:2>
|   |   |-TextComment 0x561dff42df60 <line:1328:23, col:79> Text="            If not NULL, a pointer to the memory location"
|   |   |-TextComment 0x561dff42df80 <line:1329:1, col:78> Text="                                  containing a copy of the image to be loaded."
|   |   `-TextComment 0x561dff42dfa0 <line:1330:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42e000 <col:3, line:1331:2> [in] implicitly Param="SourceSize"
|   | `-ParagraphComment 0x561dff42e0b0 <line:1330:21, line:1331:2>
|   |   |-TextComment 0x561dff42e060 <line:1330:21, col:68> Text="              The size in bytes of SourceBuffer."
|   |   `-TextComment 0x561dff42e080 <line:1331:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42e0d0 <col:3, line:1332:80> [in] implicitly Param="ImageHandle"
|   | `-ParagraphComment 0x561dff42e180 <line:1331:22, line:1332:80>
|   |   |-TextComment 0x561dff42e130 <line:1331:22, col:78> Text="             Pointer to the returned image handle that is"
|   |   `-TextComment 0x561dff42e150 <line:1332:1, col:80> Text="                                  created when the image is successfully loaded."
|   |-ParagraphComment 0x561dff42e1d0 <line:1334:1, col:2>
|   | `-TextComment 0x561dff42e1a0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42e1f0 <col:3, line:1335:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff42e290 <line:1334:22, line:1335:2>
|   |   |-TextComment 0x561dff42e240 <line:1334:22, col:67> Text="             The image was loaded into memory."
|   |   `-TextComment 0x561dff42e260 <line:1335:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42e2b0 <col:3, line:1336:2> Name="retval" Arg[0]="EFI_NOT_FOUND"
|   | `-ParagraphComment 0x561dff42e350 <line:1335:24, line:1336:2>
|   |   |-TextComment 0x561dff42e300 <line:1335:24, col:61> Text="           The FilePath was not found."
|   |   `-TextComment 0x561dff42e320 <line:1336:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42e370 <col:3, line:1337:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff42e420 <line:1336:32, line:1337:2>
|   |   |-TextComment 0x561dff42e3d0 <line:1336:32, col:77> Text="   One of the parameters has an invalid value."
|   |   `-TextComment 0x561dff42e3f0 <line:1337:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42e440 <col:3, line:1340:2> Name="retval" Arg[0]="EFI_UNSUPPORTED"
|   | `-ParagraphComment 0x561dff42e540 <line:1337:26, line:1340:2>
|   |   |-TextComment 0x561dff42e490 <line:1337:26, col:80> Text="         The image type is not supported, or the device"
|   |   |-TextComment 0x561dff42e4b0 <line:1338:1, col:76> Text="                                  path cannot be parsed to locate the proper"
|   |   |-TextComment 0x561dff42e4d0 <line:1339:1, col:64> Text="                                  protocol for loading the file."
|   |   `-TextComment 0x561dff42e500 <line:1340:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42e560 <col:3, line:1342:2> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|   | `-ParagraphComment 0x561dff42e640 <line:1340:31, line:1342:2>
|   |   |-TextComment 0x561dff42e5c0 <line:1340:31, col:74> Text="    Image was not loaded due to insufficient"
|   |   |-TextComment 0x561dff42e5e0 <line:1341:1, col:44> Text="                                  resources."
|   |   `-TextComment 0x561dff42e600 <line:1342:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42e660 <col:3, line:1344:2> Name="retval" Arg[0]="EFI_LOAD_ERROR"
|   | `-ParagraphComment 0x561dff42e730 <line:1342:25, line:1344:2>
|   |   |-TextComment 0x561dff42e6b0 <line:1342:25, col:98> Text="          Image was not loaded because the image format was corrupt or not"
|   |   |-TextComment 0x561dff42e6d0 <line:1343:1, col:45> Text="                                  understood."
|   |   `-TextComment 0x561dff42e6f0 <line:1344:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42e750 <col:3, line:1345:2> Name="retval" Arg[0]="EFI_DEVICE_ERROR"
|   | `-ParagraphComment 0x561dff42e800 <line:1344:27, line:1345:2>
|   |   |-TextComment 0x561dff42e7b0 <line:1344:27, col:96> Text="        Image was not loaded because the device returned a read error."
|   |   `-TextComment 0x561dff42e7d0 <line:1345:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42e820 <col:3, line:1347:2> Name="retval" Arg[0]="EFI_ACCESS_DENIED"
|   | `-ParagraphComment 0x561dff42e900 <line:1345:28, line:1347:2>
|   |   |-TextComment 0x561dff42e880 <line:1345:28, col:96> Text="       Image was not loaded because the platform policy prohibits the"
|   |   |-TextComment 0x561dff42e8a0 <line:1346:1, col:92> Text="                                  image from being loaded. NULL is returned in *ImageHandle."
|   |   `-TextComment 0x561dff42e8c0 <line:1347:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff42e920 <col:3, line:1349:97> Name="retval" Arg[0]="EFI_SECURITY_VIOLATION"
|     `-ParagraphComment 0x561dff42ea00 <line:1347:33, line:1349:97>
|       |-TextComment 0x561dff42e980 <line:1347:33, col:88> Text="  Image was loaded and an ImageHandle was created with a"
|       |-TextComment 0x561dff42e9a0 <line:1348:1, col:87> Text="                                  valid EFI_LOADED_IMAGE_PROTOCOL. However, the current"
|       `-TextComment 0x561dff42e9c0 <line:1349:1, col:97> Text="                                  platform policy specifies that the image should not be started."
|-VarDecl 0x561dff40add0 <line:1375:1, line:1376:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff42ef80 <line:1364:1, line:1372:74>
|   |-ParagraphComment 0x561dff42eb50 <line:1364:1, col:19>
|   | `-TextComment 0x561dff42eb20 <col:1, col:19> Text="  Unloads an image."
|   |-ParagraphComment 0x561dff42eba0 <line:1366:1, col:2>
|   | `-TextComment 0x561dff42eb70 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42ebc0 <col:3, line:1367:43> [in] implicitly Param="ImageHandle"
|   | `-ParagraphComment 0x561dff42ec70 <line:1366:22, line:1367:43>
|   |   |-TextComment 0x561dff42ec20 <line:1366:22, col:72> Text="             Handle that identifies the image to be"
|   |   `-TextComment 0x561dff42ec40 <line:1367:1, col:43> Text="                                  unloaded."
|   |-ParagraphComment 0x561dff42ecc0 <line:1369:1, col:2>
|   | `-TextComment 0x561dff42ec90 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42ece0 <col:3, line:1370:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff42ed80 <line:1369:22, line:1370:2>
|   |   |-TextComment 0x561dff42ed30 <line:1369:22, col:62> Text="             The image has been unloaded."
|   |   `-TextComment 0x561dff42ed50 <line:1370:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42eda0 <col:3, line:1372:2> Name="retval" Arg[0]="EFI_UNSUPPORTED"
|   | `-ParagraphComment 0x561dff42ee70 <line:1370:26, line:1372:2>
|   |   |-TextComment 0x561dff42edf0 <line:1370:26, col:82> Text="         The image has been started, and does not support"
|   |   |-TextComment 0x561dff42ee10 <line:1371:1, col:41> Text="                                  unload."
|   |   `-TextComment 0x561dff42ee30 <line:1372:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff42ee90 <col:3, col:74> Name="retval" Arg[0]="EFI_INVALID_PARAMPETER"
|     `-ParagraphComment 0x561dff42ef20 <col:33, col:74>
|       `-TextComment 0x561dff42eef0 <col:33, col:74> Text="  ImageHandle is not a valid image handle."
|-VarDecl 0x561dff40ae80 <line:1400:1, line:1401:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff42f780 <line:1382:1, line:1397:46>
|   |-ParagraphComment 0x561dff42f020 <line:1382:1, col:51>
|   | `-TextComment 0x561dff42eff0 <col:1, col:51> Text="  Transfer control to a loaded image's entry point."
|   |-ParagraphComment 0x561dff42f070 <line:1384:1, col:2>
|   | `-TextComment 0x561dff42f040 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42f090 <col:3, line:1385:2> [in] implicitly Param="ImageHandle"
|   | `-ParagraphComment 0x561dff42f140 <line:1384:22, line:1385:2>
|   |   |-TextComment 0x561dff42f0f0 <line:1384:22, col:64> Text="             Handle of image to be started."
|   |   `-TextComment 0x561dff42f110 <line:1385:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42f160 <col:3, line:1386:2> [in] implicitly Param="ExitDataSize"
|   | `-ParagraphComment 0x561dff42f210 <line:1385:23, line:1386:2>
|   |   |-TextComment 0x561dff42f1c0 <line:1385:23, col:65> Text="            Pointer of the size to ExitData"
|   |   `-TextComment 0x561dff42f1e0 <line:1386:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42f230 <col:3, line:1391:47> [in] implicitly Param="ExitData"
|   | `-ParagraphComment 0x561dff42f380 <line:1386:19, line:1391:47>
|   |   |-TextComment 0x561dff42f290 <line:1386:19, col:76> Text="                Pointer to a pointer to a data buffer that"
|   |   |-TextComment 0x561dff42f2b0 <line:1387:1, col:68> Text="                                  includes a Null-terminated string,"
|   |   |-TextComment 0x561dff42f2d0 <line:1388:1, col:80> Text="                                  optionally followed by additional binary data."
|   |   |-TextComment 0x561dff42f2f0 <line:1389:1, col:81> Text="                                  The string is a description that the caller may"
|   |   |-TextComment 0x561dff42f310 <line:1390:1, col:76> Text="                                  use to further indicate the reason for the"
|   |   `-TextComment 0x561dff42f330 <line:1391:1, col:47> Text="                                  image's exit."
|   |-ParagraphComment 0x561dff42f3d0 <line:1393:1, col:2>
|   | `-TextComment 0x561dff42f3a0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42f3f0 <col:3, line:1394:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff42f4a0 <line:1393:32, line:1394:2>
|   |   |-TextComment 0x561dff42f450 <line:1393:32, col:51> Text="   Invalid parameter"
|   |   `-TextComment 0x561dff42f470 <line:1394:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42f4c0 <col:3, line:1395:2> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|   | `-ParagraphComment 0x561dff42f580 <line:1394:31, line:1395:2>
|   |   |-TextComment 0x561dff42f530 <line:1394:31, col:62> Text="    No enough buffer to allocate"
|   |   `-TextComment 0x561dff42f550 <line:1395:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42f5a0 <col:3, line:1396:2> Name="retval" Arg[0]="EFI_SECURITY_VIOLATION"
|   | `-ParagraphComment 0x561dff42f650 <line:1395:33, line:1396:2>
|   |   |-TextComment 0x561dff42f600 <line:1395:33, col:109> Text="  The current platform policy specifies that the image should not be started."
|   |   `-TextComment 0x561dff42f620 <line:1396:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff42f670 <col:3, line:1397:46> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff42f710 <line:1396:22, line:1397:46>
|       |-TextComment 0x561dff42f6c0 <line:1396:22, col:78> Text="             Successfully transfer control to the image's"
|       `-TextComment 0x561dff42f6e0 <line:1397:1, col:46> Text="                                  entry point."
|-VarDecl 0x561dff40af30 <line:1431:1, line:1432:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff4300f0 <line:1409:1, line:1428:57>
|   |-ParagraphComment 0x561dff42f820 <line:1409:1, col:81>
|   | `-TextComment 0x561dff42f7f0 <col:1, col:81> Text="  Terminates the currently loaded EFI image and returns control to boot services."
|   |-ParagraphComment 0x561dff42f870 <line:1411:1, col:2>
|   | `-TextComment 0x561dff42f840 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42f890 <col:3, line:1413:2> [in] implicitly Param="ImageHandle"
|   | `-ParagraphComment 0x561dff42f970 <line:1411:22, line:1413:2>
|   |   |-TextComment 0x561dff42f8f0 <line:1411:22, col:72> Text="             Handle that identifies the image. This"
|   |   |-TextComment 0x561dff42f910 <line:1412:1, col:76> Text="                                  parameter is passed to the image on entry."
|   |   `-TextComment 0x561dff42f930 <line:1413:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42f990 <col:3, line:1414:2> [in] implicitly Param="Status"
|   | `-ParagraphComment 0x561dff42fa40 <line:1413:17, line:1414:2>
|   |   |-TextComment 0x561dff42f9f0 <line:1413:17, col:56> Text="                  The image's exit code."
|   |   `-TextComment 0x561dff42fa10 <line:1414:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42fa60 <col:3, line:1416:2> [in] implicitly Param="ExitDataSize"
|   | `-ParagraphComment 0x561dff42fb40 <line:1414:23, line:1416:2>
|   |   |-TextComment 0x561dff42fac0 <line:1414:23, col:77> Text="            The size, in bytes, of ExitData. Ignored if"
|   |   |-TextComment 0x561dff42fae0 <line:1415:1, col:60> Text="                                  ExitStatus is EFI_SUCCESS."
|   |   `-TextComment 0x561dff42fb00 <line:1416:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff42fb60 <col:3, line:1421:39> [in] implicitly Param="ExitData"
|   | `-ParagraphComment 0x561dff42fcb0 <line:1416:19, line:1421:39>
|   |   |-TextComment 0x561dff42fbc0 <line:1416:19, col:74> Text="                Pointer to a data buffer that includes a"
|   |   |-TextComment 0x561dff42fbe0 <line:1417:1, col:76> Text="                                  Null-terminated Unicode string, optionally"
|   |   |-TextComment 0x561dff42fc00 <line:1418:1, col:80> Text="                                  followed by additional binary data. The string"
|   |   |-TextComment 0x561dff42fc20 <line:1419:1, col:77> Text="                                  is a description that the caller may use to"
|   |   |-TextComment 0x561dff42fc40 <line:1420:1, col:77> Text="                                  further indicate the reason for the image's"
|   |   `-TextComment 0x561dff42fc60 <line:1421:1, col:39> Text="                                  exit."
|   |-ParagraphComment 0x561dff42fd00 <line:1423:1, col:2>
|   | `-TextComment 0x561dff42fcd0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42fd20 <col:3, line:1425:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff42fe00 <line:1423:32, line:1425:2>
|   |   |-TextComment 0x561dff42fd80 <line:1423:32, col:75> Text="   Image handle is NULL or it is not current"
|   |   |-TextComment 0x561dff42fda0 <line:1424:1, col:40> Text="                                  image."
|   |   `-TextComment 0x561dff42fdc0 <line:1425:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42fe20 <col:3, line:1427:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff42fef0 <line:1425:22, line:1427:2>
|   |   |-TextComment 0x561dff42fe70 <line:1425:22, col:78> Text="             Successfully terminates the currently loaded"
|   |   |-TextComment 0x561dff42fe90 <line:1426:1, col:44> Text="                                  EFI image."
|   |   `-TextComment 0x561dff42feb0 <line:1427:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff42ff10 <col:3, line:1428:2> Name="retval" Arg[0]="EFI_ACCESS_DENIED"
|   | `-ParagraphComment 0x561dff42ffc0 <line:1427:28, line:1428:2>
|   |   |-TextComment 0x561dff42ff70 <line:1427:28, col:59> Text="       Should never reach there."
|   |   `-TextComment 0x561dff42ff90 <line:1428:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff42ffe0 <col:3, col:57> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|     `-ParagraphComment 0x561dff430070 <col:31, col:57>
|       `-TextComment 0x561dff430040 <col:31, col:57> Text="    Could not allocate pool"
|-VarDecl 0x561dff40afe0 <line:1458:1, line:1459:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff4309a0 <line:1441:1, line:1455:65>
|   |-ParagraphComment 0x561dff430190 <line:1441:1, col:19>
|   | `-TextComment 0x561dff430160 <col:1, col:19> Text="  Creates an event."
|   |-ParagraphComment 0x561dff4301e0 <line:1443:1, col:2>
|   | `-TextComment 0x561dff4301b0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff430200 <col:3, line:1445:2> [in] implicitly Param="Type"
|   | `-ParagraphComment 0x561dff4302e0 <line:1443:15, line:1445:2>
|   |   |-TextComment 0x561dff430260 <line:1443:15, col:77> Text="                   The type of event to create and its mode and"
|   |   |-TextComment 0x561dff430280 <line:1444:1, col:43> Text="                                 attributes"
|   |   `-TextComment 0x561dff4302a0 <line:1445:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff430300 <col:3, line:1446:2> [in] implicitly Param="NotifyTpl"
|   | `-ParagraphComment 0x561dff4303b0 <line:1445:20, line:1446:2>
|   |   |-TextComment 0x561dff430360 <line:1445:20, col:79> Text="              The task priority level of event notifications"
|   |   `-TextComment 0x561dff430380 <line:1446:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4303d0 <col:3, line:1447:2> [in] implicitly Param="NotifyFunction"
|   | `-ParagraphComment 0x561dff430480 <line:1446:25, line:1447:2>
|   |   |-TextComment 0x561dff430430 <line:1446:25, col:76> Text="         Pointer to the events notification function"
|   |   `-TextComment 0x561dff430450 <line:1447:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4304a0 <col:3, line:1450:2> [in] implicitly Param="NotifyContext"
|   | `-ParagraphComment 0x561dff4305c0 <line:1447:24, line:1450:2>
|   |   |-TextComment 0x561dff430520 <line:1447:24, col:79> Text="          Pointer to the notification functions context;"
|   |   |-TextComment 0x561dff430540 <line:1448:1, col:74> Text="                                 corresponds to parameter "Context" in the"
|   |   |-TextComment 0x561dff430560 <line:1449:1, col:54> Text="                                 notification function"
|   |   `-TextComment 0x561dff430580 <line:1450:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4305e0 <col:3, line:1451:62> [in] implicitly Param="Event"
|   | `-ParagraphComment 0x561dff430690 <line:1450:16, line:1451:62>
|   |   |-TextComment 0x561dff430640 <line:1450:16, col:79> Text="                  Pointer to the newly created event if the call"
|   |   `-TextComment 0x561dff430660 <line:1451:1, col:62> Text="                                 succeeds; undefined otherwise"
|   |-ParagraphComment 0x561dff4306e0 <line:1453:1, col:2>
|   | `-TextComment 0x561dff4306b0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff430700 <col:3, line:1454:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff4307a0 <line:1453:22, line:1454:2>
|   |   |-TextComment 0x561dff430750 <line:1453:22, col:64> Text="            The event structure was created"
|   |   `-TextComment 0x561dff430770 <line:1454:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4307c0 <col:3, line:1455:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff430870 <line:1454:32, line:1455:2>
|   |   |-TextComment 0x561dff430820 <line:1454:32, col:75> Text="  One of the parameters has an invalid value"
|   |   `-TextComment 0x561dff430840 <line:1455:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff430890 <col:3, col:65> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|     `-ParagraphComment 0x561dff430920 <col:31, col:65>
|       `-TextComment 0x561dff4308f0 <col:31, col:65> Text="   The event could not be allocated"
|-VarDecl 0x561dff40b090 <line:1488:1, line:1489:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff431330 <line:1469:1, line:1485:65>
|   |-ParagraphComment 0x561dff430a40 <line:1469:1, col:30>
|   | `-TextComment 0x561dff430a10 <col:1, col:30> Text="  Creates an event in a group."
|   |-ParagraphComment 0x561dff430a90 <line:1471:1, col:2>
|   | `-TextComment 0x561dff430a60 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff430ab0 <col:3, line:1473:2> [in] implicitly Param="Type"
|   | `-ParagraphComment 0x561dff430b90 <line:1471:15, line:1473:2>
|   |   |-TextComment 0x561dff430b10 <line:1471:15, col:77> Text="                   The type of event to create and its mode and"
|   |   |-TextComment 0x561dff430b30 <line:1472:1, col:43> Text="                                 attributes"
|   |   `-TextComment 0x561dff430b50 <line:1473:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff430bb0 <col:3, line:1474:2> [in] implicitly Param="NotifyTpl"
|   | `-ParagraphComment 0x561dff430c60 <line:1473:20, line:1474:2>
|   |   |-TextComment 0x561dff430c10 <line:1473:20, col:79> Text="              The task priority level of event notifications"
|   |   `-TextComment 0x561dff430c30 <line:1474:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff430c80 <col:3, line:1475:2> [in] implicitly Param="NotifyFunction"
|   | `-ParagraphComment 0x561dff430d30 <line:1474:25, line:1475:2>
|   |   |-TextComment 0x561dff430ce0 <line:1474:25, col:76> Text="         Pointer to the events notification function"
|   |   `-TextComment 0x561dff430d00 <line:1475:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff430d50 <col:3, line:1478:2> [in] implicitly Param="NotifyContext"
|   | `-ParagraphComment 0x561dff430e50 <line:1475:24, line:1478:2>
|   |   |-TextComment 0x561dff430db0 <line:1475:24, col:79> Text="          Pointer to the notification functions context;"
|   |   |-TextComment 0x561dff430dd0 <line:1476:1, col:74> Text="                                 corresponds to parameter "Context" in the"
|   |   |-TextComment 0x561dff430df0 <line:1477:1, col:54> Text="                                 notification function"
|   |   `-TextComment 0x561dff430e10 <line:1478:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff430e70 <col:3, line:1480:2> [in] implicitly Param="EventGroup"
|   | `-ParagraphComment 0x561dff430f50 <line:1478:21, line:1480:2>
|   |   |-TextComment 0x561dff430ed0 <line:1478:21, col:76> Text="             GUID for EventGroup if NULL act the same as"
|   |   |-TextComment 0x561dff430ef0 <line:1479:1, col:52> Text="                                 gBS->CreateEvent()."
|   |   `-TextComment 0x561dff430f10 <line:1480:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff430f70 <col:3, line:1481:62> [in] implicitly Param="Event"
|   | `-ParagraphComment 0x561dff431020 <line:1480:16, line:1481:62>
|   |   |-TextComment 0x561dff430fd0 <line:1480:16, col:79> Text="                  Pointer to the newly created event if the call"
|   |   `-TextComment 0x561dff430ff0 <line:1481:1, col:62> Text="                                 succeeds; undefined otherwise"
|   |-ParagraphComment 0x561dff431070 <line:1483:1, col:2>
|   | `-TextComment 0x561dff431040 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff431090 <col:3, line:1484:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff431130 <line:1483:22, line:1484:2>
|   |   |-TextComment 0x561dff4310e0 <line:1483:22, col:64> Text="            The event structure was created"
|   |   `-TextComment 0x561dff431100 <line:1484:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff431150 <col:3, line:1485:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff431200 <line:1484:32, line:1485:2>
|   |   |-TextComment 0x561dff4311b0 <line:1484:32, col:75> Text="  One of the parameters has an invalid value"
|   |   `-TextComment 0x561dff4311d0 <line:1485:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff431220 <col:3, col:65> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|     `-ParagraphComment 0x561dff4312b0 <col:31, col:65>
|       `-TextComment 0x561dff431280 <col:31, col:65> Text="   The event could not be allocated"
|-VarDecl 0x561dff40b140 <line:1519:1, line:1520:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff431cd0 <line:1500:1, line:1516:65>
|   |-ParagraphComment 0x561dff4313d0 <line:1500:1, col:43>
|   | `-TextComment 0x561dff4313a0 <col:1, col:43> Text="  Creates a general-purpose event structure"
|   |-ParagraphComment 0x561dff431420 <line:1502:1, col:2>
|   | `-TextComment 0x561dff4313f0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff431440 <col:3, line:1504:2> [in] implicitly Param="Type"
|   | `-ParagraphComment 0x561dff431530 <line:1502:15, line:1504:2>
|   |   |-TextComment 0x561dff4314a0 <line:1502:15, col:77> Text="                   The type of event to create and its mode and"
|   |   |-TextComment 0x561dff4314c0 <line:1503:1, col:43> Text="                                 attributes"
|   |   `-TextComment 0x561dff4314e0 <line:1504:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff431550 <col:3, line:1505:2> [in] implicitly Param="NotifyTpl"
|   | `-ParagraphComment 0x561dff431600 <line:1504:20, line:1505:2>
|   |   |-TextComment 0x561dff4315b0 <line:1504:20, col:79> Text="              The task priority level of event notifications"
|   |   `-TextComment 0x561dff4315d0 <line:1505:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff431620 <col:3, line:1506:2> [in] implicitly Param="NotifyFunction"
|   | `-ParagraphComment 0x561dff4316d0 <line:1505:25, line:1506:2>
|   |   |-TextComment 0x561dff431680 <line:1505:25, col:76> Text="         Pointer to the events notification function"
|   |   `-TextComment 0x561dff4316a0 <line:1506:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4316f0 <col:3, line:1509:2> [in] implicitly Param="NotifyContext"
|   | `-ParagraphComment 0x561dff4317f0 <line:1506:24, line:1509:2>
|   |   |-TextComment 0x561dff431750 <line:1506:24, col:79> Text="          Pointer to the notification functions context;"
|   |   |-TextComment 0x561dff431770 <line:1507:1, col:74> Text="                                 corresponds to parameter "Context" in the"
|   |   |-TextComment 0x561dff431790 <line:1508:1, col:54> Text="                                 notification function"
|   |   `-TextComment 0x561dff4317b0 <line:1509:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff431810 <col:3, line:1511:2> [in] implicitly Param="EventGroup"
|   | `-ParagraphComment 0x561dff4318f0 <line:1509:21, line:1511:2>
|   |   |-TextComment 0x561dff431870 <line:1509:21, col:76> Text="             GUID for EventGroup if NULL act the same as"
|   |   |-TextComment 0x561dff431890 <line:1510:1, col:52> Text="                                 gBS->CreateEvent()."
|   |   `-TextComment 0x561dff4318b0 <line:1511:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff431910 <col:3, line:1512:62> [in] implicitly Param="Event"
|   | `-ParagraphComment 0x561dff4319c0 <line:1511:16, line:1512:62>
|   |   |-TextComment 0x561dff431970 <line:1511:16, col:79> Text="                  Pointer to the newly created event if the call"
|   |   `-TextComment 0x561dff431990 <line:1512:1, col:62> Text="                                 succeeds; undefined otherwise"
|   |-ParagraphComment 0x561dff431a10 <line:1514:1, col:2>
|   | `-TextComment 0x561dff4319e0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff431a30 <col:3, line:1515:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff431ad0 <line:1514:22, line:1515:2>
|   |   |-TextComment 0x561dff431a80 <line:1514:22, col:64> Text="            The event structure was created"
|   |   `-TextComment 0x561dff431aa0 <line:1515:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff431af0 <col:3, line:1516:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff431ba0 <line:1515:32, line:1516:2>
|   |   |-TextComment 0x561dff431b50 <line:1515:32, col:75> Text="  One of the parameters has an invalid value"
|   |   `-TextComment 0x561dff431b70 <line:1516:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff431bc0 <col:3, col:65> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|     `-ParagraphComment 0x561dff431c50 <col:31, col:65>
|       `-TextComment 0x561dff431c20 <col:31, col:65> Text="   The event could not be allocated"
|-VarDecl 0x561dff40b1f0 <line:1545:1, line:1546:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff4322e0 <line:1531:1, line:1542:59>
|   |-ParagraphComment 0x561dff431d70 <line:1531:1, col:64>
|   | `-TextComment 0x561dff431d40 <col:1, col:64> Text="  Sets the type of timer and the trigger time for a timer event."
|   |-ParagraphComment 0x561dff431dc0 <line:1533:1, col:2>
|   | `-TextComment 0x561dff431d90 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff431de0 <col:3, line:1535:2> [in] implicitly Param="UserEvent"
|   | `-ParagraphComment 0x561dff431ec0 <line:1533:20, line:1535:2>
|   |   |-TextComment 0x561dff431e40 <line:1533:20, col:78> Text="              The timer event that is to be signaled at the"
|   |   |-TextComment 0x561dff431e60 <line:1534:1, col:47> Text="                                 specified time"
|   |   `-TextComment 0x561dff431e80 <line:1535:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff431ee0 <col:3, line:1537:2> [in] implicitly Param="Type"
|   | `-ParagraphComment 0x561dff431fc0 <line:1535:15, line:1537:2>
|   |   |-TextComment 0x561dff431f40 <line:1535:15, col:70> Text="                   The type of time that is specified in"
|   |   |-TextComment 0x561dff431f60 <line:1536:1, col:44> Text="                                 TriggerTime"
|   |   `-TextComment 0x561dff431f80 <line:1537:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff431fe0 <col:3, line:1538:40> [in] implicitly Param="TriggerTime"
|   | `-ParagraphComment 0x561dff432090 <line:1537:22, line:1538:40>
|   |   |-TextComment 0x561dff432040 <line:1537:22, col:74> Text="            The number of 100ns units until the timer"
|   |   `-TextComment 0x561dff432060 <line:1538:1, col:40> Text="                                 expires"
|   |-ParagraphComment 0x561dff4320e0 <line:1540:1, col:2>
|   | `-TextComment 0x561dff4320b0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff432100 <col:3, line:1542:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff4321d0 <line:1540:22, line:1542:2>
|   |   |-TextComment 0x561dff432150 <line:1540:22, col:77> Text="            The event has been set to be signaled at the"
|   |   |-TextComment 0x561dff432170 <line:1541:1, col:47> Text="                                 requested time"
|   |   `-TextComment 0x561dff432190 <line:1542:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff4321f0 <col:3, col:59> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|     `-ParagraphComment 0x561dff432280 <col:32, col:59>
|       `-TextComment 0x561dff432250 <col:32, col:59> Text="  Event or Type is not valid"
|-VarDecl 0x561dff40b2a0 <line:1562:1, line:1563:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff4326a0 <line:1554:1, line:1559:56>
|   |-ParagraphComment 0x561dff432380 <line:1554:1, col:64>
|   | `-TextComment 0x561dff432350 <col:1, col:64> Text="  Signals the event.  Queues the event to be notified if needed."
|   |-ParagraphComment 0x561dff4323d0 <line:1556:1, col:2>
|   | `-TextComment 0x561dff4323a0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4323f0 <col:3, col:54> [in] implicitly Param="UserEvent"
|   | `-ParagraphComment 0x561dff432480 <col:20, col:54>
|   |   `-TextComment 0x561dff432450 <col:20, col:54> Text="              The event to signal ."
|   |-ParagraphComment 0x561dff4324d0 <line:1558:1, col:2>
|   | `-TextComment 0x561dff4324a0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4324f0 <col:3, line:1559:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff4325b0 <line:1558:32, line:1559:2>
|   |   |-TextComment 0x561dff432560 <line:1558:32, col:58> Text="  Parameters are not valid."
|   |   `-TextComment 0x561dff432580 <line:1559:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff4325d0 <col:3, col:56> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff432650 <col:22, col:56>
|       `-TextComment 0x561dff432620 <col:22, col:56> Text="            The event was signaled."
|-VarDecl 0x561dff40b350 <line:1582:1, line:1583:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff432d20 <line:1569:1, line:1579:71>
|   |-ParagraphComment 0x561dff432740 <line:1569:1, col:45>
|   | `-TextComment 0x561dff432710 <col:1, col:45> Text="  Stops execution until an event is signaled."
|   |-ParagraphComment 0x561dff432790 <line:1571:1, col:2>
|   | `-TextComment 0x561dff432760 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4327b0 <col:3, line:1572:2> [in] implicitly Param="NumberOfEvents"
|   | `-ParagraphComment 0x561dff432860 <line:1571:25, line:1572:2>
|   |   |-TextComment 0x561dff432810 <line:1571:25, col:77> Text="         The number of events in the UserEvents array"
|   |   `-TextComment 0x561dff432830 <line:1572:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff432880 <col:3, line:1573:2> [in] implicitly Param="UserEvents"
|   | `-ParagraphComment 0x561dff432930 <line:1572:21, line:1573:2>
|   |   |-TextComment 0x561dff4328e0 <line:1572:21, col:54> Text="             An array of EFI_EVENT"
|   |   `-TextComment 0x561dff432900 <line:1573:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff432950 <col:3, line:1574:61> [in] implicitly Param="UserIndex"
|   | `-ParagraphComment 0x561dff432a00 <line:1573:20, line:1574:61>
|   |   |-TextComment 0x561dff4329b0 <line:1573:20, col:72> Text="              Pointer to the index of the event which"
|   |   `-TextComment 0x561dff4329d0 <line:1574:1, col:61> Text="                                 satisfied the wait condition"
|   |-ParagraphComment 0x561dff432a50 <line:1576:1, col:2>
|   | `-TextComment 0x561dff432a20 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff432a70 <col:3, line:1577:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff432b10 <line:1576:22, line:1577:2>
|   |   |-TextComment 0x561dff432ac0 <line:1576:22, col:75> Text="            The event indicated by Index was signaled."
|   |   `-TextComment 0x561dff432ae0 <line:1577:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff432b30 <col:3, line:1579:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff432c10 <line:1577:32, line:1579:2>
|   |   |-TextComment 0x561dff432b90 <line:1577:32, col:80> Text="  The event indicated by Index has a notification"
|   |   |-TextComment 0x561dff432bb0 <line:1578:1, col:71> Text="                                 function or Event was not a valid type"
|   |   `-TextComment 0x561dff432bd0 <line:1579:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff432c30 <col:3, col:71> Name="retval" Arg[0]="EFI_UNSUPPORTED"
|     `-ParagraphComment 0x561dff432cb0 <col:26, col:71>
|       `-TextComment 0x561dff432c80 <col:26, col:71> Text="        The current TPL is not TPL_APPLICATION"
|-VarDecl 0x561dff40b400 <line:1599:1, line:1600:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff4330d0 <line:1591:1, line:1596:58>
|   |-ParagraphComment 0x561dff432dc0 <line:1591:1, col:48>
|   | `-TextComment 0x561dff432d90 <col:1, col:48> Text="  Closes an event and frees the event structure."
|   |-ParagraphComment 0x561dff432e10 <line:1593:1, col:2>
|   | `-TextComment 0x561dff432de0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff432e30 <col:3, col:47> [in] implicitly Param="UserEvent"
|   | `-ParagraphComment 0x561dff432ec0 <col:20, col:47>
|   |   `-TextComment 0x561dff432e90 <col:20, col:47> Text="              Event to close"
|   |-ParagraphComment 0x561dff432f10 <line:1595:1, col:2>
|   | `-TextComment 0x561dff432ee0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff432f30 <col:3, line:1596:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff432fe0 <line:1595:32, line:1596:2>
|   |   |-TextComment 0x561dff432f90 <line:1595:32, col:58> Text="  Parameters are not valid."
|   |   `-TextComment 0x561dff432fb0 <line:1596:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff433000 <col:3, col:58> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff433080 <col:22, col:58>
|       `-TextComment 0x561dff433050 <col:22, col:58> Text="            The event has been closed"
|-VarDecl 0x561dff40b4b0 <line:1615:1, line:1616:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff433590 <line:1606:1, line:1612:67>
|   |-ParagraphComment 0x561dff433170 <line:1606:1, col:31>
|   | `-TextComment 0x561dff433140 <col:1, col:31> Text="  Check the status of an event."
|   |-ParagraphComment 0x561dff4331c0 <line:1608:1, col:2>
|   | `-TextComment 0x561dff433190 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4331e0 <col:3, col:51> [in] implicitly Param="UserEvent"
|   | `-ParagraphComment 0x561dff433270 <col:20, col:51>
|   |   `-TextComment 0x561dff433240 <col:20, col:51> Text="              The event to check"
|   |-ParagraphComment 0x561dff4332c0 <line:1610:1, col:2>
|   | `-TextComment 0x561dff433290 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4332e0 <col:3, line:1611:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff433380 <line:1610:22, line:1611:2>
|   |   |-TextComment 0x561dff433330 <line:1610:22, col:67> Text="            The event is in the signaled state"
|   |   `-TextComment 0x561dff433350 <line:1611:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4333a0 <col:3, line:1612:2> Name="retval" Arg[0]="EFI_NOT_READY"
|   | `-ParagraphComment 0x561dff433440 <line:1611:24, line:1612:2>
|   |   |-TextComment 0x561dff4333f0 <line:1611:24, col:71> Text="          The event is not in the signaled state"
|   |   `-TextComment 0x561dff433410 <line:1612:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff433460 <col:3, col:67> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|     `-ParagraphComment 0x561dff4334f0 <col:32, col:67>
|       `-TextComment 0x561dff4334c0 <col:32, col:67> Text="  Event is of type EVT_NOTIFY_SIGNAL"
|-VarDecl 0x561dff40b560 <line:1633:1, line:1634:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff433b10 <line:1622:1, line:1630:71>
|   |-ParagraphComment 0x561dff433650 <line:1622:1, line:1623:43>
|   | |-TextComment 0x561dff433600 <line:1622:1, col:76> Text="  Adds reserved memory, system memory, or memory-mapped I/O resources to the"
|   | `-TextComment 0x561dff433620 <line:1623:1, col:43> Text="  global coherency domain of the processor."
|   |-ParagraphComment 0x561dff4336a0 <line:1625:1, col:2>
|   | `-TextComment 0x561dff433670 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4336c0 <col:3, line:1626:2> [in] implicitly Param="GcdMemoryType"
|   | `-ParagraphComment 0x561dff433770 <line:1625:24, line:1626:2>
|   |   |-TextComment 0x561dff433720 <line:1625:24, col:65> Text="          Memory type of the memory space."
|   |   `-TextComment 0x561dff433740 <line:1626:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff433790 <col:3, line:1627:2> [in] implicitly Param="BaseAddress"
|   | `-ParagraphComment 0x561dff433840 <line:1626:22, line:1627:2>
|   |   |-TextComment 0x561dff4337f0 <line:1626:22, col:66> Text="            Base address of the memory space."
|   |   `-TextComment 0x561dff433810 <line:1627:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff433860 <col:3, line:1628:2> [in] implicitly Param="Length"
|   | `-ParagraphComment 0x561dff433910 <line:1627:17, line:1628:2>
|   |   |-TextComment 0x561dff4338c0 <line:1627:17, col:60> Text="                 Length of the memory space."
|   |   `-TextComment 0x561dff4338e0 <line:1628:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff433930 <col:3, col:74> [in] implicitly Param="Capabilities"
|   | `-ParagraphComment 0x561dff4339c0 <col:23, col:74>
|   |   `-TextComment 0x561dff433990 <col:23, col:74> Text="           alterable attributes of the memory space."
|   |-ParagraphComment 0x561dff433a10 <line:1630:1, col:2>
|   | `-TextComment 0x561dff4339e0 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff433a30 <col:3, col:71> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff433ab0 <col:22, col:71>
|       `-TextComment 0x561dff433a80 <col:22, col:71> Text="            Merged this memory space into GCD map."
|-VarDecl 0x561dff40b610 <line:1659:1, line:1660:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff4344c0 <line:1643:1, line:1656:69>
|   |-ParagraphComment 0x561dff433bd0 <line:1643:1, line:1644:66>
|   | |-TextComment 0x561dff433b80 <line:1643:1, col:79> Text="  Allocates nonexistent memory, reserved memory, system memory, or memorymapped"
|   | `-TextComment 0x561dff433ba0 <line:1644:1, col:66> Text="  I/O resources from the global coherency domain of the processor."
|   |-ParagraphComment 0x561dff433c20 <line:1646:1, col:2>
|   | `-TextComment 0x561dff433bf0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff433c40 <col:3, line:1647:2> [in] implicitly Param="GcdAllocateType"
|   | `-ParagraphComment 0x561dff433cf0 <line:1646:26, line:1647:2>
|   |   |-TextComment 0x561dff433ca0 <line:1646:26, col:63> Text="        The type of allocate operation"
|   |   `-TextComment 0x561dff433cc0 <line:1647:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff433d10 <col:3, line:1648:2> [in] implicitly Param="GcdMemoryType"
|   | `-ParagraphComment 0x561dff433dc0 <line:1647:24, line:1648:2>
|   |   |-TextComment 0x561dff433d70 <line:1647:24, col:56> Text="          The desired memory type"
|   |   `-TextComment 0x561dff433d90 <line:1648:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff433de0 <col:3, line:1649:2> [in] implicitly Param="Alignment"
|   | `-ParagraphComment 0x561dff433e90 <line:1648:20, line:1649:2>
|   |   |-TextComment 0x561dff433e40 <line:1648:20, col:55> Text="              Align with 2^Alignment"
|   |   `-TextComment 0x561dff433e60 <line:1649:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff433eb0 <col:3, line:1650:2> [in] implicitly Param="Length"
|   | `-ParagraphComment 0x561dff433f60 <line:1649:17, line:1650:2>
|   |   |-TextComment 0x561dff433f10 <line:1649:17, col:51> Text="                 Length to allocate"
|   |   `-TextComment 0x561dff433f30 <line:1650:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff433f80 <col:3, line:1651:2> [in] implicitly Param="BaseAddress"
|   | `-ParagraphComment 0x561dff434030 <line:1650:22, line:1651:2>
|   |   |-TextComment 0x561dff433fe0 <line:1650:22, col:57> Text="            Base address to allocate"
|   |   `-TextComment 0x561dff434000 <line:1651:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff434050 <col:3, line:1652:2> [in] implicitly Param="ImageHandle"
|   | `-ParagraphComment 0x561dff434100 <line:1651:22, line:1652:2>
|   |   |-TextComment 0x561dff4340b0 <line:1651:22, col:78> Text="            The image handle consume the allocated space."
|   |   `-TextComment 0x561dff4340d0 <line:1652:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff434120 <col:3, col:79> [in] implicitly Param="DeviceHandle"
|   | `-ParagraphComment 0x561dff4341b0 <col:23, col:79>
|   |   `-TextComment 0x561dff434180 <col:23, col:79> Text="           The device handle consume the allocated space."
|   |-ParagraphComment 0x561dff434200 <line:1654:1, col:2>
|   | `-TextComment 0x561dff4341d0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff434220 <col:3, line:1655:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff4342d0 <line:1654:32, line:1655:2>
|   |   |-TextComment 0x561dff434280 <line:1654:32, col:51> Text="  Invalid parameter."
|   |   `-TextComment 0x561dff4342a0 <line:1655:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4342f0 <col:3, line:1656:2> Name="retval" Arg[0]="EFI_NOT_FOUND"
|   | `-ParagraphComment 0x561dff434390 <line:1655:24, line:1656:2>
|   |   |-TextComment 0x561dff434340 <line:1655:24, col:74> Text="          No descriptor contains the desired space."
|   |   `-TextComment 0x561dff434360 <line:1656:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff4343b0 <col:3, col:69> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff434430 <col:22, col:69>
|       `-TextComment 0x561dff434400 <col:22, col:69> Text="            Memory space successfully allocated."
|-VarDecl 0x561dff40eaa0 <line:1681:1, line:1682:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff4348a0 <line:1672:1, line:1678:58>
|   |-ParagraphComment 0x561dff434590 <line:1672:1, line:1673:66>
|   | |-TextComment 0x561dff434530 <line:1672:1, col:76> Text="  Frees nonexistent memory, reserved memory, system memory, or memory-mapped"
|   | `-TextComment 0x561dff434560 <line:1673:1, col:66> Text="  I/O resources from the global coherency domain of the processor."
|   |-ParagraphComment 0x561dff4345e0 <line:1675:1, col:2>
|   | `-TextComment 0x561dff4345b0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff434600 <col:3, line:1676:2> [in] implicitly Param="BaseAddress"
|   | `-ParagraphComment 0x561dff4346b0 <line:1675:22, line:1676:2>
|   |   |-TextComment 0x561dff434660 <line:1675:22, col:66> Text="            Base address of the memory space."
|   |   `-TextComment 0x561dff434680 <line:1676:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4346d0 <col:3, col:60> [in] implicitly Param="Length"
|   | `-ParagraphComment 0x561dff434760 <col:17, col:60>
|   |   `-TextComment 0x561dff434730 <col:17, col:60> Text="                 Length of the memory space."
|   |-ParagraphComment 0x561dff4347b0 <line:1678:1, col:2>
|   | `-TextComment 0x561dff434780 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff4347d0 <col:3, col:58> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff434850 <col:22, col:58>
|       `-TextComment 0x561dff434820 <col:22, col:58> Text="            Space successfully freed."
|-VarDecl 0x561dff40eb50 <line:1698:1, line:1699:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff434c70 <line:1689:1, line:1695:79>
|   |-ParagraphComment 0x561dff434960 <line:1689:1, line:1690:47>
|   | |-TextComment 0x561dff434910 <line:1689:1, col:77> Text="  Removes reserved memory, system memory, or memory-mapped I/O resources from"
|   | `-TextComment 0x561dff434930 <line:1690:1, col:47> Text="  the global coherency domain of the processor."
|   |-ParagraphComment 0x561dff4349b0 <line:1692:1, col:2>
|   | `-TextComment 0x561dff434980 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4349d0 <col:3, line:1693:2> [in] implicitly Param="BaseAddress"
|   | `-ParagraphComment 0x561dff434a80 <line:1692:22, line:1693:2>
|   |   |-TextComment 0x561dff434a30 <line:1692:22, col:66> Text="            Base address of the memory space."
|   |   `-TextComment 0x561dff434a50 <line:1693:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff434aa0 <col:3, col:60> [in] implicitly Param="Length"
|   | `-ParagraphComment 0x561dff434b30 <col:17, col:60>
|   |   `-TextComment 0x561dff434b00 <col:17, col:60> Text="                 Length of the memory space."
|   |-ParagraphComment 0x561dff434b80 <line:1695:1, col:2>
|   | `-TextComment 0x561dff434b50 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff434ba0 <col:3, col:79> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff434c20 <col:22, col:79>
|       `-TextComment 0x561dff434bf0 <col:22, col:79> Text="            Successfully remove a segment of memory space."
|-VarDecl 0x561dff40ec00 <line:1715:1, line:1716:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff435100 <line:1706:1, line:1712:74>
|   |-ParagraphComment 0x561dff434d10 <line:1706:1, col:78>
|   | `-TextComment 0x561dff434ce0 <col:1, col:78> Text="  Retrieves the descriptor for a memory region containing a specified address."
|   |-ParagraphComment 0x561dff434d60 <line:1708:1, col:2>
|   | `-TextComment 0x561dff434d30 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff434d80 <col:3, line:1709:2> [in] implicitly Param="BaseAddress"
|   | `-ParagraphComment 0x561dff434e30 <line:1708:22, line:1709:2>
|   |   |-TextComment 0x561dff434de0 <line:1708:22, col:56> Text="            Specified start address"
|   |   `-TextComment 0x561dff434e00 <line:1709:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff434e50 <col:3, col:49> [in] implicitly Param="Descriptor"
|   | `-ParagraphComment 0x561dff434ee0 <col:21, col:49>
|   |   `-TextComment 0x561dff434eb0 <col:21, col:49> Text="             Specified length"
|   |-ParagraphComment 0x561dff434f30 <line:1711:1, col:2>
|   | `-TextComment 0x561dff434f00 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff434f50 <col:3, line:1712:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff435000 <line:1711:32, line:1712:2>
|   |   |-TextComment 0x561dff434fb0 <line:1711:32, col:50> Text="  Invalid parameter"
|   |   `-TextComment 0x561dff434fd0 <line:1712:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff435020 <col:3, col:74> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff4350a0 <col:22, col:74>
|       `-TextComment 0x561dff435070 <col:22, col:74> Text="            Successfully get memory space descriptor."
|-VarDecl 0x561dff40ecb0 <line:1744:1, line:1745:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff435b90 <line:1723:1, line:1741:50>
|   |-ParagraphComment 0x561dff4351c0 <line:1723:1, line:1724:12>
|   | |-TextComment 0x561dff435170 <line:1723:1, col:83> Text="  Modifies the attributes for a memory region in the global coherency domain of the"
|   | `-TextComment 0x561dff435190 <line:1724:1, col:12> Text="  processor."
|   |-ParagraphComment 0x561dff435210 <line:1726:1, col:2>
|   | `-TextComment 0x561dff4351e0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff435230 <col:3, line:1727:2> [in] implicitly Param="BaseAddress"
|   | `-ParagraphComment 0x561dff4352e0 <line:1726:22, line:1727:2>
|   |   |-TextComment 0x561dff435290 <line:1726:22, col:56> Text="            Specified start address"
|   |   `-TextComment 0x561dff4352b0 <line:1727:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff435300 <col:3, line:1728:2> [in] implicitly Param="Length"
|   | `-ParagraphComment 0x561dff4353b0 <line:1727:17, line:1728:2>
|   |   |-TextComment 0x561dff435360 <line:1727:17, col:49> Text="                 Specified length"
|   |   `-TextComment 0x561dff435380 <line:1728:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4353d0 <col:3, col:53> [in] implicitly Param="Attributes"
|   | `-ParagraphComment 0x561dff435460 <col:21, col:53>
|   |   `-TextComment 0x561dff435430 <col:21, col:53> Text="             Specified attributes"
|   |-ParagraphComment 0x561dff4354b0 <line:1730:1, col:2>
|   | `-TextComment 0x561dff435480 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4354d0 <col:3, line:1731:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff435580 <line:1730:22, line:1731:2>
|   |   |-TextComment 0x561dff435520 <line:1730:22, col:78> Text="           The attributes were set for the memory region."
|   |   `-TextComment 0x561dff435540 <line:1731:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4355a0 <col:3, line:1732:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff435650 <line:1731:32, line:1732:2>
|   |   |-TextComment 0x561dff435600 <line:1731:32, col:47> Text=" Length is zero."
|   |   `-TextComment 0x561dff435620 <line:1732:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff435670 <col:3, line:1734:2> Name="retval" Arg[0]="EFI_UNSUPPORTED"
|   | `-ParagraphComment 0x561dff435740 <line:1732:26, line:1734:2>
|   |   |-TextComment 0x561dff4356c0 <line:1732:26, col:94> Text="       The processor does not support one or more bytes of the memory"
|   |   |-TextComment 0x561dff4356e0 <line:1733:1, col:83> Text="                                resource range specified by BaseAddress and Length."
|   |   `-TextComment 0x561dff435700 <line:1734:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff435760 <col:3, line:1736:2> Name="retval" Arg[0]="EFI_UNSUPPORTED"
|   | `-ParagraphComment 0x561dff435830 <line:1734:26, line:1736:2>
|   |   |-TextComment 0x561dff4357b0 <line:1734:26, col:97> Text="       The bit mask of attributes is not support for the memory resource"
|   |   |-TextComment 0x561dff4357d0 <line:1735:1, col:74> Text="                                range specified by BaseAddress and Length."
|   |   `-TextComment 0x561dff4357f0 <line:1736:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff435850 <col:3, line:1738:2> Name="retval" Arg[0]="EFI_ACCESS_DENIED"
|   | `-ParagraphComment 0x561dff435930 <line:1736:28, line:1738:2>
|   |   |-TextComment 0x561dff4358b0 <line:1736:28, col:89> Text="     The attributes for the memory resource range specified by"
|   |   |-TextComment 0x561dff4358d0 <line:1737:1, col:74> Text="                                BaseAddress and Length cannot be modified."
|   |   `-TextComment 0x561dff4358f0 <line:1738:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff435950 <col:3, line:1740:2> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|   | `-ParagraphComment 0x561dff435a30 <line:1738:31, line:1740:2>
|   |   |-TextComment 0x561dff4359b0 <line:1738:31, col:97> Text="  There are not enough system resources to modify the attributes of"
|   |   |-TextComment 0x561dff4359d0 <line:1739:1, col:58> Text="                                the memory resource range."
|   |   `-TextComment 0x561dff4359f0 <line:1740:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff435a50 <col:3, line:1741:50> Name="retval" Arg[0]="EFI_NOT_AVAILABLE_YET"
|     `-ParagraphComment 0x561dff435b00 <line:1740:32, line:1741:50>
|       |-TextComment 0x561dff435ab0 <line:1740:32, col:98> Text=" The attributes cannot be set because CPU architectural protocol is"
|       `-TextComment 0x561dff435ad0 <line:1741:1, col:50> Text="                                not available yet."
|-VarDecl 0x561dff40ed60 <line:1769:1, line:1770:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff436410 <line:1753:1, line:1767:61>
|   |-ParagraphComment 0x561dff435c50 <line:1753:1, line:1754:12>
|   | |-TextComment 0x561dff435c00 <line:1753:1, col:85> Text="  Modifies the capabilities for a memory region in the global coherency domain of the"
|   | `-TextComment 0x561dff435c20 <line:1754:1, col:12> Text="  processor."
|   |-ParagraphComment 0x561dff435ca0 <line:1756:1, col:2>
|   | `-TextComment 0x561dff435c70 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff435cc0 <col:3, line:1757:2> [in] implicitly Param="BaseAddress"
|   | `-ParagraphComment 0x561dff435d70 <line:1756:22, line:1757:2>
|   |   |-TextComment 0x561dff435d20 <line:1756:22, col:93> Text="      The physical address that is the start address of a memory region."
|   |   `-TextComment 0x561dff435d40 <line:1757:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff435d90 <col:3, line:1758:2> [in] implicitly Param="Length"
|   | `-ParagraphComment 0x561dff435e40 <line:1757:17, line:1758:2>
|   |   |-TextComment 0x561dff435df0 <line:1757:17, col:66> Text="           The size in bytes of the memory region."
|   |   `-TextComment 0x561dff435e10 <line:1758:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff435e60 <col:3, col:88> [in] implicitly Param="Capabilities"
|   | `-ParagraphComment 0x561dff435ef0 <col:23, col:88>
|   |   `-TextComment 0x561dff435ec0 <col:23, col:88> Text="     The bit mask of capabilities that the memory region supports."
|   |-ParagraphComment 0x561dff435f40 <line:1760:1, col:2>
|   | `-TextComment 0x561dff435f10 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff435f60 <col:3, line:1761:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff436000 <line:1760:22, line:1761:2>
|   |   |-TextComment 0x561dff435fb0 <line:1760:22, col:80> Text="           The capabilities were set for the memory region."
|   |   `-TextComment 0x561dff435fd0 <line:1761:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff436020 <col:3, line:1762:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff4360d0 <line:1761:32, line:1762:2>
|   |   |-TextComment 0x561dff436080 <line:1761:32, col:47> Text=" Length is zero."
|   |   `-TextComment 0x561dff4360a0 <line:1762:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4360f0 <col:3, line:1764:2> Name="retval" Arg[0]="EFI_UNSUPPORTED"
|   | `-ParagraphComment 0x561dff4361c0 <line:1762:26, line:1764:2>
|   |   |-TextComment 0x561dff436140 <line:1762:26, col:93> Text="       The capabilities specified by Capabilities do not include the"
|   |   |-TextComment 0x561dff436160 <line:1763:1, col:74> Text="                                memory region attributes currently in use."
|   |   `-TextComment 0x561dff436180 <line:1764:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4361e0 <col:3, line:1766:2> Name="retval" Arg[0]="EFI_ACCESS_DENIED"
|   | `-ParagraphComment 0x561dff4362c0 <line:1764:28, line:1766:2>
|   |   |-TextComment 0x561dff436240 <line:1764:28, col:91> Text="     The capabilities for the memory resource range specified by"
|   |   |-TextComment 0x561dff436260 <line:1765:1, col:74> Text="                                BaseAddress and Length cannot be modified."
|   |   `-TextComment 0x561dff436280 <line:1766:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff4362e0 <col:3, line:1767:61> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|     `-ParagraphComment 0x561dff436390 <line:1766:31, line:1767:61>
|       |-TextComment 0x561dff436340 <line:1766:31, col:96> Text="  There are not enough system resources to modify the capabilities"
|       `-TextComment 0x561dff436360 <line:1767:1, col:61> Text="                                of the memory resource range."
|-VarDecl 0x561dff40ee10 <line:1789:1, line:1790:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff4369b0 <line:1778:1, line:1786:67>
|   |-ParagraphComment 0x561dff4364d0 <line:1778:1, line:1779:12>
|   | |-TextComment 0x561dff436480 <line:1778:1, col:77> Text="  Returns a map of the memory resources in the global coherency domain of the"
|   | `-TextComment 0x561dff4364a0 <line:1779:1, col:12> Text="  processor."
|   |-ParagraphComment 0x561dff436520 <line:1781:1, col:2>
|   | `-TextComment 0x561dff4364f0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff436540 <col:3, line:1782:2> [in] implicitly Param="NumberOfDescriptors"
|   | `-ParagraphComment 0x561dff436610 <line:1781:30, line:1782:2>
|   |   |-TextComment 0x561dff4365c0 <line:1781:30, col:55> Text="    Number of descriptors."
|   |   `-TextComment 0x561dff4365e0 <line:1782:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff436630 <col:3, col:49> [in] implicitly Param="MemorySpaceMap"
|   | `-ParagraphComment 0x561dff4366c0 <col:25, col:49>
|   |   `-TextComment 0x561dff436690 <col:25, col:49> Text="         Descriptor array"
|   |-ParagraphComment 0x561dff436710 <line:1784:1, col:2>
|   | `-TextComment 0x561dff4366e0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff436730 <col:3, line:1785:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff4367e0 <line:1784:32, line:1785:2>
|   |   |-TextComment 0x561dff436790 <line:1784:32, col:50> Text="  Invalid parameter"
|   |   `-TextComment 0x561dff4367b0 <line:1785:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff436800 <col:3, line:1786:2> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|   | `-ParagraphComment 0x561dff4368b0 <line:1785:31, line:1786:2>
|   |   |-TextComment 0x561dff436860 <line:1785:31, col:61> Text="   No enough buffer to allocate"
|   |   `-TextComment 0x561dff436880 <line:1786:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff4368d0 <col:3, col:67> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff436950 <col:22, col:67>
|       `-TextComment 0x561dff436920 <col:22, col:67> Text="            Successfully get memory space map."
|-VarDecl 0x561dff40eec0 <line:1807:1, line:1808:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff436f10 <line:1797:1, line:1804:52>
|   |-ParagraphComment 0x561dff436a50 <line:1797:1, col:85>
|   | `-TextComment 0x561dff436a20 <col:1, col:85> Text="  Adds reserved I/O or I/O resources to the global coherency domain of the processor."
|   |-ParagraphComment 0x561dff436aa0 <line:1799:1, col:2>
|   | `-TextComment 0x561dff436a70 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff436ac0 <col:3, line:1800:2> [in] implicitly Param="GcdIoType"
|   | `-ParagraphComment 0x561dff436b70 <line:1799:20, line:1800:2>
|   |   |-TextComment 0x561dff436b20 <line:1799:20, col:56> Text="              IO type of the segment."
|   |   `-TextComment 0x561dff436b40 <line:1800:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff436b90 <col:3, line:1801:2> [in] implicitly Param="BaseAddress"
|   | `-ParagraphComment 0x561dff436c40 <line:1800:22, line:1801:2>
|   |   |-TextComment 0x561dff436bf0 <line:1800:22, col:61> Text="            Base address of the segment."
|   |   `-TextComment 0x561dff436c10 <line:1801:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff436c60 <col:3, col:55> [in] implicitly Param="Length"
|   | `-ParagraphComment 0x561dff436cf0 <col:17, col:55>
|   |   `-TextComment 0x561dff436cc0 <col:17, col:55> Text="                 Length of the segment."
|   |-ParagraphComment 0x561dff436d40 <line:1803:1, col:2>
|   | `-TextComment 0x561dff436d10 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff436d60 <col:3, line:1804:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff436e00 <line:1803:22, line:1804:2>
|   |   |-TextComment 0x561dff436db0 <line:1803:22, col:66> Text="            Merged this segment into GCD map."
|   |   `-TextComment 0x561dff436dd0 <line:1804:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff436e20 <col:3, col:52> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|     `-ParagraphComment 0x561dff436eb0 <col:32, col:52>
|       `-TextComment 0x561dff436e80 <col:32, col:52> Text="  Parameter not valid"
|-VarDecl 0x561dff40ef70 <line:1832:1, line:1833:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff437b50 <line:1816:1, line:1829:65>
|   |-ParagraphComment 0x561dff436fd0 <line:1816:1, line:1817:26>
|   | |-TextComment 0x561dff436f80 <line:1816:1, col:85> Text="  Allocates nonexistent I/O, reserved I/O, or I/O resources from the global coherency"
|   | `-TextComment 0x561dff436fa0 <line:1817:1, col:26> Text="  domain of the processor."
|   |-ParagraphComment 0x561dff437020 <line:1819:1, col:2>
|   | `-TextComment 0x561dff436ff0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff437040 <col:3, line:1820:2> [in] implicitly Param="GcdAllocateType"
|   | `-ParagraphComment 0x561dff4370f0 <line:1819:26, line:1820:2>
|   |   |-TextComment 0x561dff4370a0 <line:1819:26, col:63> Text="        The type of allocate operation"
|   |   `-TextComment 0x561dff4370c0 <line:1820:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff437110 <col:3, line:1821:2> [in] implicitly Param="GcdIoType"
|   | `-ParagraphComment 0x561dff4371c0 <line:1820:20, line:1821:2>
|   |   |-TextComment 0x561dff437170 <line:1820:20, col:52> Text="              The desired IO type"
|   |   `-TextComment 0x561dff437190 <line:1821:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4371e0 <col:3, line:1822:2> [in] implicitly Param="Alignment"
|   | `-ParagraphComment 0x561dff437290 <line:1821:20, line:1822:2>
|   |   |-TextComment 0x561dff437240 <line:1821:20, col:55> Text="              Align with 2^Alignment"
|   |   `-TextComment 0x561dff437260 <line:1822:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4372b0 <col:3, line:1823:2> [in] implicitly Param="Length"
|   | `-ParagraphComment 0x561dff437360 <line:1822:17, line:1823:2>
|   |   |-TextComment 0x561dff437310 <line:1822:17, col:51> Text="                 Length to allocate"
|   |   `-TextComment 0x561dff437330 <line:1823:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff437380 <col:3, line:1824:2> [in] implicitly Param="BaseAddress"
|   | `-ParagraphComment 0x561dff437430 <line:1823:22, line:1824:2>
|   |   |-TextComment 0x561dff4373e0 <line:1823:22, col:57> Text="            Base address to allocate"
|   |   `-TextComment 0x561dff437400 <line:1824:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff437450 <col:3, line:1825:2> [in] implicitly Param="ImageHandle"
|   | `-ParagraphComment 0x561dff437500 <line:1824:22, line:1825:2>
|   |   |-TextComment 0x561dff4374b0 <line:1824:22, col:78> Text="            The image handle consume the allocated space."
|   |   `-TextComment 0x561dff4374d0 <line:1825:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff437520 <col:3, col:79> [in] implicitly Param="DeviceHandle"
|   | `-ParagraphComment 0x561dff437840 <col:23, col:79>
|   |   `-TextComment 0x561dff437810 <col:23, col:79> Text="           The device handle consume the allocated space."
|   |-ParagraphComment 0x561dff437890 <line:1827:1, col:2>
|   | `-TextComment 0x561dff437860 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4378b0 <col:3, line:1828:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff437960 <line:1827:32, line:1828:2>
|   |   |-TextComment 0x561dff437910 <line:1827:32, col:51> Text="  Invalid parameter."
|   |   `-TextComment 0x561dff437930 <line:1828:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff437980 <col:3, line:1829:2> Name="retval" Arg[0]="EFI_NOT_FOUND"
|   | `-ParagraphComment 0x561dff437a20 <line:1828:24, line:1829:2>
|   |   |-TextComment 0x561dff4379d0 <line:1828:24, col:74> Text="          No descriptor contains the desired space."
|   |   `-TextComment 0x561dff4379f0 <line:1829:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff437a40 <col:3, col:65> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff437ac0 <col:22, col:65>
|       `-TextComment 0x561dff437a90 <col:22, col:65> Text="            IO space successfully allocated."
|-VarDecl 0x561dff40f020 <line:1854:1, line:1855:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff437f20 <line:1845:1, line:1851:58>
|   |-ParagraphComment 0x561dff437c10 <line:1845:1, line:1846:26>
|   | |-TextComment 0x561dff437bc0 <line:1845:1, col:81> Text="  Frees nonexistent I/O, reserved I/O, or I/O resources from the global coherency"
|   | `-TextComment 0x561dff437be0 <line:1846:1, col:26> Text="  domain of the processor."
|   |-ParagraphComment 0x561dff437c60 <line:1848:1, col:2>
|   | `-TextComment 0x561dff437c30 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff437c80 <col:3, line:1849:2> [in] implicitly Param="BaseAddress"
|   | `-ParagraphComment 0x561dff437d30 <line:1848:22, line:1849:2>
|   |   |-TextComment 0x561dff437ce0 <line:1848:22, col:61> Text="            Base address of the segment."
|   |   `-TextComment 0x561dff437d00 <line:1849:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff437d50 <col:3, col:55> [in] implicitly Param="Length"
|   | `-ParagraphComment 0x561dff437de0 <col:17, col:55>
|   |   `-TextComment 0x561dff437db0 <col:17, col:55> Text="                 Length of the segment."
|   |-ParagraphComment 0x561dff437e30 <line:1851:1, col:2>
|   | `-TextComment 0x561dff437e00 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff437e50 <col:3, col:58> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff437ed0 <col:22, col:58>
|       `-TextComment 0x561dff437ea0 <col:22, col:58> Text="            Space successfully freed."
|-VarDecl 0x561dff40f0d0 <line:1871:1, line:1872:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff4382f0 <line:1862:1, line:1868:76>
|   |-ParagraphComment 0x561dff437fe0 <line:1862:1, line:1863:12>
|   | |-TextComment 0x561dff437f90 <line:1862:1, col:79> Text="  Removes reserved I/O or I/O resources from the global coherency domain of the"
|   | `-TextComment 0x561dff437fb0 <line:1863:1, col:12> Text="  processor."
|   |-ParagraphComment 0x561dff438030 <line:1865:1, col:2>
|   | `-TextComment 0x561dff438000 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff438050 <col:3, line:1866:2> [in] implicitly Param="BaseAddress"
|   | `-ParagraphComment 0x561dff438100 <line:1865:22, line:1866:2>
|   |   |-TextComment 0x561dff4380b0 <line:1865:22, col:61> Text="            Base address of the segment."
|   |   `-TextComment 0x561dff4380d0 <line:1866:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff438120 <col:3, col:55> [in] implicitly Param="Length"
|   | `-ParagraphComment 0x561dff4381b0 <col:17, col:55>
|   |   `-TextComment 0x561dff438180 <col:17, col:55> Text="                 Length of the segment."
|   |-ParagraphComment 0x561dff438200 <line:1868:1, col:2>
|   | `-TextComment 0x561dff4381d0 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff438220 <col:3, col:76> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff4382a0 <col:22, col:76>
|       `-TextComment 0x561dff438270 <col:22, col:76> Text="            Successfully removed a segment of IO space."
|-VarDecl 0x561dff40f180 <line:1888:1, line:1889:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff438780 <line:1879:1, line:1885:74>
|   |-ParagraphComment 0x561dff438390 <line:1879:1, col:76>
|   | `-TextComment 0x561dff438360 <col:1, col:76> Text="  Retrieves the descriptor for an I/O region containing a specified address."
|   |-ParagraphComment 0x561dff4383e0 <line:1881:1, col:2>
|   | `-TextComment 0x561dff4383b0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff438400 <col:3, line:1882:2> [in] implicitly Param="BaseAddress"
|   | `-ParagraphComment 0x561dff4384b0 <line:1881:22, line:1882:2>
|   |   |-TextComment 0x561dff438460 <line:1881:22, col:56> Text="            Specified start address"
|   |   `-TextComment 0x561dff438480 <line:1882:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4384d0 <col:3, col:49> [in] implicitly Param="Descriptor"
|   | `-ParagraphComment 0x561dff438560 <col:21, col:49>
|   |   `-TextComment 0x561dff438530 <col:21, col:49> Text="             Specified length"
|   |-ParagraphComment 0x561dff4385b0 <line:1884:1, col:2>
|   | `-TextComment 0x561dff438580 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4385d0 <col:3, line:1885:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff438680 <line:1884:32, line:1885:2>
|   |   |-TextComment 0x561dff438630 <line:1884:32, col:52> Text="  Descriptor is NULL."
|   |   `-TextComment 0x561dff438650 <line:1885:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff4386a0 <col:3, col:74> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff438720 <col:22, col:74>
|       `-TextComment 0x561dff4386f0 <col:22, col:74> Text="            Successfully get the IO space descriptor."
|-VarDecl 0x561dff40f230 <line:1906:1, line:1907:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff439d10 <line:1896:1, line:1903:63>
|   |-ParagraphComment 0x561dff439840 <line:1896:1, col:85>
|   | `-TextComment 0x561dff4387f0 <col:1, col:85> Text="  Returns a map of the I/O resources in the global coherency domain of the processor."
|   |-ParagraphComment 0x561dff439890 <line:1898:1, col:2>
|   | `-TextComment 0x561dff439860 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4398b0 <col:3, line:1899:2> [in] implicitly Param="NumberOfDescriptors"
|   | `-ParagraphComment 0x561dff439970 <line:1898:30, line:1899:2>
|   |   |-TextComment 0x561dff439920 <line:1898:30, col:55> Text="    Number of descriptors."
|   |   `-TextComment 0x561dff439940 <line:1899:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff439990 <col:3, col:49> [in] implicitly Param="IoSpaceMap"
|   | `-ParagraphComment 0x561dff439a20 <col:21, col:49>
|   |   `-TextComment 0x561dff4399f0 <col:21, col:49> Text="             Descriptor array"
|   |-ParagraphComment 0x561dff439a70 <line:1901:1, col:2>
|   | `-TextComment 0x561dff439a40 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff439a90 <col:3, line:1902:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff439b40 <line:1901:32, line:1902:2>
|   |   |-TextComment 0x561dff439af0 <line:1901:32, col:50> Text="  Invalid parameter"
|   |   `-TextComment 0x561dff439b10 <line:1902:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff439b60 <col:3, line:1903:2> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|   | `-ParagraphComment 0x561dff439c10 <line:1902:31, line:1903:2>
|   |   |-TextComment 0x561dff439bc0 <line:1902:31, col:61> Text="   No enough buffer to allocate"
|   |   `-TextComment 0x561dff439be0 <line:1903:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff439c30 <col:3, col:63> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff439cb0 <col:22, col:63>
|       `-TextComment 0x561dff439c80 <col:22, col:63> Text="            Successfully get IO space map."
|-VarDecl 0x561dff40f2e0 <line:1927:1, line:1928:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff43a170 <line:1914:1, line:1924:71>
|   |-ParagraphComment 0x561dff439ea0 <line:1914:1, line:1920:8>
|   | |-TextComment 0x561dff439d80 <line:1914:1, col:73> Text="  This is the main Dispatcher for DXE and it exits when there are no more"
|   | |-TextComment 0x561dff439da0 <line:1915:1, col:67> Text="  drivers to run. Drain the mScheduledQueue and load and start a PE"
|   | |-TextComment 0x561dff439dc0 <line:1916:1, col:76> Text="  image for each driver. Search the mDiscoveredList to see if any driver can"
|   | |-TextComment 0x561dff439de0 <line:1917:1, col:67> Text="  be placed on the mScheduledQueue. If no drivers are placed on the"
|   | |-TextComment 0x561dff439e00 <line:1918:1, col:68> Text="  mScheduledQueue exit the function. On exit it is assumed the Bds()"
|   | |-TextComment 0x561dff439e20 <line:1919:1, col:72> Text="  will be called, and when the Bds() exits the Dispatcher will be called"
|   | `-TextComment 0x561dff439e40 <line:1920:1, col:8> Text="  again."
|   |-ParagraphComment 0x561dff439ef0 <line:1922:1, col:2>
|   | `-TextComment 0x561dff439ec0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff439f10 <col:3, line:1923:2> Name="retval" Arg[0]="EFI_ALREADY_STARTED"
|   | `-ParagraphComment 0x561dff439fc0 <line:1922:30, line:1923:2>
|   |   |-TextComment 0x561dff439f70 <line:1922:30, col:69> Text="   The DXE Dispatcher is already running"
|   |   `-TextComment 0x561dff439f90 <line:1923:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff439fe0 <col:3, line:1924:2> Name="retval" Arg[0]="EFI_NOT_FOUND"
|   | `-ParagraphComment 0x561dff43a080 <line:1923:24, line:1924:2>
|   |   |-TextComment 0x561dff43a030 <line:1923:24, col:62> Text="         No DXE Drivers were dispatched"
|   |   `-TextComment 0x561dff43a050 <line:1924:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff43a0a0 <col:3, col:71> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff43a120 <col:22, col:71>
|       `-TextComment 0x561dff43a0f0 <col:22, col:71> Text="           One or more DXE Drivers were dispatched"
|-VarDecl 0x561dff40f390 <line:1947:1, line:1948:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff43a6a0 <line:1934:1, line:1944:40>
|   |-ParagraphComment 0x561dff43a230 <line:1934:1, line:1935:24>
|   | |-TextComment 0x561dff43a1e0 <line:1934:1, col:87> Text="  Check every driver and locate a matching one. If the driver is found, the Unrequested"
|   | `-TextComment 0x561dff43a200 <line:1935:1, col:24> Text="  state flag is cleared."
|   |-ParagraphComment 0x561dff43a280 <line:1937:1, col:2>
|   | `-TextComment 0x561dff43a250 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43a2a0 <col:3, line:1939:2> [in] implicitly Param="FirmwareVolumeHandle"
|   | `-ParagraphComment 0x561dff43a390 <line:1937:31, line:1939:2>
|   |   |-TextComment 0x561dff43a310 <line:1937:31, col:79> Text="  The handle of the Firmware Volume that contains"
|   |   |-TextComment 0x561dff43a330 <line:1938:1, col:75> Text="                                the firmware  file specified by DriverName."
|   |   `-TextComment 0x561dff43a350 <line:1939:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43a3b0 <col:3, col:78> [in] implicitly Param="DriverName"
|   | `-ParagraphComment 0x561dff43a440 <col:21, col:78>
|   |   `-TextComment 0x561dff43a410 <col:21, col:78> Text="            The Driver name to put in the Dependent state."
|   |-ParagraphComment 0x561dff43a490 <line:1941:1, col:2>
|   | `-TextComment 0x561dff43a460 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff43a4b0 <col:3, line:1943:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff43a580 <line:1941:22, line:1943:2>
|   |   |-TextComment 0x561dff43a500 <line:1941:22, col:77> Text="           The DriverName was found and it's SOR bit was"
|   |   |-TextComment 0x561dff43a520 <line:1942:1, col:39> Text="                                cleared"
|   |   `-TextComment 0x561dff43a540 <line:1943:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff43a5a0 <col:3, line:1944:40> Name="retval" Arg[0]="EFI_NOT_FOUND"
|     `-ParagraphComment 0x561dff43a640 <line:1943:24, line:1944:40>
|       |-TextComment 0x561dff43a5f0 <line:1943:24, col:81> Text="         The DriverName does not exist or it's SOR bit was"
|       `-TextComment 0x561dff43a610 <line:1944:1, col:40> Text="                                not set."
|-VarDecl 0x561dff40f440 <line:1966:1, line:1967:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff43abb0 <line:1955:1, line:1963:78>
|   |-ParagraphComment 0x561dff43a740 <line:1955:1, col:65>
|   | `-TextComment 0x561dff43a710 <col:1, col:65> Text="  Convert a driver from the Untrused back to the Scheduled state."
|   |-ParagraphComment 0x561dff43a790 <line:1957:1, col:2>
|   | `-TextComment 0x561dff43a760 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43a7b0 <col:3, line:1959:2> [in] implicitly Param="FirmwareVolumeHandle"
|   | `-ParagraphComment 0x561dff43a8c0 <line:1957:31, line:1959:2>
|   |   |-TextComment 0x561dff43a840 <line:1957:31, col:79> Text="  The handle of the Firmware Volume that contains"
|   |   |-TextComment 0x561dff43a860 <line:1958:1, col:75> Text="                                the firmware  file specified by DriverName."
|   |   `-TextComment 0x561dff43a880 <line:1959:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43a8e0 <col:3, col:77> [in] implicitly Param="DriverName"
|   | `-ParagraphComment 0x561dff43a970 <col:21, col:77>
|   |   `-TextComment 0x561dff43a940 <col:21, col:77> Text="            The Driver name to put in the Scheduled state"
|   |-ParagraphComment 0x561dff43a9c0 <line:1961:1, col:2>
|   | `-TextComment 0x561dff43a990 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff43a9e0 <col:3, line:1963:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff43aab0 <line:1961:22, line:1963:2>
|   |   |-TextComment 0x561dff43aa30 <line:1961:22, col:81> Text="           The file was found in the untrusted state, and it"
|   |   |-TextComment 0x561dff43aa50 <line:1962:1, col:67> Text="                                was promoted  to the trusted state."
|   |   `-TextComment 0x561dff43aa70 <line:1963:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff43aad0 <col:3, col:78> Name="retval" Arg[0]="EFI_NOT_FOUND"
|     `-ParagraphComment 0x561dff43ab50 <col:24, col:78>
|       `-TextComment 0x561dff43ab20 <col:24, col:78> Text="         The file was not found in the untrusted state."
|-VarDecl 0x561dff40f4f0 <line:1984:1, line:1985:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff43afb0 <line:1974:1, line:1981:63>
|   |-ParagraphComment 0x561dff43aca0 <line:1974:1, line:1976:66>
|   | |-TextComment 0x561dff43ac20 <line:1974:1, col:76> Text="  This routine is the driver initialization entry point.  It initializes the"
|   | |-TextComment 0x561dff43ac40 <line:1975:1, col:74> Text="  libraries, and registers two notification functions.  These notification"
|   | `-TextComment 0x561dff43ac60 <line:1976:1, col:66> Text="  functions are responsible for building the FV stack dynamically."
|   |-ParagraphComment 0x561dff43acf0 <line:1978:1, col:2>
|   | `-TextComment 0x561dff43acc0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43ad10 <col:3, line:1979:2> [in] implicitly Param="ImageHandle"
|   | `-ParagraphComment 0x561dff43adc0 <line:1978:22, line:1979:2>
|   |   |-TextComment 0x561dff43ad70 <line:1978:22, col:49> Text="           The image handle."
|   |   `-TextComment 0x561dff43ad90 <line:1979:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43ade0 <col:3, col:49> [in] implicitly Param="SystemTable"
|   | `-ParagraphComment 0x561dff43ae70 <col:22, col:49>
|   |   `-TextComment 0x561dff43ae40 <col:22, col:49> Text="           The system table."
|   |-ParagraphComment 0x561dff43aec0 <line:1981:1, col:2>
|   | `-TextComment 0x561dff43ae90 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff43aee0 <col:3, col:63> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff43af60 <col:22, col:63>
|       `-TextComment 0x561dff43af30 <col:22, col:63> Text="           Function successfully returned."
|-VarDecl 0x561dff40f5a0 <line:2002:1, line:2003:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff43b460 <line:1992:1, line:1999:67>
|   |-ParagraphComment 0x561dff43b070 <line:1992:1, line:1993:63>
|   | |-TextComment 0x561dff43b020 <line:1992:1, col:76> Text="  Entry point of the section extraction code. Initializes an instance of the"
|   | `-TextComment 0x561dff43b040 <line:1993:1, col:63> Text="  section extraction interface and installs it on a new handle."
|   |-ParagraphComment 0x561dff43b0c0 <line:1995:1, col:2>
|   | `-TextComment 0x561dff43b090 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43b0e0 <col:3, line:1996:2> [in] implicitly Param="ImageHandle"
|   | `-ParagraphComment 0x561dff43b190 <line:1995:22, line:1996:2>
|   |   |-TextComment 0x561dff43b140 <line:1995:22, col:79> Text="   A handle for the image that is initializing this driver"
|   |   `-TextComment 0x561dff43b160 <line:1996:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43b1b0 <col:3, col:57> [in] implicitly Param="SystemTable"
|   | `-ParagraphComment 0x561dff43b240 <col:22, col:57>
|   |   `-TextComment 0x561dff43b210 <col:22, col:57> Text="   A pointer to the EFI system table"
|   |-ParagraphComment 0x561dff43b290 <line:1998:1, col:2>
|   | `-TextComment 0x561dff43b260 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff43b2b0 <col:3, line:1999:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff43b350 <line:1998:22, line:1999:2>
|   |   |-TextComment 0x561dff43b300 <line:1998:22, col:63> Text="           Driver initialized successfully"
|   |   `-TextComment 0x561dff43b320 <line:1999:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff43b370 <col:3, col:67> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|     `-ParagraphComment 0x561dff43b400 <col:31, col:67>
|       `-TextComment 0x561dff43b3d0 <col:31, col:67> Text="  Could not allocate needed resources"
|-VarDecl 0x561dff40f650 <line:2026:1, line:2027:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff43bb80 <line:2010:1, line:2023:48>
|   |-ParagraphComment 0x561dff43b550 <line:2010:1, line:2012:28>
|   | |-TextComment 0x561dff43b4d0 <line:2010:1, col:67> Text="  This DXE service routine is used to process a firmware volume. In"
|   | |-TextComment 0x561dff43b4f0 <line:2011:1, col:66> Text="  particular, it can be called by BDS to process a single firmware"
|   | `-TextComment 0x561dff43b510 <line:2012:1, col:28> Text="  volume found in a capsule."
|   |-ParagraphComment 0x561dff43b5a0 <line:2014:1, col:2>
|   | `-TextComment 0x561dff43b570 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43b5c0 <col:3, line:2015:2> [in] implicitly Param="FvHeader"
|   | `-ParagraphComment 0x561dff43b670 <line:2014:19, line:2015:2>
|   |   |-TextComment 0x561dff43b620 <line:2014:19, col:68> Text="               pointer to a firmware volume header"
|   |   `-TextComment 0x561dff43b640 <line:2015:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43b690 <col:3, line:2016:2> [in] implicitly Param="Size"
|   | `-ParagraphComment 0x561dff43b740 <line:2015:15, line:2016:2>
|   |   |-TextComment 0x561dff43b6f0 <line:2015:15, col:78> Text="                   the size of the buffer pointed to by FvHeader"
|   |   `-TextComment 0x561dff43b710 <line:2016:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43b760 <col:3, line:2017:80> [in] implicitly Param="FVProtocolHandle"
|   | `-ParagraphComment 0x561dff43b820 <line:2016:27, line:2017:80>
|   |   |-TextComment 0x561dff43b7d0 <line:2016:27, col:79> Text="       the handle on which a firmware volume protocol"
|   |   `-TextComment 0x561dff43b7f0 <line:2017:1, col:80> Text="                                 was produced for the firmware volume passed in."
|   |-ParagraphComment 0x561dff43b880 <line:2019:1, col:2>
|   | `-TextComment 0x561dff43b850 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff43b8a0 <col:3, line:2021:2> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|   | `-ParagraphComment 0x561dff43b980 <line:2019:31, line:2021:2>
|   |   |-TextComment 0x561dff43b900 <line:2019:31, col:79> Text="   if an FVB could not be produced due to lack of"
|   |   |-TextComment 0x561dff43b920 <line:2020:1, col:49> Text="                                 system resources"
|   |   `-TextComment 0x561dff43b940 <line:2021:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff43b9a0 <col:3, line:2022:2> Name="retval" Arg[0]="EFI_VOLUME_CORRUPTED"
|   | `-ParagraphComment 0x561dff43ba50 <line:2021:31, line:2022:2>
|   |   |-TextComment 0x561dff43ba00 <line:2021:31, col:60> Text="   if the volume was corrupted"
|   |   `-TextComment 0x561dff43ba20 <line:2022:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff43ba70 <col:3, line:2023:48> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff43bb10 <line:2022:22, line:2023:48>
|       |-TextComment 0x561dff43bac0 <line:2022:22, col:80> Text="            a firmware volume protocol was produced for the"
|       `-TextComment 0x561dff43bae0 <line:2023:1, col:48> Text="                                 firmware volume"
|-FunctionDecl 0x561dff40f710 <line:2043:1, line:2046:3> line:2044:1 invalid CoreDisplayMissingArchProtocols 'int ()'
| `-FullComment 0x561dff43bc70 <line:2039:1, line:2040:47>
|   `-ParagraphComment 0x561dff43bc40 <line:2039:1, line:2040:47>
|     |-TextComment 0x561dff43bbf0 <line:2039:1, col:80> Text="  Displays Architectural protocols that were not loaded and are required for DXE"
|     `-TextComment 0x561dff43bc10 <line:2040:1, col:47> Text="  core to function.  Only used in Debug Builds."
|-FunctionDecl 0x561dff40f800 <line:2053:1, line:2056:3> line:2054:1 invalid CoreDisplayDiscoveredNotDispatched 'int ()'
| `-FullComment 0x561dff43bd60 <line:2049:1, line:2050:57>
|   `-ParagraphComment 0x561dff43bd30 <line:2049:1, line:2050:57>
|     |-TextComment 0x561dff43bce0 <line:2049:1, col:82> Text="  Traverse the discovered list for any drivers that were discovered but not loaded"
|     `-TextComment 0x561dff43bd00 <line:2050:1, col:57> Text="  because the dependency experessions evaluated to false."
|-VarDecl 0x561dff40f8e0 <line:2067:1, line:2068:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff43c040 <line:2059:1, line:2064:31>
|   |-ParagraphComment 0x561dff43be20 <line:2059:1, line:2060:12>
|   | |-TextComment 0x561dff43bdd0 <line:2059:1, col:76> Text="  Place holder function until all the Boot Services and Runtime Services are"
|   | `-TextComment 0x561dff43bdf0 <line:2060:1, col:12> Text="  available."
|   |-ParagraphComment 0x561dff43be70 <line:2062:1, col:2>
|   | `-TextComment 0x561dff43be40 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43be90 <col:3, col:42> [in] implicitly Param="Arg1"
|   | `-ParagraphComment 0x561dff43bf20 <col:15, col:42>
|   |   `-TextComment 0x561dff43bef0 <col:15, col:42> Text="                   Undefined"
|   |-ParagraphComment 0x561dff43bf70 <line:2064:1, col:2>
|   | `-TextComment 0x561dff43bf40 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff43bf90 <col:3, col:31> Name="return"
|     `-ParagraphComment 0x561dff43bff0 <col:10, col:31>
|       `-TextComment 0x561dff43bfc0 <col:10, col:31> Text=" EFI_NOT_AVAILABLE_YET"
|-VarDecl 0x561dff40f990 <line:2082:1, line:2083:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff43c3d0 <line:2074:1, line:2079:31>
|   |-ParagraphComment 0x561dff43c0e0 <line:2074:1, col:87>
|   | `-TextComment 0x561dff43c0b0 <col:1, col:87> Text="  Place holder function until all the Boot Services and Runtime Services are available."
|   |-ParagraphComment 0x561dff43c130 <line:2076:1, col:2>
|   | `-TextComment 0x561dff43c100 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43c150 <col:3, line:2077:2> [in] implicitly Param="Arg1"
|   | `-ParagraphComment 0x561dff43c200 <line:2076:15, line:2077:2>
|   |   |-TextComment 0x561dff43c1b0 <line:2076:15, col:42> Text="                   Undefined"
|   |   `-TextComment 0x561dff43c1d0 <line:2077:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43c220 <col:3, col:42> [in] implicitly Param="Arg2"
|   | `-ParagraphComment 0x561dff43c2b0 <col:15, col:42>
|   |   `-TextComment 0x561dff43c280 <col:15, col:42> Text="                   Undefined"
|   |-ParagraphComment 0x561dff43c300 <line:2079:1, col:2>
|   | `-TextComment 0x561dff43c2d0 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff43c320 <col:3, col:31> Name="return"
|     `-ParagraphComment 0x561dff43c380 <col:10, col:31>
|       `-TextComment 0x561dff43c350 <col:10, col:31> Text=" EFI_NOT_AVAILABLE_YET"
|-VarDecl 0x561dff410330 <line:2099:1, line:2100:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff43c860 <line:2090:1, line:2096:31>
|   |-ParagraphComment 0x561dff43c470 <line:2090:1, col:87>
|   | `-TextComment 0x561dff43c440 <col:1, col:87> Text="  Place holder function until all the Boot Services and Runtime Services are available."
|   |-ParagraphComment 0x561dff43c4c0 <line:2092:1, col:2>
|   | `-TextComment 0x561dff43c490 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43c4e0 <col:3, line:2093:2> [in] implicitly Param="Arg1"
|   | `-ParagraphComment 0x561dff43c590 <line:2092:15, line:2093:2>
|   |   |-TextComment 0x561dff43c540 <line:2092:15, col:42> Text="                   Undefined"
|   |   `-TextComment 0x561dff43c560 <line:2093:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43c5b0 <col:3, line:2094:2> [in] implicitly Param="Arg2"
|   | `-ParagraphComment 0x561dff43c660 <line:2093:15, line:2094:2>
|   |   |-TextComment 0x561dff43c610 <line:2093:15, col:42> Text="                   Undefined"
|   |   `-TextComment 0x561dff43c630 <line:2094:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43c680 <col:3, col:42> [in] implicitly Param="Arg3"
|   | `-ParagraphComment 0x561dff43c710 <col:15, col:42>
|   |   `-TextComment 0x561dff43c6e0 <col:15, col:42> Text="                   Undefined"
|   |-ParagraphComment 0x561dff43c760 <line:2096:1, col:2>
|   | `-TextComment 0x561dff43c730 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff43c780 <col:3, col:31> Name="return"
|     `-ParagraphComment 0x561dff43c7e0 <col:10, col:31>
|       `-TextComment 0x561dff43c7b0 <col:10, col:31> Text=" EFI_NOT_AVAILABLE_YET"
|-VarDecl 0x561dff4103e0 <line:2118:1, line:2119:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff43cda0 <line:2108:1, line:2115:31>
|   |-ParagraphComment 0x561dff43c900 <line:2108:1, col:87>
|   | `-TextComment 0x561dff43c8d0 <col:1, col:87> Text="  Place holder function until all the Boot Services and Runtime Services are available."
|   |-ParagraphComment 0x561dff43c950 <line:2110:1, col:2>
|   | `-TextComment 0x561dff43c920 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43c970 <col:3, line:2111:2> [in] implicitly Param="Arg1"
|   | `-ParagraphComment 0x561dff43ca20 <line:2110:15, line:2111:2>
|   |   |-TextComment 0x561dff43c9d0 <line:2110:15, col:42> Text="                   Undefined"
|   |   `-TextComment 0x561dff43c9f0 <line:2111:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43ca40 <col:3, line:2112:2> [in] implicitly Param="Arg2"
|   | `-ParagraphComment 0x561dff43caf0 <line:2111:15, line:2112:2>
|   |   |-TextComment 0x561dff43caa0 <line:2111:15, col:42> Text="                   Undefined"
|   |   `-TextComment 0x561dff43cac0 <line:2112:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43cb10 <col:3, line:2113:2> [in] implicitly Param="Arg3"
|   | `-ParagraphComment 0x561dff43cbc0 <line:2112:15, line:2113:2>
|   |   |-TextComment 0x561dff43cb70 <line:2112:15, col:42> Text="                   Undefined"
|   |   `-TextComment 0x561dff43cb90 <line:2113:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43cbe0 <col:3, col:42> [in] implicitly Param="Arg4"
|   | `-ParagraphComment 0x561dff43cc70 <col:15, col:42>
|   |   `-TextComment 0x561dff43cc40 <col:15, col:42> Text="                   Undefined"
|   |-ParagraphComment 0x561dff43ccc0 <line:2115:1, col:2>
|   | `-TextComment 0x561dff43cc90 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff43cce0 <col:3, col:31> Name="return"
|     `-ParagraphComment 0x561dff43cd40 <col:10, col:31>
|       `-TextComment 0x561dff43cd10 <col:10, col:31> Text=" EFI_NOT_AVAILABLE_YET"
|-VarDecl 0x561dff410490 <line:2139:1, line:2140:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff43d3c0 <line:2128:1, line:2136:31>
|   |-ParagraphComment 0x561dff43ce40 <line:2128:1, col:87>
|   | `-TextComment 0x561dff43ce10 <col:1, col:87> Text="  Place holder function until all the Boot Services and Runtime Services are available."
|   |-ParagraphComment 0x561dff43ce90 <line:2130:1, col:2>
|   | `-TextComment 0x561dff43ce60 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43ceb0 <col:3, line:2131:2> [in] implicitly Param="Arg1"
|   | `-ParagraphComment 0x561dff43cf60 <line:2130:15, line:2131:2>
|   |   |-TextComment 0x561dff43cf10 <line:2130:15, col:42> Text="                   Undefined"
|   |   `-TextComment 0x561dff43cf30 <line:2131:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43cf80 <col:3, line:2132:2> [in] implicitly Param="Arg2"
|   | `-ParagraphComment 0x561dff43d030 <line:2131:15, line:2132:2>
|   |   |-TextComment 0x561dff43cfe0 <line:2131:15, col:42> Text="                   Undefined"
|   |   `-TextComment 0x561dff43d000 <line:2132:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43d050 <col:3, line:2133:2> [in] implicitly Param="Arg3"
|   | `-ParagraphComment 0x561dff43d100 <line:2132:15, line:2133:2>
|   |   |-TextComment 0x561dff43d0b0 <line:2132:15, col:42> Text="                   Undefined"
|   |   `-TextComment 0x561dff43d0d0 <line:2133:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43d120 <col:3, line:2134:2> [in] implicitly Param="Arg4"
|   | `-ParagraphComment 0x561dff43d1d0 <line:2133:15, line:2134:2>
|   |   |-TextComment 0x561dff43d180 <line:2133:15, col:42> Text="                   Undefined"
|   |   `-TextComment 0x561dff43d1a0 <line:2134:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43d1f0 <col:3, col:42> [in] implicitly Param="Arg5"
|   | `-ParagraphComment 0x561dff43d280 <col:15, col:42>
|   |   `-TextComment 0x561dff43d250 <col:15, col:42> Text="                   Undefined"
|   |-ParagraphComment 0x561dff43d2d0 <line:2136:1, col:2>
|   | `-TextComment 0x561dff43d2a0 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff43d2f0 <col:3, col:31> Name="return"
|     `-ParagraphComment 0x561dff43d350 <col:10, col:31>
|       `-TextComment 0x561dff43d320 <col:10, col:31> Text=" EFI_NOT_AVAILABLE_YET"
|-VarDecl 0x561dff410540 <line:2188:1, line:2189:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff43df00 <line:2150:1, line:2185:43>
|   |-ParagraphComment 0x561dff43d4b0 <line:2150:1, line:2152:31>
|   | |-TextComment 0x561dff43d430 <line:2150:1, col:75> Text="  Given a compressed source buffer, this function retrieves the size of the"
|   | |-TextComment 0x561dff43d450 <line:2151:1, col:79> Text="  uncompressed buffer and the size of the scratch buffer required to decompress"
|   | `-TextComment 0x561dff43d470 <line:2152:1, col:31> Text="  the compressed source buffer."
|   |-ParagraphComment 0x561dff43d6b0 <line:2154:1, line:2165:17>
|   | |-TextComment 0x561dff43d4d0 <line:2154:1, col:78> Text="  The GetInfo() function retrieves the size of the uncompressed buffer and the"
|   | |-TextComment 0x561dff43d4f0 <line:2155:1, col:80> Text="  temporary scratch buffer required to decompress the buffer specified by Source"
|   | |-TextComment 0x561dff43d510 <line:2156:1, col:75> Text="  and SourceSize. If the size of the uncompressed buffer or the size of the"
|   | |-TextComment 0x561dff43d530 <line:2157:1, col:75> Text="  scratch buffer cannot be determined from the compressed data specified by"
|   | |-TextComment 0x561dff43d550 <line:2158:1, col:79> Text="  Source and SourceData, then EFI_INVALID_PARAMETER is returned. Otherwise, the"
|   | |-TextComment 0x561dff43d570 <line:2159:1, col:77> Text="  size of the uncompressed buffer is returned in DestinationSize, the size of"
|   | |-TextComment 0x561dff43d590 <line:2160:1, col:77> Text="  the scratch buffer is returned in ScratchSize, and EFI_SUCCESS is returned."
|   | |-TextComment 0x561dff43d5b0 <line:2161:1, col:76> Text="  The GetInfo() function does not have scratch buffer available to perform a"
|   | |-TextComment 0x561dff43d5d0 <line:2162:1, col:77> Text="  thorough checking of the validity of the source data. It just retrieves the"
|   | |-TextComment 0x561dff43d5f0 <line:2163:1, col:78> Text="  "Original Size" field from the beginning bytes of the source data and output"
|   | |-TextComment 0x561dff43d610 <line:2164:1, col:73> Text="  it as DestinationSize. And ScratchSize is specific to the decompression"
|   | `-TextComment 0x561dff43d630 <line:2165:1, col:17> Text="  implementation."
|   |-ParagraphComment 0x561dff43d700 <line:2167:1, col:2>
|   | `-TextComment 0x561dff43d6d0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43d720 <col:3, line:2168:2> [in] implicitly Param="This"
|   | `-ParagraphComment 0x561dff43d7d0 <line:2167:15, line:2168:2>
|   |   |-TextComment 0x561dff43d780 <line:2167:15, col:79> Text="               A pointer to the EFI_DECOMPRESS_PROTOCOL instance."
|   |   `-TextComment 0x561dff43d7a0 <line:2168:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43d7f0 <col:3, line:2169:2> [in] implicitly Param="Source"
|   | `-ParagraphComment 0x561dff43d8c0 <line:2168:17, line:2169:2>
|   |   |-TextComment 0x561dff43d870 <line:2168:17, col:78> Text="             The source buffer containing the compressed data."
|   |   `-TextComment 0x561dff43d890 <line:2169:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43d8e0 <col:3, line:2170:2> [in] implicitly Param="SourceSize"
|   | `-ParagraphComment 0x561dff43d990 <line:2169:21, line:2170:2>
|   |   |-TextComment 0x561dff43d940 <line:2169:21, col:70> Text="         The size, in bytes, of the source buffer."
|   |   `-TextComment 0x561dff43d960 <line:2170:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43d9b0 <col:3, line:2174:2> [in] implicitly Param="DestinationSize"
|   | `-ParagraphComment 0x561dff43dae0 <line:2170:26, line:2174:2>
|   |   |-TextComment 0x561dff43da10 <line:2170:26, col:68> Text="    A pointer to the size, in bytes, of the"
|   |   |-TextComment 0x561dff43da30 <line:2171:1, col:80> Text="                             uncompressed buffer that will be generated when the"
|   |   |-TextComment 0x561dff43da50 <line:2172:1, col:70> Text="                             compressed buffer specified by Source and"
|   |   |-TextComment 0x561dff43da70 <line:2173:1, col:56> Text="                             SourceSize is decompressed."
|   |   `-TextComment 0x561dff43da90 <line:2174:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43db00 <col:3, line:2177:40> [in] implicitly Param="ScratchSize"
|   | `-ParagraphComment 0x561dff43dc00 <line:2174:22, line:2177:40>
|   |   |-TextComment 0x561dff43db60 <line:2174:22, col:76> Text="        A pointer to the size, in bytes, of the scratch"
|   |   |-TextComment 0x561dff43db80 <line:2175:1, col:70> Text="                             buffer that is required to decompress the"
|   |   |-TextComment 0x561dff43dba0 <line:2176:1, col:70> Text="                             compressed buffer specified by Source and"
|   |   `-TextComment 0x561dff43dbc0 <line:2177:1, col:40> Text="                             SourceSize."
|   |-ParagraphComment 0x561dff43dc50 <line:2179:1, col:2>
|   | `-TextComment 0x561dff43dc20 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff43dc70 <col:3, line:2182:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff43dd60 <line:2179:22, line:2182:2>
|   |   |-TextComment 0x561dff43dcc0 <line:2179:22, col:78> Text="        The size of the uncompressed data was returned in"
|   |   |-TextComment 0x561dff43dce0 <line:2180:1, col:79> Text="                             DestinationSize and the size of the scratch buffer"
|   |   |-TextComment 0x561dff43dd00 <line:2181:1, col:57> Text="                             was returned in ScratchSize."
|   |   `-TextComment 0x561dff43dd20 <line:2182:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff43dd80 <col:3, line:2185:43> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|     `-ParagraphComment 0x561dff43de80 <line:2182:32, line:2185:43>
|       |-TextComment 0x561dff43dde0 <line:2182:32, col:80> Text=" The size of the uncompressed data or the size of"
|       |-TextComment 0x561dff43de00 <line:2183:1, col:80> Text="                                the scratch buffer cannot be determined from the"
|       |-TextComment 0x561dff43de20 <line:2184:1, col:71> Text="                                compressed data specified by Source and"
|       `-TextComment 0x561dff43de40 <line:2185:1, col:43> Text="                                SourceSize."
|-VarDecl 0x561dff4105f0 <line:2232:1, line:2233:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff43eae0 <line:2199:1, line:2229:52>
|   |-ParagraphComment 0x561dff43dfa0 <line:2199:1, col:42>
|   | `-TextComment 0x561dff43df70 <col:1, col:42> Text="  Decompresses a compressed source buffer."
|   |-ParagraphComment 0x561dff43e150 <line:2201:1, line:2210:71>
|   | |-TextComment 0x561dff43dfc0 <line:2201:1, col:76> Text="  The Decompress() function extracts decompressed data to its original form."
|   | |-TextComment 0x561dff43dfe0 <line:2202:1, col:70> Text="  This protocol is designed so that the decompression algorithm can be"
|   | |-TextComment 0x561dff43e000 <line:2203:1, col:78> Text="  implemented without using any memory services. As a result, the Decompress()"
|   | |-TextComment 0x561dff43e020 <line:2204:1, col:74> Text="  Function is not allowed to call AllocatePool() or AllocatePages() in its"
|   | |-TextComment 0x561dff43e040 <line:2205:1, col:76> Text="  implementation. It is the caller's responsibility to allocate and free the"
|   | |-TextComment 0x561dff43e060 <line:2206:1, col:34> Text="  Destination and Scratch buffers."
|   | |-TextComment 0x561dff43e080 <line:2207:1, col:69> Text="  If the compressed source data specified by Source and SourceSize is"
|   | |-TextComment 0x561dff43e0a0 <line:2208:1, col:77> Text="  sucessfully decompressed into Destination, then EFI_SUCCESS is returned. If"
|   | |-TextComment 0x561dff43e0c0 <line:2209:1, col:75> Text="  the compressed source data specified by Source and SourceSize is not in a"
|   | `-TextComment 0x561dff43e0e0 <line:2210:1, col:71> Text="  valid compressed data format, then EFI_INVALID_PARAMETER is returned."
|   |-ParagraphComment 0x561dff43e1a0 <line:2212:1, col:2>
|   | `-TextComment 0x561dff43e170 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43e1c0 <col:3, line:2213:2> [in] implicitly Param="This"
|   | `-ParagraphComment 0x561dff43e270 <line:2212:15, line:2213:2>
|   |   |-TextComment 0x561dff43e220 <line:2212:15, col:80> Text="                A pointer to the EFI_DECOMPRESS_PROTOCOL instance."
|   |   `-TextComment 0x561dff43e240 <line:2213:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43e290 <col:3, line:2214:2> [in] implicitly Param="Source"
|   | `-ParagraphComment 0x561dff43e340 <line:2213:17, line:2214:2>
|   |   |-TextComment 0x561dff43e2f0 <line:2213:17, col:79> Text="              The source buffer containing the compressed data."
|   |   `-TextComment 0x561dff43e310 <line:2214:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43e360 <col:3, line:2215:2> [in] implicitly Param="SourceSize"
|   | `-ParagraphComment 0x561dff43e410 <line:2214:21, line:2215:2>
|   |   |-TextComment 0x561dff43e3c0 <line:2214:21, col:64> Text="          SourceSizeThe size of source data."
|   |   `-TextComment 0x561dff43e3e0 <line:2215:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43e430 <col:3, line:2217:2> [in] implicitly Param="Destination"
|   | `-ParagraphComment 0x561dff43e510 <line:2215:22, line:2217:2>
|   |   |-TextComment 0x561dff43e490 <line:2215:22, col:77> Text="         On output, the destination buffer that contains"
|   |   |-TextComment 0x561dff43e4b0 <line:2216:1, col:52> Text="                              the uncompressed data."
|   |   `-TextComment 0x561dff43e4d0 <line:2217:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43e530 <col:3, line:2220:2> [in] implicitly Param="DestinationSize"
|   | `-ParagraphComment 0x561dff43e630 <line:2217:26, line:2220:2>
|   |   |-TextComment 0x561dff43e590 <line:2217:26, col:78> Text="     The size of the destination buffer.  The size of"
|   |   |-TextComment 0x561dff43e5b0 <line:2218:1, col:76> Text="                              the destination buffer needed is obtained from"
|   |   |-TextComment 0x561dff43e5d0 <line:2219:1, col:64> Text="                              EFI_DECOMPRESS_PROTOCOL.GetInfo()."
|   |   `-TextComment 0x561dff43e5f0 <line:2220:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43e650 <col:3, line:2222:2> [in] implicitly Param="Scratch"
|   | `-ParagraphComment 0x561dff43e730 <line:2220:18, line:2222:2>
|   |   |-TextComment 0x561dff43e6b0 <line:2220:18, col:80> Text="             A temporary scratch buffer that is used to perform"
|   |   |-TextComment 0x561dff43e6d0 <line:2221:1, col:48> Text="                              the decompression."
|   |   `-TextComment 0x561dff43e6f0 <line:2222:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43e750 <col:3, line:2223:79> [in] implicitly Param="ScratchSize"
|   | `-ParagraphComment 0x561dff43e800 <line:2222:22, line:2223:79>
|   |   |-TextComment 0x561dff43e7b0 <line:2222:22, col:73> Text="         The size of scratch buffer. The size of the"
|   |   `-TextComment 0x561dff43e7d0 <line:2223:1, col:79> Text="                              scratch buffer needed is obtained from GetInfo()."
|   |-ParagraphComment 0x561dff43e850 <line:2225:1, col:2>
|   | `-TextComment 0x561dff43e820 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff43e880 <col:3, line:2227:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff43e950 <line:2225:22, line:2227:2>
|   |   |-TextComment 0x561dff43e8d0 <line:2225:22, col:75> Text="         Decompression completed successfully, and the"
|   |   |-TextComment 0x561dff43e8f0 <line:2226:1, col:77> Text="                              uncompressed buffer is returned in Destination."
|   |   `-TextComment 0x561dff43e910 <line:2227:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff43e970 <col:3, line:2229:52> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|     `-ParagraphComment 0x561dff43ea50 <line:2227:32, line:2229:52>
|       |-TextComment 0x561dff43e9d0 <line:2227:32, col:74> Text="  The source buffer specified by Source and"
|       |-TextComment 0x561dff43e9f0 <line:2228:1, col:72> Text="                                 SourceSize is corrupted (not in a valid"
|       `-TextComment 0x561dff43ea10 <line:2229:1, col:52> Text="                                 compressed format)."
|-VarDecl 0x561dff4106a0 <line:2259:1, line:2260:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff43f1a0 <line:2245:1, line:2256:49>
|   |-ParagraphComment 0x561dff43eba0 <line:2245:1, line:2246:45>
|   | |-TextComment 0x561dff43eb50 <line:2245:1, col:78> Text="  SEP member function.  This function creates and returns a new section stream"
|   | `-TextComment 0x561dff43eb70 <line:2246:1, col:45> Text="  handle to represent the new section stream."
|   |-ParagraphComment 0x561dff43ebf0 <line:2248:1, col:2>
|   | `-TextComment 0x561dff43ebc0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43ec10 <col:3, line:2249:2> [in] implicitly Param="SectionStreamLength"
|   | `-ParagraphComment 0x561dff43ecd0 <line:2248:30, line:2249:2>
|   |   |-TextComment 0x561dff43ec80 <line:2248:30, col:69> Text="    Size in bytes of the section stream."
|   |   `-TextComment 0x561dff43eca0 <line:2249:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43ecf0 <col:3, line:2250:2> [in] implicitly Param="SectionStream"
|   | `-ParagraphComment 0x561dff43eda0 <line:2249:24, line:2250:2>
|   |   |-TextComment 0x561dff43ed50 <line:2249:24, col:74> Text="          Buffer containing the new section stream."
|   |   `-TextComment 0x561dff43ed70 <line:2250:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43edc0 <col:3, line:2251:79> [in] implicitly Param="SectionStreamHandle"
|   | `-ParagraphComment 0x561dff43ee80 <line:2250:30, line:2251:79>
|   |   |-TextComment 0x561dff43ee30 <line:2250:30, col:78> Text="    A pointer to a caller allocated UINTN that on"
|   |   `-TextComment 0x561dff43ee50 <line:2251:1, col:79> Text="                                 output contains the new section stream handle."
|   |-ParagraphComment 0x561dff43eed0 <line:2253:1, col:2>
|   | `-TextComment 0x561dff43eea0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff43eef0 <col:3, line:2254:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff43ef90 <line:2253:22, line:2254:2>
|   |   |-TextComment 0x561dff43ef40 <line:2253:22, col:76> Text="            The section stream is created successfully."
|   |   `-TextComment 0x561dff43ef60 <line:2254:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff43efb0 <col:3, line:2255:2> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|   | `-ParagraphComment 0x561dff43f060 <line:2254:31, line:2255:2>
|   |   |-TextComment 0x561dff43f010 <line:2254:31, col:58> Text="   memory allocation failed."
|   |   `-TextComment 0x561dff43f030 <line:2255:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff43f080 <col:3, line:2256:49> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|     `-ParagraphComment 0x561dff43f130 <line:2255:32, line:2256:49>
|       |-TextComment 0x561dff43f0e0 <line:2255:32, col:79> Text="  Section stream does not end concident with end"
|       `-TextComment 0x561dff43f100 <line:2256:1, col:49> Text="                                 of last section."
|-VarDecl 0x561dff410750 <line:2325:1, line:2326:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff440590 <line:2268:1, line:2322:46>
|   |-ParagraphComment 0x561dff43f240 <line:2268:1, col:72>
|   | `-TextComment 0x561dff43f210 <col:1, col:72> Text="  SEP member function.  Retrieves requested section from section stream."
|   |-ParagraphComment 0x561dff43f290 <line:2270:1, col:2>
|   | `-TextComment 0x561dff43f260 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43f2b0 <col:3, line:2272:2> [in] implicitly Param="SectionStreamHandle"
|   | `-ParagraphComment 0x561dff43f3a0 <line:2270:30, line:2272:2>
|   |   |-TextComment 0x561dff43f320 <line:2270:30, col:76> Text="   The section stream from which to extract the"
|   |   |-TextComment 0x561dff43f340 <line:2271:1, col:50> Text="                                requested section."
|   |   `-TextComment 0x561dff43f360 <line:2272:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43f3c0 <col:3, line:2273:2> [in] implicitly Param="SectionType"
|   | `-ParagraphComment 0x561dff43f470 <line:2272:22, line:2273:2>
|   |   |-TextComment 0x561dff43f420 <line:2272:22, col:79> Text="           A pointer to the type of section to search for."
|   |   `-TextComment 0x561dff43f440 <line:2273:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43f490 <col:3, line:2276:2> [in] implicitly Param="SectionDefinitionGuid"
|   | `-ParagraphComment 0x561dff43f5a0 <line:2273:32, line:2276:2>
|   |   |-TextComment 0x561dff43f500 <line:2273:32, col:80> Text=" If the section type is EFI_SECTION_GUID_DEFINED,"
|   |   |-TextComment 0x561dff43f520 <line:2274:1, col:77> Text="                                then SectionDefinitionGuid indicates which of"
|   |   |-TextComment 0x561dff43f540 <line:2275:1, col:70> Text="                                these types of sections to search for."
|   |   `-TextComment 0x561dff43f560 <line:2276:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43f5c0 <col:3, line:2278:2> [in] implicitly Param="SectionInstance"
|   | `-ParagraphComment 0x561dff43f6a0 <line:2276:26, line:2278:2>
|   |   |-TextComment 0x561dff43f620 <line:2276:26, col:73> Text="       Indicates which instance of the requested"
|   |   |-TextComment 0x561dff43f640 <line:2277:1, col:50> Text="                                section to return."
|   |   `-TextComment 0x561dff43f660 <line:2278:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43f6c0 <col:3, line:2283:2> [in] implicitly Param="Buffer"
|   | `-ParagraphComment 0x561dff43f810 <line:2278:17, line:2283:2>
|   |   |-TextComment 0x561dff43f720 <line:2278:17, col:76> Text="                Double indirection to buffer.  If *Buffer is"
|   |   |-TextComment 0x561dff43f740 <line:2279:1, col:76> Text="                                non-null on input, then the buffer is caller"
|   |   |-TextComment 0x561dff43f760 <line:2280:1, col:78> Text="                                allocated.  If Buffer is NULL, then the buffer"
|   |   |-TextComment 0x561dff43f780 <line:2281:1, col:73> Text="                                is callee allocated.  In either case, the"
|   |   |-TextComment 0x561dff43f7a0 <line:2282:1, col:80> Text="                                required buffer size is returned in *BufferSize."
|   |   `-TextComment 0x561dff43f7c0 <line:2283:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43f830 <col:3, line:2287:2> [in] implicitly Param="BufferSize"
|   | `-ParagraphComment 0x561dff43f980 <line:2283:21, line:2287:2>
|   |   |-TextComment 0x561dff43f8b0 <line:2283:21, col:74> Text="            On input, indicates the size of *Buffer if"
|   |   |-TextComment 0x561dff43f8d0 <line:2284:34, col:73> Text="Buffer is non-null on input.  On output,"
|   |   |-TextComment 0x561dff43f8f0 <line:2285:1, col:78> Text="                                indicates the required size (allocated size if"
|   |   |-TextComment 0x561dff43f910 <line:2286:1, col:61> Text="                                callee allocated) of *Buffer."
|   |   `-TextComment 0x561dff43f930 <line:2287:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43f9a0 <col:3, line:2303:2> [in] implicitly Param="AuthenticationStatus"
|   | `-ParagraphComment 0x561dff43fcc0 <line:2287:31, line:2303:2>
|   |   |-TextComment 0x561dff43fa10 <line:2287:31, col:75> Text="  A pointer to a caller-allocated UINT32 that"
|   |   |-TextComment 0x561dff43fa30 <line:2288:1, col:74> Text="                                indicates the authentication status of the"
|   |   |-TextComment 0x561dff43fa50 <line:2289:1, col:69> Text="                                output buffer. If the input section's"
|   |   |-TextComment 0x561dff43fa70 <line:2290:1, col:68> Text="                                GuidedSectionHeader.Attributes field"
|   |   |-TextComment 0x561dff43fa90 <line:2291:1, col:76> Text="                                has the EFI_GUIDED_SECTION_AUTH_STATUS_VALID"
|   |   |-TextComment 0x561dff43fab0 <line:2292:1, col:78> Text="                                bit as clear, AuthenticationStatus must return"
|   |   |-TextComment 0x561dff43fad0 <line:2293:1, col:75> Text="                                zero. Both local bits (19:16) and aggregate"
|   |   |-TextComment 0x561dff43faf0 <line:2294:1, col:79> Text="                                bits (3:0) in AuthenticationStatus are returned"
|   |   |-TextComment 0x561dff43fb10 <line:2295:1, col:75> Text="                                by ExtractSection(). These bits reflect the"
|   |   |-TextComment 0x561dff43fb30 <line:2296:1, col:75> Text="                                status of the extraction operation. The bit"
|   |   |-TextComment 0x561dff43fb50 <line:2297:1, col:76> Text="                                pattern in both regions must be the same, as"
|   |   |-TextComment 0x561dff43fb70 <line:2298:1, col:79> Text="                                the local and aggregate authentication statuses"
|   |   |-TextComment 0x561dff43fb90 <line:2299:1, col:77> Text="                                have equivalent meaning at this level. If the"
|   |   |-TextComment 0x561dff43fbb0 <line:2300:1, col:68> Text="                                function returns anything other than"
|   |   |-TextComment 0x561dff43fbd0 <line:2301:1, col:79> Text="                                EFI_SUCCESS, the value of *AuthenticationStatus"
|   |   |-TextComment 0x561dff43fbf0 <line:2302:1, col:45> Text="                                is undefined."
|   |   `-TextComment 0x561dff43fc10 <line:2303:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff43fce0 <col:3, col:56> [in] implicitly Param="IsFfs3Fv"
|   | `-ParagraphComment 0x561dff43fd70 <col:19, col:56>
|   |   `-TextComment 0x561dff43fd40 <col:19, col:56> Text="              Indicates the FV format."
|   |-ParagraphComment 0x561dff43fdc0 <line:2305:1, col:2>
|   | `-TextComment 0x561dff43fd90 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff43fde0 <col:3, line:2306:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff43fe80 <line:2305:22, line:2306:2>
|   |   |-TextComment 0x561dff43fe30 <line:2305:22, col:66> Text="           Section was retrieved successfully"
|   |   `-TextComment 0x561dff43fe50 <line:2306:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff43fea0 <col:3, line:2312:2> Name="retval" Arg[0]="EFI_PROTOCOL_ERROR"
|   | `-ParagraphComment 0x561dff440020 <line:2306:29, line:2312:2>
|   |   |-TextComment 0x561dff43ff00 <line:2306:29, col:77> Text="    A GUID defined section was encountered in the"
|   |   |-TextComment 0x561dff43ff20 <line:2307:1, col:55> Text="                                section stream with its"
|   |   |-TextComment 0x561dff43ff40 <line:2308:1, col:79> Text="                                EFI_GUIDED_SECTION_PROCESSING_REQUIRED bit set,"
|   |   |-TextComment 0x561dff43ff60 <line:2309:1, col:77> Text="                                but there was no corresponding GUIDed Section"
|   |   |-TextComment 0x561dff43ff80 <line:2310:1, col:75> Text="                                Extraction Protocol in the handle database."
|   |   |-TextComment 0x561dff43ffa0 <line:2311:34, col:54> Text="Buffer is unmodified."
|   |   `-TextComment 0x561dff43ffc0 <line:2312:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff440040 <col:3, line:2315:2> Name="retval" Arg[0]="EFI_NOT_FOUND"
|   | `-ParagraphComment 0x561dff440130 <line:2312:24, line:2315:2>
|   |   |-TextComment 0x561dff440090 <line:2312:24, col:73> Text="         An error was encountered when parsing the"
|   |   |-TextComment 0x561dff4400b0 <line:2313:1, col:80> Text="                                SectionStream.  This indicates the SectionStream"
|   |   |-TextComment 0x561dff4400d0 <line:2314:1, col:59> Text="                                is not correctly formatted."
|   |   `-TextComment 0x561dff4400f0 <line:2315:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff440150 <col:3, line:2316:2> Name="retval" Arg[0]="EFI_NOT_FOUND"
|   | `-ParagraphComment 0x561dff4401f0 <line:2315:24, line:2316:2>
|   |   |-TextComment 0x561dff4401a0 <line:2315:24, col:69> Text="         The requested section does not exist."
|   |   `-TextComment 0x561dff4401c0 <line:2316:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff440210 <col:3, line:2318:2> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|   | `-ParagraphComment 0x561dff4402f0 <line:2316:31, line:2318:2>
|   |   |-TextComment 0x561dff440270 <line:2316:31, col:80> Text="  The system has insufficient resources to process"
|   |   |-TextComment 0x561dff440290 <line:2317:1, col:44> Text="                                the request."
|   |   `-TextComment 0x561dff4402b0 <line:2318:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff440310 <col:3, line:2319:2> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|   | `-ParagraphComment 0x561dff4403c0 <line:2318:32, line:2319:2>
|   |   |-TextComment 0x561dff440370 <line:2318:32, col:71> Text=" The SectionStreamHandle does not exist."
|   |   `-TextComment 0x561dff440390 <line:2319:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff4403e0 <col:3, line:2322:46> Name="retval" Arg[0]="EFI_WARN_TOO_SMALL"
|     `-ParagraphComment 0x561dff4404e0 <line:2319:29, line:2322:46>
|       |-TextComment 0x561dff440440 <line:2319:29, col:80> Text="    The size of the caller allocated input buffer is"
|       |-TextComment 0x561dff440460 <line:2320:1, col:78> Text="                                insufficient to contain the requested section."
|       |-TextComment 0x561dff440480 <line:2321:1, col:79> Text="                                The input buffer is filled and section contents"
|       `-TextComment 0x561dff4404a0 <line:2322:1, col:46> Text="                                are truncated."
|-VarDecl 0x561dff410800 <line:2351:1, line:2352:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff440b60 <line:2339:1, line:2348:49>
|   |-ParagraphComment 0x561dff440630 <line:2339:1, col:58>
|   | `-TextComment 0x561dff440600 <col:1, col:58> Text="  SEP member function.  Deletes an existing section stream"
|   |-ParagraphComment 0x561dff440680 <line:2341:1, col:2>
|   | `-TextComment 0x561dff440650 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4406a0 <col:3, line:2342:2> [in] implicitly Param="StreamHandleToClose"
|   | `-ParagraphComment 0x561dff440760 <line:2341:30, line:2342:2>
|   |   |-TextComment 0x561dff440710 <line:2341:30, col:62> Text="    Indicates the stream to close"
|   |   `-TextComment 0x561dff440730 <line:2342:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff440780 <col:3, line:2343:71> [in] implicitly Param="FreeStreamBuffer"
|   | `-ParagraphComment 0x561dff440840 <line:2342:27, line:2343:71>
|   |   |-TextComment 0x561dff4407f0 <line:2342:27, col:67> Text="       TRUE - Need to free stream buffer;"
|   |   `-TextComment 0x561dff440810 <line:2343:1, col:71> Text="                                 FALSE - No need to free stream buffer."
|   |-ParagraphComment 0x561dff4408a0 <line:2345:1, col:2>
|   | `-TextComment 0x561dff440860 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4408c0 <col:3, line:2346:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff440960 <line:2345:22, line:2346:2>
|   |   |-TextComment 0x561dff440910 <line:2345:22, col:74> Text="            The section stream is closed sucessfully."
|   |   `-TextComment 0x561dff440930 <line:2346:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff440980 <col:3, line:2347:2> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|   | `-ParagraphComment 0x561dff440a30 <line:2346:31, line:2347:2>
|   |   |-TextComment 0x561dff4409e0 <line:2346:31, col:58> Text="   Memory allocation failed."
|   |   `-TextComment 0x561dff440a00 <line:2347:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff440a50 <col:3, line:2348:49> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|     `-ParagraphComment 0x561dff440b00 <line:2347:32, line:2348:49>
|       |-TextComment 0x561dff440ab0 <line:2347:32, col:79> Text="  Section stream does not end concident with end"
|       `-TextComment 0x561dff440ad0 <line:2348:1, col:49> Text="                                 of last section."
|-FunctionDecl 0x561dff4108c0 <line:2369:1, line:2372:3> line:2370:1 invalid CoreInitializeDebugImageInfoTable 'int ()'
| `-FullComment 0x561dff440d40 <line:2359:1, line:2366:17>
|   |-ParagraphComment 0x561dff440c20 <line:2359:1, line:2360:47>
|   | |-TextComment 0x561dff440bd0 <line:2359:1, col:83> Text="  Creates and initializes the DebugImageInfo Table.  Also creates the configuration"
|   | `-TextComment 0x561dff440bf0 <line:2360:1, col:47> Text="  table and registers it into the system table."
|   `-ParagraphComment 0x561dff440d10 <line:2362:1, line:2366:17>
|     |-TextComment 0x561dff440c40 <line:2362:1, col:7> Text="  Note:"
|     |-TextComment 0x561dff440c60 <line:2363:1, col:77> Text="    This function allocates memory, frees it, and then allocates memory at an"
|     |-TextComment 0x561dff440c80 <line:2364:1, col:78> Text="    address within the initial allocation. Since this function is called early"
|     |-TextComment 0x561dff440ca0 <line:2365:1, col:79> Text="    in DXE core initialization (before drivers are dispatched), this should not"
|     `-TextComment 0x561dff440cc0 <line:2366:1, col:17> Text="    be a problem."
|-FunctionDecl 0x561dff4109b0 <line:2382:1, line:2385:3> line:2383:1 invalid CoreUpdateDebugTableCrc32 'int ()'
| `-FullComment 0x561dff440eb0 <line:2375:1, line:2379:23>
|   `-ParagraphComment 0x561dff440e80 <line:2375:1, line:2379:23>
|     |-TextComment 0x561dff440db0 <line:2375:1, col:38> Text="  Update the CRC32 in the Debug Table."
|     |-TextComment 0x561dff440dd0 <line:2376:1, col:77> Text="  Since the CRC32 service is made available by the Runtime driver, we have to"
|     |-TextComment 0x561dff440df0 <line:2377:1, col:79> Text="  wait for the Runtime Driver to be installed before the CRC32 can be computed."
|     |-TextComment 0x561dff440e10 <line:2378:1, col:78> Text="  This function is called elsewhere by the core when the runtime architectural"
|     `-TextComment 0x561dff440e30 <line:2379:1, col:23> Text="  protocol is produced."
|-FunctionDecl 0x561dff410b28 <line:2397:1, line:2402:3> line:2398:1 invalid CoreNewDebugImageInfoEntry 'int (int)'
| |-ParmVarDecl 0x561dff410a90 <line:2399:3, col:7> col:7 invalid UINT32 'int'
| `-FullComment 0x561dff441290 <line:2388:1, line:2394:64>
|   |-ParagraphComment 0x561dff440f70 <line:2388:1, line:2389:65>
|   | |-TextComment 0x561dff440f20 <line:2388:1, col:80> Text="  Adds a new DebugImageInfo structure to the DebugImageInfo Table.  Re-Allocates"
|   | `-TextComment 0x561dff440f40 <line:2389:1, col:65> Text="  the table if it's not large enough to accomidate another entry."
|   |-ParagraphComment 0x561dff440fc0 <line:2391:1, col:2>
|   | `-TextComment 0x561dff440f90 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff440fe0 <col:3, line:2392:2> [in] implicitly Param="ImageInfoType"
|   | `-ParagraphComment 0x561dff441090 <line:2391:24, line:2392:2>
|   |   |-TextComment 0x561dff441040 <line:2391:24, col:56> Text="  type of debug image information"
|   |   `-TextComment 0x561dff441060 <line:2392:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4410b0 <col:3, line:2394:2> [in] implicitly Param="LoadedImage"
|   | `-ParagraphComment 0x561dff441190 <line:2392:22, line:2394:2>
|   |   |-TextComment 0x561dff441110 <line:2392:22, col:81> Text="    pointer to the loaded image protocol for the image being"
|   |   |-TextComment 0x561dff441130 <line:2393:1, col:31> Text="                         loaded"
|   |   `-TextComment 0x561dff441150 <line:2394:1, col:2> Text="  "
|   `-ParamCommandComment 0x561dff4411b0 <col:3, col:64> [in] implicitly Param="ImageHandle"
|     `-ParagraphComment 0x561dff441240 <col:22, col:64>
|       `-TextComment 0x561dff441210 <col:22, col:64> Text="    image handle for the image being loaded"
|-FunctionDecl 0x561dff410ca8 <line:2410:1, line:2413:3> line:2411:1 invalid CoreRemoveDebugImageInfoEntry 'int (int)'
| |-ParmVarDecl 0x561dff410c10 <line:2412:3, col:15> col:15 invalid ImageHandle 'int'
| `-FullComment 0x561dff441470 <line:2405:1, line:2407:66>
|   |-ParagraphComment 0x561dff441330 <line:2405:1, col:59>
|   | `-TextComment 0x561dff441300 <col:1, col:59> Text="  Removes and frees an entry from the DebugImageInfo Table."
|   |-ParagraphComment 0x561dff441380 <line:2407:1, col:2>
|   | `-TextComment 0x561dff441350 <col:1, col:2> Text="  "
|   `-ParamCommandComment 0x561dff4413a0 <col:3, col:66> [in] implicitly Param="ImageHandle" ParamIndex=0
|     `-ParagraphComment 0x561dff441430 <col:22, col:66>
|       `-TextComment 0x561dff441400 <col:22, col:66> Text="    image handle for the image being unloaded"
|-VarDecl 0x561dff410d90 <line:2425:1, line:2426:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff441840 <line:2416:1, line:2422:40>
|   |-ParagraphComment 0x561dff441510 <line:2416:1, col:95>
|   | `-TextComment 0x561dff4414e0 <col:1, col:95> Text="  This routine consumes FV hobs and produces instances of FW_VOL_BLOCK_PROTOCOL as appropriate."
|   |-ParagraphComment 0x561dff441560 <line:2418:1, col:2>
|   | `-TextComment 0x561dff441530 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff441580 <col:3, line:2419:2> [in] implicitly Param="ImageHandle"
|   | `-ParagraphComment 0x561dff441630 <line:2418:22, line:2419:2>
|   |   |-TextComment 0x561dff4415e0 <line:2418:22, col:50> Text="            The image handle."
|   |   `-TextComment 0x561dff441600 <line:2419:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff441650 <col:3, col:50> [in] implicitly Param="SystemTable"
|   | `-ParagraphComment 0x561dff4416e0 <col:22, col:50>
|   |   `-TextComment 0x561dff4416b0 <col:22, col:50> Text="            The system table."
|   |-ParagraphComment 0x561dff441730 <line:2421:1, col:2>
|   | `-TextComment 0x561dff441700 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff441750 <col:3, line:2422:40> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff4417f0 <line:2421:22, line:2422:40>
|       |-TextComment 0x561dff4417a0 <line:2421:22, col:79> Text="            Successfully initialized firmware volume block"
|       `-TextComment 0x561dff4417c0 <line:2422:1, col:40> Text="                                 driver."
|-FunctionDecl 0x561dff410ed8 <line:2441:1, line:2444:3> line:2442:1 invalid GetFvbAuthenticationStatus 'int (int)'
| |-ParmVarDecl 0x561dff410e40 <line:2443:3, col:6> col:6 invalid EFI_FIRMWARE_VOLUME_BLOCK_PROTOCOL 'int'
| `-FullComment 0x561dff441b40 <line:2434:1, line:2438:32>
|   |-ParagraphComment 0x561dff441920 <line:2434:1, col:31>
|   | `-TextComment 0x561dff4418f0 <col:1, col:31> Text="  Get FVB authentication status"
|   |-ParagraphComment 0x561dff441970 <line:2436:1, col:2>
|   | `-TextComment 0x561dff441940 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff441990 <col:3, col:37> [in] implicitly Param="FvbProtocol"
|   | `-ParagraphComment 0x561dff441a20 <col:21, col:37>
|   |   `-TextComment 0x561dff4419f0 <col:21, col:37> Text="    FVB protocol."
|   |-ParagraphComment 0x561dff441a70 <line:2438:1, col:2>
|   | `-TextComment 0x561dff441a40 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff441a90 <col:3, col:32> Name="return"
|     `-ParagraphComment 0x561dff441af0 <col:10, col:32>
|       `-TextComment 0x561dff441ac0 <col:10, col:32> Text=" Authentication status."
|-FunctionDecl 0x561dff411058 <line:2465:1, line:2472:3> line:2466:1 invalid ProduceFVBProtocolOnBuffer 'int (int)'
| |-ParmVarDecl 0x561dff410fc0 <line:2467:3, col:6> col:6 invalid EFI_PHYSICAL_ADDRESS 'int'
| `-FullComment 0x561dff442400 <line:2447:1, line:2462:40>
|   |-ParagraphComment 0x561dff441c00 <line:2447:1, line:2448:9>
|   | |-TextComment 0x561dff441bb0 <line:2447:1, col:67> Text="  This routine produces a firmware volume block protocol on a given"
|   | `-TextComment 0x561dff441bd0 <line:2448:1, col:9> Text="  buffer."
|   |-ParagraphComment 0x561dff441c50 <line:2450:1, col:2>
|   | `-TextComment 0x561dff441c20 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff441c70 <col:3, line:2451:2> [in] implicitly Param="BaseAddress"
|   | `-ParagraphComment 0x561dff441d20 <line:2450:22, line:2451:2>
|   |   |-TextComment 0x561dff441cd0 <line:2450:22, col:74> Text="            base address of the firmware volume image"
|   |   `-TextComment 0x561dff441cf0 <line:2451:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff441d40 <col:3, line:2452:2> [in] implicitly Param="Length"
|   | `-ParagraphComment 0x561dff441df0 <line:2451:17, line:2452:2>
|   |   |-TextComment 0x561dff441da0 <line:2451:17, col:68> Text="                 length of the firmware volume image"
|   |   `-TextComment 0x561dff441dc0 <line:2452:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff441e10 <col:3, line:2455:2> [in] implicitly Param="ParentHandle"
|   | `-ParagraphComment 0x561dff441f10 <line:2452:23, line:2455:2>
|   |   |-TextComment 0x561dff441e70 <line:2452:23, col:80> Text="           handle of parent firmware volume, if this image"
|   |   |-TextComment 0x561dff441e90 <line:2453:1, col:91> Text="                                 came from an FV image file and section in another firmware"
|   |   |-TextComment 0x561dff441eb0 <line:2454:1, col:54> Text="                                 volume (ala capsules)"
|   |   `-TextComment 0x561dff441ed0 <line:2455:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff441f30 <col:3, line:2457:2> [in] implicitly Param="AuthenticationStatus"
|   | `-ParagraphComment 0x561dff442020 <line:2455:31, line:2457:2>
|   |   |-TextComment 0x561dff441fa0 <line:2455:31, col:79> Text="   Authentication status inherited, if this image"
|   |   |-TextComment 0x561dff441fc0 <line:2456:1, col:99> Text="                                 came from an FV image file and section in another firmware volume."
|   |   `-TextComment 0x561dff441fe0 <line:2457:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff442040 <col:3, col:73> [in] implicitly Param="FvProtocol"
|   | `-ParagraphComment 0x561dff4420d0 <col:21, col:73>
|   |   `-TextComment 0x561dff4420a0 <col:21, col:73> Text="             Firmware volume block protocol produced."
|   |-ParagraphComment 0x561dff442120 <line:2459:1, col:2>
|   | `-TextComment 0x561dff4420f0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff442140 <col:3, line:2460:2> Name="retval" Arg[0]="EFI_VOLUME_CORRUPTED"
|   | `-ParagraphComment 0x561dff4421f0 <line:2459:31, line:2460:2>
|   |   |-TextComment 0x561dff4421a0 <line:2459:31, col:50> Text="   Volume corrupted."
|   |   `-TextComment 0x561dff4421c0 <line:2460:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff442210 <col:3, line:2461:2> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|   | `-ParagraphComment 0x561dff4422c0 <line:2460:31, line:2461:2>
|   |   |-TextComment 0x561dff442270 <line:2460:31, col:66> Text="   No enough buffer to be allocated."
|   |   `-TextComment 0x561dff442290 <line:2461:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff4422e0 <col:3, line:2462:40> Name="retval" Arg[0]="EFI_SUCCESS"
|     `-ParagraphComment 0x561dff442380 <line:2461:22, line:2462:40>
|       |-TextComment 0x561dff442330 <line:2461:22, col:78> Text="            Successfully produced a FVB protocol on given"
|       `-TextComment 0x561dff442350 <line:2462:1, col:40> Text="                                 buffer."
|-FunctionDecl 0x561dff4111d8 <line:2483:1, line:2486:3> line:2484:1 invalid CoreAcquireLock 'int (int)'
| |-ParmVarDecl 0x561dff411140 <line:2485:3, col:6> col:6 invalid EFI_LOCK 'int'
| `-FullComment 0x561dff4426e0 <line:2475:1, line:2480:20>
|   |-ParagraphComment 0x561dff4424c0 <line:2475:1, line:2476:48>
|   | |-TextComment 0x561dff442470 <line:2475:1, col:60> Text="  Raising to the task priority level of the mutual exclusion"
|   | `-TextComment 0x561dff442490 <line:2476:1, col:48> Text="  lock, and then acquires ownership of the lock."
|   |-ParagraphComment 0x561dff442510 <line:2478:1, col:2>
|   | `-TextComment 0x561dff4424e0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff442530 <col:3, col:48> [in] implicitly Param="Lock"
|   | `-ParagraphComment 0x561dff4425c0 <col:15, col:48>
|   |   `-TextComment 0x561dff442590 <col:15, col:48> Text="               The lock to acquire"
|   |-ParagraphComment 0x561dff442610 <line:2480:1, col:2>
|   | `-TextComment 0x561dff4425e0 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff442630 <col:3, col:20> Name="return"
|     `-ParagraphComment 0x561dff442690 <col:10, col:20>
|       `-TextComment 0x561dff442660 <col:10, col:20> Text=" Lock owned"
|-FunctionDecl 0x561dff4130b0 <line:2501:1, line:2504:3> line:2502:1 invalid CoreAcquireLockOrFail 'int (int)'
| |-ParmVarDecl 0x561dff4112c0 <line:2503:3, col:6> col:6 invalid EFI_LOCK 'int'
| `-FullComment 0x561dff442b60 <line:2489:1, line:2498:72>
|   |-ParagraphComment 0x561dff442820 <line:2489:1, line:2493:30>
|   | |-TextComment 0x561dff442750 <line:2489:1, col:55> Text="  Initialize a basic mutual exclusion lock.   Each lock"
|   | |-TextComment 0x561dff442770 <line:2490:1, col:56> Text="  provides mutual exclusion access at it's task priority"
|   | |-TextComment 0x561dff442790 <line:2491:1, col:53> Text="  level.  Since there is no-premption (at any TPL) or"
|   | |-TextComment 0x561dff4427b0 <line:2492:1, col:58> Text="  multiprocessor support, acquiring the lock only consists"
|   | `-TextComment 0x561dff4427d0 <line:2493:1, col:30> Text="  of raising to the locks TPL."
|   |-ParagraphComment 0x561dff442870 <line:2495:1, col:2>
|   | `-TextComment 0x561dff442840 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4428c0 <col:3, col:65> [in] implicitly Param="Lock"
|   | `-ParagraphComment 0x561dff442950 <col:15, col:65>
|   |   `-TextComment 0x561dff442920 <col:15, col:65> Text="               The EFI_LOCK structure to initialize"
|   |-ParagraphComment 0x561dff4429a0 <line:2497:1, col:2>
|   | `-TextComment 0x561dff442970 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4429c0 <col:3, line:2498:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff442a60 <line:2497:22, line:2498:2>
|   |   |-TextComment 0x561dff442a10 <line:2497:22, col:40> Text="        Lock Owned."
|   |   `-TextComment 0x561dff442a30 <line:2498:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff442a80 <col:3, col:72> Name="retval" Arg[0]="EFI_ACCESS_DENIED"
|     `-ParagraphComment 0x561dff442b10 <col:28, col:72>
|       `-TextComment 0x561dff442ae0 <col:28, col:72> Text="  Reentrant Lock Acquisition, Lock not Owned."
|-FunctionDecl 0x561dff413238 <line:2515:1, line:2518:3> line:2516:1 invalid CoreReleaseLock 'int (int)'
| |-ParmVarDecl 0x561dff4131a0 <line:2517:3, col:6> col:6 invalid EFI_LOCK 'int'
| `-FullComment 0x561dff442e40 <line:2507:1, line:2512:22>
|   |-ParagraphComment 0x561dff442c20 <line:2507:1, line:2508:44>
|   | |-TextComment 0x561dff442bd0 <line:2507:1, col:54> Text="  Releases ownership of the mutual exclusion lock, and"
|   | `-TextComment 0x561dff442bf0 <line:2508:1, col:44> Text="  restores the previous task priority level."
|   |-ParagraphComment 0x561dff442c70 <line:2510:1, col:2>
|   | `-TextComment 0x561dff442c40 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff442c90 <col:3, col:48> [in] implicitly Param="Lock"
|   | `-ParagraphComment 0x561dff442d20 <col:15, col:48>
|   |   `-TextComment 0x561dff442cf0 <col:15, col:48> Text="               The lock to release"
|   |-ParagraphComment 0x561dff442d70 <line:2512:1, col:2>
|   | `-TextComment 0x561dff442d40 <col:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff442d90 <col:3, col:22> Name="return"
|     `-ParagraphComment 0x561dff442df0 <col:10, col:22>
|       `-TextComment 0x561dff442dc0 <col:10, col:22> Text=" Lock unowned"
|-FunctionDecl 0x561dff4133b8 <line:2537:1, line:2544:3> line:2538:1 invalid ReadFvbData 'int (int)'
| |-ParmVarDecl 0x561dff413320 <line:2539:3, col:10> col:10 invalid EFI_FIRMWARE_VOLUME_BLOCK_PROTOCOL 'int'
| `-FullComment 0x561dff4435d0 <line:2521:1, line:2535:16>
|   |-ParagraphComment 0x561dff442f00 <line:2521:1, line:2522:44>
|   | |-TextComment 0x561dff442eb0 <line:2521:1, col:53> Text="  Read data from Firmware Block by FVB protocol Read."
|   | `-TextComment 0x561dff442ed0 <line:2522:1, col:44> Text="  The data may cross the multi block ranges."
|   |-ParagraphComment 0x561dff442f50 <line:2524:1, col:2>
|   | `-TextComment 0x561dff442f20 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff442f70 <col:3, line:2525:2> [in] implicitly Param="Fvb"
|   | `-ParagraphComment 0x561dff443020 <line:2524:14, line:2525:2>
|   |   |-TextComment 0x561dff442fd0 <line:2524:14, col:91> Text="                   The FW_VOL_BLOCK_PROTOCOL instance from which to read data."
|   |   `-TextComment 0x561dff442ff0 <line:2525:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff443040 <col:3, line:2528:2> [in] implicitly Param="StartLba"
|   | `-ParagraphComment 0x561dff443140 <line:2525:19, line:2528:2>
|   |   |-TextComment 0x561dff4430a0 <line:2525:19, col:52> Text="              Pointer to StartLba."
|   |   |-TextComment 0x561dff4430c0 <line:2526:1, col:91> Text="                                On input, the start logical block index from which to read."
|   |   |-TextComment 0x561dff4430e0 <line:2527:1, col:84> Text="                                On output,the end logical block index after reading."
|   |   `-TextComment 0x561dff443100 <line:2528:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff443160 <col:3, line:2531:2> [in] implicitly Param="Offset"
|   | `-ParagraphComment 0x561dff443260 <line:2528:17, line:2531:2>
|   |   |-TextComment 0x561dff4431c0 <line:2528:17, col:49> Text="                Pointer to Offset"
|   |   |-TextComment 0x561dff4431e0 <line:2529:1, col:90> Text="                                On input, offset into the block at which to begin reading."
|   |   |-TextComment 0x561dff443200 <line:2530:1, col:83> Text="                                On output, offset into the end block after reading."
|   |   `-TextComment 0x561dff443220 <line:2531:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff443280 <col:3, line:2532:2> [in] implicitly Param="DataSize"
|   | `-ParagraphComment 0x561dff443330 <line:2531:19, line:2532:2>
|   |   |-TextComment 0x561dff4432e0 <line:2531:19, col:56> Text="              Size of data to be read."
|   |   `-TextComment 0x561dff443300 <line:2532:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff443350 <col:3, col:82> [in] implicitly Param="Data"
|   | `-ParagraphComment 0x561dff4433e0 <col:15, col:82>
|   |   `-TextComment 0x561dff4433b0 <col:15, col:82> Text="                  Pointer to Buffer that the data will be read into."
|   |-ParagraphComment 0x561dff443430 <line:2534:1, col:2>
|   | `-TextComment 0x561dff443400 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff443450 <col:3, line:2535:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff4434f0 <line:2534:22, line:2535:2>
|   |   |-TextComment 0x561dff4434a0 <line:2534:22, col:75> Text="           Successfully read data from firmware block."
|   |   `-TextComment 0x561dff4434c0 <line:2535:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff443510 <col:3, col:16> Name="retval" Arg[0]="others"
|     `-ParagraphComment 0x561dff443560 <<invalid sloc>>
|-FunctionDecl 0x561dff413538 <line:2562:1, line:2566:3> line:2563:1 invalid GetFwVolHeader 'int (int)'
| |-ParmVarDecl 0x561dff4134a0 <line:2564:3, col:10> col:10 invalid EFI_FIRMWARE_VOLUME_BLOCK_PROTOCOL 'int'
| `-FullComment 0x561dff443c10 <line:2547:1, line:2559:72>
|   |-ParagraphComment 0x561dff443690 <line:2547:1, line:2548:45>
|   | |-TextComment 0x561dff443640 <line:2547:1, col:76> Text="  Given the supplied FW_VOL_BLOCK_PROTOCOL, allocate a buffer for output and"
|   | `-TextComment 0x561dff443660 <line:2548:1, col:45> Text="  copy the real length volume header into it."
|   |-ParagraphComment 0x561dff4436e0 <line:2550:1, col:2>
|   | `-TextComment 0x561dff4436b0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff443700 <col:3, line:2552:2> [in] implicitly Param="Fvb"
|   | `-ParagraphComment 0x561dff4437e0 <line:2550:14, line:2552:2>
|   |   |-TextComment 0x561dff443760 <line:2550:14, col:80> Text="                   The FW_VOL_BLOCK_PROTOCOL instance from which to"
|   |   |-TextComment 0x561dff443780 <line:2551:1, col:54> Text="                                read the volume header"
|   |   `-TextComment 0x561dff4437a0 <line:2552:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff443800 <col:3, line:2553:62> [in] implicitly Param="FwVolHeader"
|   | `-ParagraphComment 0x561dff4438d0 <line:2552:22, line:2553:62>
|   |   |-TextComment 0x561dff443860 <line:2552:22, col:79> Text="           Pointer to pointer to allocated buffer in which"
|   |   `-TextComment 0x561dff443880 <line:2553:1, col:62> Text="                                the volume header is returned."
|   |-ParagraphComment 0x561dff443920 <line:2555:1, col:2>
|   | `-TextComment 0x561dff4438f0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff443940 <col:3, line:2556:2> Name="retval" Arg[0]="EFI_OUT_OF_RESOURCES"
|   | `-ParagraphComment 0x561dff4439f0 <line:2555:31, line:2556:2>
|   |   |-TextComment 0x561dff4439a0 <line:2555:31, col:68> Text="  No enough buffer could be allocated."
|   |   `-TextComment 0x561dff4439c0 <line:2556:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff443a10 <col:3, line:2558:2> Name="retval" Arg[0]="EFI_SUCCESS"
|   | `-ParagraphComment 0x561dff443ae0 <line:2556:22, line:2558:2>
|   |   |-TextComment 0x561dff443a60 <line:2556:22, col:80> Text="           Successfully read volume header to the allocated"
|   |   |-TextComment 0x561dff443a80 <line:2557:1, col:39> Text="                                buffer."
|   |   `-TextComment 0x561dff443aa0 <line:2558:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff443b00 <col:3, line:2559:72> Name="retval" Arg[0]="EFI_INVALID_PARAMETER"
|     `-ParagraphComment 0x561dff443bb0 <line:2558:32, line:2559:72>
|       |-TextComment 0x561dff443b60 <line:2558:32, col:77> Text=" The FV Header signature is not as expected or"
|       `-TextComment 0x561dff443b80 <line:2559:1, col:72> Text="                                the file system could not be understood."
|-FunctionDecl 0x561dff4136b8 <line:2577:1, line:2580:3> line:2578:1 invalid VerifyFvHeaderChecksum 'int (int)'
| |-ParmVarDecl 0x561dff413620 <line:2579:3, col:6> col:6 invalid EFI_FIRMWARE_VOLUME_HEADER 'int'
| `-FullComment 0x561dff443fb0 <line:2569:1, line:2574:53>
|   |-ParagraphComment 0x561dff443cb0 <line:2569:1, col:48>
|   | `-TextComment 0x561dff443c80 <col:1, col:48> Text="  Verify checksum of the firmware volume header."
|   |-ParagraphComment 0x561dff443d00 <line:2571:1, col:2>
|   | `-TextComment 0x561dff443cd0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff443d20 <col:3, col:75> [in] implicitly Param="FvHeader"
|   | `-ParagraphComment 0x561dff443db0 <col:19, col:75>
|   |   `-TextComment 0x561dff443d80 <col:19, col:75> Text="       Points to the firmware volume header to be checked"
|   |-ParagraphComment 0x561dff443e00 <line:2573:1, col:2>
|   | `-TextComment 0x561dff443dd0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff443e20 <col:3, line:2574:2> Name="retval" Arg[0]="TRUE"
|   | `-ParagraphComment 0x561dff443ec0 <line:2573:15, line:2574:2>
|   |   |-TextComment 0x561dff443e70 <line:2573:15, col:53> Text="           Checksum verification passed"
|   |   `-TextComment 0x561dff443e90 <line:2574:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff443ee0 <col:3, col:53> Name="retval" Arg[0]="FALSE"
|     `-ParagraphComment 0x561dff443f60 <col:16, col:53>
|       `-TextComment 0x561dff443f30 <col:16, col:53> Text="          Checksum verification failed"
|-FunctionDecl 0x561dff413838 <line:2588:1, line:2591:3> line:2589:1 invalid MemoryProfileInit 'int (int)'
| |-ParmVarDecl 0x561dff4137a0 <line:2590:3, col:6> col:6 invalid VOID 'int'
| `-FullComment 0x561dff444190 <line:2583:1, line:2585:49>
|   |-ParagraphComment 0x561dff444050 <line:2583:1, col:28>
|   | `-TextComment 0x561dff444020 <col:1, col:28> Text="  Initialize memory profile."
|   |-ParagraphComment 0x561dff4440a0 <line:2585:1, col:2>
|   | `-TextComment 0x561dff444070 <col:1, col:2> Text="  "
|   `-ParamCommandComment 0x561dff4440c0 <col:3, col:49> [in] implicitly Param="HobStart"
|     `-ParagraphComment 0x561dff444150 <col:18, col:49>
|       `-TextComment 0x561dff444120 <col:18, col:49> Text="   The start address of the HOB."
|-FunctionDecl 0x561dff413930 <line:2597:1, line:2600:3> line:2598:1 invalid MemoryProfileInstallProtocol 'int ()'
| `-FullComment 0x561dff444260 <line:2594:1, col:34>
|   `-ParagraphComment 0x561dff444230 <col:1, col:34>
|     `-TextComment 0x561dff444200 <col:1, col:34> Text="  Install memory profile protocol."
|-FunctionDecl 0x561dff413aa8 <line:2614:1, line:2618:3> line:2615:1 invalid RegisterMemoryProfileImage 'int (int)'
| |-ParmVarDecl 0x561dff413a10 <line:2616:3, col:6> col:6 invalid LOADED_IMAGE_PRIVATE_DATA 'int'
| `-FullComment 0x561dff444770 <line:2603:1, line:2611:69>
|   |-ParagraphComment 0x561dff444300 <line:2603:1, col:35>
|   | `-TextComment 0x561dff4442d0 <col:1, col:35> Text="  Register image to memory profile."
|   |-ParagraphComment 0x561dff444350 <line:2605:1, col:2>
|   | `-TextComment 0x561dff444320 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff444370 <col:3, line:2606:2> [in] implicitly Param="DriverEntry"
|   | `-ParagraphComment 0x561dff444420 <line:2605:21, line:2606:2>
|   |   |-TextComment 0x561dff4443d0 <line:2605:21, col:35> Text="    Image info."
|   |   `-TextComment 0x561dff4443f0 <line:2606:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff444440 <col:3, col:40> [in] implicitly Param="FileType"
|   | `-ParagraphComment 0x561dff4444d0 <col:18, col:40>
|   |   `-TextComment 0x561dff4444a0 <col:18, col:40> Text="       Image file type."
|   |-ParagraphComment 0x561dff444520 <line:2608:1, col:2>
|   | `-TextComment 0x561dff4444f0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff444540 <col:3, line:2609:2> Name="return"
|   | `-ParagraphComment 0x561dff4445c0 <line:2608:10, line:2609:2>
|   |   |-TextComment 0x561dff444570 <line:2608:10, col:54> Text=" EFI_SUCCESS           Register successfully."
|   |   `-TextComment 0x561dff444590 <line:2609:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4445e0 <col:3, line:2611:2> Name="return"
|   | `-ParagraphComment 0x561dff444690 <line:2609:10, line:2611:2>
|   |   |-TextComment 0x561dff444610 <line:2609:10, col:59> Text=" EFI_UNSUPPORTED       Memory profile unsupported,"
|   |   |-TextComment 0x561dff444630 <line:2610:1, col:80> Text="                                or memory profile for the image is not required."
|   |   `-TextComment 0x561dff444650 <line:2611:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff4446b0 <col:3, col:69> Name="return"
|     `-ParagraphComment 0x561dff444710 <col:10, col:69>
|       `-TextComment 0x561dff4446e0 <col:10, col:69> Text=" EFI_OUT_OF_RESOURCES  No enough resource for this register."
|-FunctionDecl 0x561dff413c28 <line:2631:1, line:2634:3> line:2632:1 invalid UnregisterMemoryProfileImage 'int (int)'
| |-ParmVarDecl 0x561dff413b90 <line:2633:3, col:6> col:6 invalid LOADED_IMAGE_PRIVATE_DATA 'int'
| `-FullComment 0x561dff444bd0 <line:2621:1, line:2628:55>
|   |-ParagraphComment 0x561dff444810 <line:2621:1, col:39>
|   | `-TextComment 0x561dff4447e0 <col:1, col:39> Text="  Unregister image from memory profile."
|   |-ParagraphComment 0x561dff444860 <line:2623:1, col:2>
|   | `-TextComment 0x561dff444830 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff444880 <col:3, col:35> [in] implicitly Param="DriverEntry"
|   | `-ParagraphComment 0x561dff444930 <col:21, col:35>
|   |   `-TextComment 0x561dff444900 <col:21, col:35> Text="    Image info."
|   |-ParagraphComment 0x561dff444980 <line:2625:1, col:2>
|   | `-TextComment 0x561dff444950 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4449a0 <col:3, line:2626:2> Name="return"
|   | `-ParagraphComment 0x561dff444a20 <line:2625:10, line:2626:2>
|   |   |-TextComment 0x561dff4449d0 <line:2625:10, col:56> Text=" EFI_SUCCESS           Unregister successfully."
|   |   `-TextComment 0x561dff4449f0 <line:2626:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff444a40 <col:3, line:2628:2> Name="return"
|   | `-ParagraphComment 0x561dff444af0 <line:2626:10, line:2628:2>
|   |   |-TextComment 0x561dff444a70 <line:2626:10, col:59> Text=" EFI_UNSUPPORTED       Memory profile unsupported,"
|   |   |-TextComment 0x561dff444a90 <line:2627:1, col:80> Text="                                or memory profile for the image is not required."
|   |   `-TextComment 0x561dff444ab0 <line:2628:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff444b10 <col:3, col:55> Name="return"
|     `-ParagraphComment 0x561dff444b70 <col:10, col:55>
|       `-TextComment 0x561dff444b40 <col:10, col:55> Text=" EFI_NOT_FOUND         The image is not found."
|-VarDecl 0x561dff413d10 <line:2658:1, line:2659:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff4456b0 <line:2637:1, line:2655:79>
|   |-ParagraphComment 0x561dff444c70 <line:2637:1, col:36>
|   | `-TextComment 0x561dff444c40 <col:1, col:36> Text="  Update memory profile information."
|   |-ParagraphComment 0x561dff444cc0 <line:2639:1, col:2>
|   | `-TextComment 0x561dff444c90 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff444ce0 <col:3, line:2640:2> [in] implicitly Param="CallerAddress"
|   | `-ParagraphComment 0x561dff444d90 <line:2639:23, line:2640:2>
|   |   |-TextComment 0x561dff444d40 <line:2639:23, col:68> Text="  Address of caller who call Allocate or Free."
|   |   `-TextComment 0x561dff444d60 <line:2640:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff444db0 <col:3, line:2641:2> [in] implicitly Param="Action"
|   | `-ParagraphComment 0x561dff444e60 <line:2640:16, line:2641:2>
|   |   |-TextComment 0x561dff444e10 <line:2640:16, col:53> Text="         This Allocate or Free action."
|   |   `-TextComment 0x561dff444e30 <line:2641:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff444e80 <col:3, line:2643:2> [in] implicitly Param="MemoryType"
|   | `-ParagraphComment 0x561dff444f60 <line:2641:20, line:2643:2>
|   |   |-TextComment 0x561dff444ee0 <line:2641:20, col:36> Text="     Memory type."
|   |   |-TextComment 0x561dff444f00 <line:2642:1, col:73> Text="                        EfiMaxMemoryType means the MemoryType is unknown."
|   |   `-TextComment 0x561dff444f20 <line:2643:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff444f80 <col:3, line:2644:2> [in] implicitly Param="Size"
|   | `-ParagraphComment 0x561dff445030 <line:2643:14, line:2644:2>
|   |   |-TextComment 0x561dff444fe0 <line:2643:14, col:36> Text="           Buffer size."
|   |   `-TextComment 0x561dff445000 <line:2644:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff445050 <col:3, line:2645:2> [in] implicitly Param="Buffer"
|   | `-ParagraphComment 0x561dff445100 <line:2644:16, line:2645:2>
|   |   |-TextComment 0x561dff4450b0 <line:2644:16, col:39> Text="         Buffer address."
|   |   `-TextComment 0x561dff4450d0 <line:2645:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff445120 <col:3, line:2646:69> [in] implicitly Param="ActionString"
|   | `-ParagraphComment 0x561dff4451d0 <line:2645:22, line:2646:69>
|   |   |-TextComment 0x561dff445180 <line:2645:22, col:57> Text="   String for memory profile action."
|   |   `-TextComment 0x561dff4451a0 <line:2646:1, col:69> Text="                        Only needed for user defined allocate action."
|   |-ParagraphComment 0x561dff445220 <line:2648:1, col:2>
|   | `-TextComment 0x561dff4451f0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff445240 <col:3, line:2649:2> Name="return"
|   | `-ParagraphComment 0x561dff4452c0 <line:2648:10, line:2649:2>
|   |   |-TextComment 0x561dff445270 <line:2648:10, col:58> Text=" EFI_SUCCESS           Memory profile is updated."
|   |   `-TextComment 0x561dff445290 <line:2649:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4452e0 <col:3, line:2652:2> Name="return"
|   | `-ParagraphComment 0x561dff4453b0 <line:2649:10, line:2652:2>
|   |   |-TextComment 0x561dff445310 <line:2649:10, col:62> Text=" EFI_UNSUPPORTED       Memory profile is unsupported,"
|   |   |-TextComment 0x561dff445330 <line:2650:1, col:80> Text="                                or memory profile for the image is not required,"
|   |   |-TextComment 0x561dff445350 <line:2651:1, col:86> Text="                                or memory profile for the memory type is not required."
|   |   `-TextComment 0x561dff445370 <line:2652:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff4453d0 <col:3, line:2653:2> Name="return"
|   | `-ParagraphComment 0x561dff445450 <line:2652:10, line:2653:2>
|   |   |-TextComment 0x561dff445400 <line:2652:10, col:73> Text=" EFI_ACCESS_DENIED     It is during memory profile data getting."
|   |   `-TextComment 0x561dff445420 <line:2653:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff445470 <col:3, line:2654:2> Name="return"
|   | `-ParagraphComment 0x561dff4454f0 <line:2653:10, line:2654:2>
|   |   |-TextComment 0x561dff4454a0 <line:2653:10, col:72> Text=" EFI_ABORTED           Memory profile recording is not enabled."
|   |   `-TextComment 0x561dff4454c0 <line:2654:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff445510 <col:3, line:2655:2> Name="return"
|   | `-ParagraphComment 0x561dff445590 <line:2654:10, line:2655:2>
|   |   |-TextComment 0x561dff445540 <line:2654:10, col:96> Text=" EFI_OUT_OF_RESOURCES  No enough resource to update memory profile for allocate action."
|   |   `-TextComment 0x561dff445560 <line:2655:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff4455b0 <col:3, col:79> Name="return"
|     `-ParagraphComment 0x561dff445610 <col:10, col:79>
|       `-TextComment 0x561dff4455e0 <col:10, col:79> Text=" EFI_NOT_FOUND         No matched allocate info found for free action."
|-FunctionDecl 0x561dff413e58 <line:2678:1, line:2683:3> line:2679:1 invalid CoreUpdateMemoryAttributes 'int (int)'
| |-ParmVarDecl 0x561dff413dc0 <line:2680:3, col:6> col:6 invalid EFI_PHYSICAL_ADDRESS 'int'
| `-FullComment 0x561dff445aa0 <line:2670:1, line:2675:72>
|   |-ParagraphComment 0x561dff445750 <line:2670:1, col:68>
|   | `-TextComment 0x561dff445720 <col:1, col:68> Text="  Internal function.  Converts a memory range to use new attributes."
|   |-ParagraphComment 0x561dff4457a0 <line:2672:1, col:2>
|   | `-TextComment 0x561dff445770 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4457c0 <col:3, line:2674:2> [in] implicitly Param="Start"
|   | `-ParagraphComment 0x561dff4458a0 <line:2672:16, line:2674:2>
|   |   |-TextComment 0x561dff445820 <line:2672:16, col:76> Text="                  The first address of the range Must be page"
|   |   |-TextComment 0x561dff445840 <line:2673:1, col:40> Text="                                 aligned"
|   |   `-TextComment 0x561dff445860 <line:2674:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4458f0 <col:3, line:2675:2> [in] implicitly Param="NumberOfPages"
|   | `-ParagraphComment 0x561dff4459a0 <line:2674:24, line:2675:2>
|   |   |-TextComment 0x561dff445950 <line:2674:24, col:63> Text="          The number of pages to convert"
|   |   `-TextComment 0x561dff445970 <line:2675:1, col:2> Text="  "
|   `-ParamCommandComment 0x561dff4459c0 <col:3, col:72> [in] implicitly Param="NewAttributes"
|     `-ParagraphComment 0x561dff445a50 <col:24, col:72>
|       `-TextComment 0x561dff445a20 <col:24, col:72> Text="          The new attributes value for the range."
|-VarDecl 0x561dff413f40 <line:2688:1, line:2689:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff445b70 <line:2686:1, col:43>
|   `-ParagraphComment 0x561dff445b40 <col:1, col:43>
|     `-TextComment 0x561dff445b10 <col:1, col:43> Text="  Initialize MemoryAttrubutesTable support."
|-VarDecl 0x561dff413ff0 <line:2697:1, line:2698:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff445c40 <line:2695:1, col:39>
|   `-ParagraphComment 0x561dff445c10 <col:1, col:39>
|     `-TextComment 0x561dff445be0 <col:1, col:39> Text="  Initialize Memory Protection support."
|-FunctionDecl 0x561dff414328 <line:2708:1, line:2711:3> line:2709:1 invalid InstallMemoryAttributesTableOnMemoryAllocation 'int (int)'
| |-ParmVarDecl 0x561dff414290 <line:2710:3, col:6> col:6 invalid EFI_MEMORY_TYPE 'int'
| `-FullComment 0x561dff445e20 <line:2704:1, line:2706:40>
|   |-ParagraphComment 0x561dff445ce0 <line:2704:1, col:53>
|   | `-TextComment 0x561dff445cb0 <col:1, col:53> Text="  Install MemoryAttributesTable on memory allocation."
|   |-ParagraphComment 0x561dff445d30 <line:2706:1, col:2>
|   | `-TextComment 0x561dff445d00 <col:1, col:2> Text="  "
|   `-ParamCommandComment 0x561dff445d50 <col:3, col:40> [in] explicitly Param="MemoryType"
|     `-ParagraphComment 0x561dff445de0 <col:24, col:40>
|       `-TextComment 0x561dff445db0 <col:24, col:40> Text=" EFI memory type."
|-FunctionDecl 0x561dff4144a8 <line:2718:1, line:2721:3> line:2719:1 invalid InsertImageRecord 'int (int)'
| |-ParmVarDecl 0x561dff414410 <line:2720:3, col:6> col:6 invalid EFI_RUNTIME_IMAGE_ENTRY 'int'
| `-FullComment 0x561dff446000 <line:2714:1, line:2716:51>
|   |-ParagraphComment 0x561dff445ec0 <line:2714:1, col:22>
|   | `-TextComment 0x561dff445e90 <col:1, col:22> Text="  Insert image record."
|   |-ParagraphComment 0x561dff445f10 <line:2716:1, col:2>
|   | `-TextComment 0x561dff445ee0 <col:1, col:2> Text="  "
|   `-ParamCommandComment 0x561dff445f30 <col:3, col:51> [in] implicitly Param="RuntimeImage"
|     `-ParagraphComment 0x561dff445fc0 <col:23, col:51>
|       `-TextComment 0x561dff445f90 <col:23, col:51> Text="    Runtime image information"
|-FunctionDecl 0x561dff414628 <line:2728:1, line:2731:3> line:2729:1 invalid RemoveImageRecord 'int (int)'
| |-ParmVarDecl 0x561dff414590 <line:2730:3, col:6> col:6 invalid EFI_RUNTIME_IMAGE_ENTRY 'int'
| `-FullComment 0x561dff4461e0 <line:2724:1, line:2726:51>
|   |-ParagraphComment 0x561dff4460a0 <line:2724:1, col:22>
|   | `-TextComment 0x561dff446070 <col:1, col:22> Text="  Remove Image record."
|   |-ParagraphComment 0x561dff4460f0 <line:2726:1, col:2>
|   | `-TextComment 0x561dff4460c0 <col:1, col:2> Text="  "
|   `-ParamCommandComment 0x561dff446110 <col:3, col:51> [in] implicitly Param="RuntimeImage"
|     `-ParagraphComment 0x561dff4461a0 <col:23, col:51>
|       `-TextComment 0x561dff446170 <col:23, col:51> Text="    Runtime image information"
|-FunctionDecl 0x561dff4147a8 <line:2739:1, line:2743:3> line:2740:1 invalid ProtectUefiImage 'int (int)'
| |-ParmVarDecl 0x561dff414710 <line:2741:3, col:6> col:6 invalid EFI_LOADED_IMAGE_PROTOCOL 'int'
| `-FullComment 0x561dff4464b0 <line:2734:1, line:2737:76>
|   |-ParagraphComment 0x561dff446280 <line:2734:1, col:21>
|   | `-TextComment 0x561dff446250 <col:1, col:21> Text="  Protect UEFI image."
|   |-ParagraphComment 0x561dff4462d0 <line:2736:1, col:2>
|   | `-TextComment 0x561dff4462a0 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4462f0 <col:3, line:2737:2> [in] explicitly Param="LoadedImage"
|   | `-ParagraphComment 0x561dff4463b0 <line:2736:26, line:2737:2>
|   |   |-TextComment 0x561dff446360 <line:2736:26, col:64> Text="              The loaded image protocol"
|   |   `-TextComment 0x561dff446380 <line:2737:1, col:2> Text="  "
|   `-ParamCommandComment 0x561dff4463d0 <col:3, col:76> [in] explicitly Param="LoadedImageDevicePath"
|     `-ParagraphComment 0x561dff446470 <col:36, col:76>
|       `-TextComment 0x561dff446440 <col:36, col:76> Text="    The loaded image device path protocol"
|-FunctionDecl 0x561dff414928 <line:2751:1, line:2755:3> line:2752:1 invalid UnprotectUefiImage 'int (int)'
| |-ParmVarDecl 0x561dff414890 <line:2753:3, col:6> col:6 invalid EFI_LOADED_IMAGE_PROTOCOL 'int'
| `-FullComment 0x561dff446780 <line:2746:1, line:2749:76>
|   |-ParagraphComment 0x561dff446550 <line:2746:1, col:23>
|   | `-TextComment 0x561dff446520 <col:1, col:23> Text="  Unprotect UEFI image."
|   |-ParagraphComment 0x561dff4465a0 <line:2748:1, col:2>
|   | `-TextComment 0x561dff446570 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4465c0 <col:3, line:2749:2> [in] explicitly Param="LoadedImage"
|   | `-ParagraphComment 0x561dff446680 <line:2748:26, line:2749:2>
|   |   |-TextComment 0x561dff446630 <line:2748:26, col:64> Text="              The loaded image protocol"
|   |   `-TextComment 0x561dff446650 <line:2749:1, col:2> Text="  "
|   `-ParamCommandComment 0x561dff4466a0 <col:3, col:76> [in] explicitly Param="LoadedImageDevicePath"
|     `-ParagraphComment 0x561dff446740 <col:36, col:76>
|       `-TextComment 0x561dff446710 <col:36, col:76> Text="    The loaded image device path protocol"
|-FunctionDecl 0x561dff414a20 <line:2760:1, line:2763:3> line:2761:1 invalid MemoryProtectionExitBootServicesCallback 'int ()'
| `-FullComment 0x561dff446850 <line:2758:1, col:59>
|   `-ParagraphComment 0x561dff446820 <col:1, col:59>
|     `-TextComment 0x561dff4467f0 <col:1, col:59> Text="  ExitBootServices Callback function for memory protection."
|-VarDecl 0x561dff414b00 <line:2780:1, line:2781:1> col:1 invalid EFIAPI 'int'
| `-FullComment 0x561dff446fd0 <line:2766:1, line:2777:71>
|   |-ParagraphComment 0x561dff446930 <line:2766:1, line:2767:42>
|   | |-TextComment 0x561dff4468c0 <line:2766:1, col:73> Text="  Manage memory permission attributes on a memory range, according to the"
|   | `-TextComment 0x561dff446900 <line:2767:1, col:42> Text="  configured DXE memory protection policy."
|   |-ParagraphComment 0x561dff446980 <line:2769:1, col:2>
|   | `-TextComment 0x561dff446950 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4469a0 <col:3, line:2770:2> [in] implicitly Param="OldType"
|   | `-ParagraphComment 0x561dff446a50 <line:2769:18, line:2770:2>
|   |   |-TextComment 0x561dff446a00 <line:2769:18, col:60> Text="           The old memory type of the range"
|   |   `-TextComment 0x561dff446a20 <line:2770:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff446a70 <col:3, line:2771:2> [in] implicitly Param="NewType"
|   | `-ParagraphComment 0x561dff446b20 <line:2770:18, line:2771:2>
|   |   |-TextComment 0x561dff446ad0 <line:2770:18, col:60> Text="           The new memory type of the range"
|   |   `-TextComment 0x561dff446af0 <line:2771:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff446b40 <col:3, line:2772:2> [in] implicitly Param="Memory"
|   | `-ParagraphComment 0x561dff446bf0 <line:2771:17, line:2772:2>
|   |   |-TextComment 0x561dff446ba0 <line:2771:17, col:57> Text="            The base address of the range"
|   |   `-TextComment 0x561dff446bc0 <line:2772:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff446c10 <col:3, col:60> [in] implicitly Param="Length"
|   | `-ParagraphComment 0x561dff446ca0 <col:17, col:60>
|   |   `-TextComment 0x561dff446c70 <col:17, col:60> Text="            The size of the range (in bytes)"
|   |-ParagraphComment 0x561dff446cf0 <line:2774:1, col:2>
|   | `-TextComment 0x561dff446cc0 <col:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff446d10 <col:3, line:2775:2> Name="return"
|   | `-ParagraphComment 0x561dff446d90 <line:2774:10, line:2775:2>
|   |   |-TextComment 0x561dff446d40 <line:2774:10, col:77> Text=" EFI_SUCCESS       If the the CPU arch protocol is not installed yet"
|   |   `-TextComment 0x561dff446d60 <line:2775:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff446db0 <col:3, line:2776:2> Name="return"
|   | `-ParagraphComment 0x561dff446e30 <line:2775:10, line:2776:2>
|   |   |-TextComment 0x561dff446de0 <line:2775:10, col:82> Text=" EFI_SUCCESS       If no DXE memory protection policy has been configured"
|   |   `-TextComment 0x561dff446e00 <line:2776:1, col:2> Text="  "
|   |-BlockCommandComment 0x561dff446e50 <col:3, line:2777:2> Name="return"
|   | `-ParagraphComment 0x561dff446ed0 <line:2776:10, line:2777:2>
|   |   |-TextComment 0x561dff446e80 <line:2776:10, col:85> Text=" EFI_SUCCESS       If OldType and NewType use the same permission attributes"
|   |   `-TextComment 0x561dff446ea0 <line:2777:1, col:2> Text="  "
|   `-BlockCommandComment 0x561dff446ef0 <col:3, col:71> Name="return"
|     `-ParagraphComment 0x561dff446f50 <col:10, col:71>
|       `-TextComment 0x561dff446f20 <col:10, col:71> Text=" other             Return value of gCpu->SetMemoryAttributes()"
|-FunctionDecl 0x561dff414c48 <line:2800:1, line:2805:3> line:2801:1 invalid MergeMemoryMap 'int (int)'
| |-ParmVarDecl 0x561dff414bb0 <line:2802:3, col:6> col:6 invalid OUT 'int'
| `-FullComment 0x561dff447410 <line:2790:1, line:2798:81>
|   |-ParagraphComment 0x561dff447070 <line:2790:1, col:64>
|   | `-TextComment 0x561dff447040 <col:1, col:64> Text="  Merge continous memory map entries whose have same attributes."
|   |-ParagraphComment 0x561dff4470c0 <line:2792:1, col:2>
|   | `-TextComment 0x561dff447090 <col:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4470e0 <col:3, line:2794:2> [in] implicitly Param="MemoryMap"
|   | `-ParagraphComment 0x561dff4471c0 <line:2792:20, line:2794:2>
|   |   |-TextComment 0x561dff447140 <line:2792:20, col:74> Text="       A pointer to the buffer in which firmware places"
|   |   |-TextComment 0x561dff447160 <line:2793:1, col:49> Text="                          the current memory map."
|   |   `-TextComment 0x561dff447180 <line:2794:1, col:2> Text="  "
|   |-ParamCommandComment 0x561dff4471e0 <col:3, line:2798:2> [in] implicitly Param="MemoryMapSize"
|   | `-ParagraphComment 0x561dff447310 <line:2794:24, line:2798:2>
|   |   |-TextComment 0x561dff447240 <line:2794:24, col:65> Text="   A pointer to the size, in bytes, of the"
|   |   |-TextComment 0x561dff447260 <line:2795:1, col:73> Text="                          MemoryMap buffer. On input, this is the size of"
|   |   |-TextComment 0x561dff447280 <line:2796:1, col:61> Text="                          the current memory map.  On output,"
|   |   |-TextComment 0x561dff4472a0 <line:2797:1, col:71> Text="                          it is the size of new memory map after merge."
|   |   `-TextComment 0x561dff4472c0 <line:2798:1, col:2> Text="  "
|   `-ParamCommandComment 0x561dff447330 <col:3, col:81> [in] implicitly Param="DescriptorSize"
|     `-ParagraphComment 0x561dff4473c0 <col:25, col:81>
|       `-TextComment 0x561dff447390 <col:25, col:81> Text="  Size, in bytes, of an individual EFI_MEMORY_DESCRIPTOR."
|-VarDecl 0x561dff414d08 <MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c:14:1, col:13> col:13 invalid mDecompressHandle 'int'
|-VarDecl 0x561dff414d88 <line:19:1, col:36> col:36 invalid gSecurity 'int *'
|-VarDecl 0x561dff414e08 <line:20:1, col:36> col:36 invalid gSecurity2 'int *'
|-VarDecl 0x561dff414e88 <line:21:1, col:36> col:36 invalid gCpu 'int *'
|-VarDecl 0x561dff414f08 <line:22:1, col:36> col:36 invalid gMetronome 'int *'
|-VarDecl 0x561dff414f88 <line:23:1, col:36> col:36 invalid gTimer 'int *'
|-VarDecl 0x561dff415008 <line:24:1, col:36> col:36 invalid gBds 'int *'
|-VarDecl 0x561dff415088 <line:25:1, col:36> col:36 invalid gWatchdogTimer 'int *'
|-VarDecl 0x561dff415108 <line:30:1, col:26> col:26 invalid gSmmBase2 'int *'
|-VarDecl 0x561dff415188 <line:35:1, col:29> col:29 invalid gDxeCoreFileName 'int *'
|-VarDecl 0x561dff416470 <line:36:1, col:29> col:29 invalid gDxeCoreLoadedImage 'int *'
|-VarDecl 0x561dff4164f0 <line:41:1, col:20> col:20 invalid mBootServices 'int'
|-VarDecl 0x561dff4165b0 <line:95:1, col:19> col:19 invalid mDxeServices 'int'
|-VarDecl 0x561dff416670 <line:123:1, col:19> col:19 invalid mEfiSystemTableTemplate 'int'
|-VarDecl 0x561dff4167a8 <line:145:1, col:23> col:23 invalid mEfiRuntimeServicesTableTemplate 'int'
|-VarDecl 0x561dff416868 <line:169:1, col:28> col:28 invalid gRuntimeTemplate 'int'
|-FunctionDecl 0x561dff416940 <<invalid sloc>> line:170:3 implicit used INITIALIZE_LIST_HEAD_VARIABLE 'int ()'
|-VarDecl 0x561dff416b78 <line:187:1, col:29> col:29 invalid1 error generated.
 gRuntime 'int *'
|-VarDecl 0x561dff416c30 <line:193:1, col:20> col:20 invalid gDxeCoreDS 'int *'
|-VarDecl 0x561dff416ce8 <line:194:1, col:20> col:20 invalid gDxeCoreST 'int *'
|-VarDecl 0x561dff416d68 <line:201:1, col:24> col:24 invalid gDxeCoreRT 'int *'
|-VarDecl 0x561dff416e20 <line:202:1, col:23> col:23 invalid gDxeCoreImageHandle 'int'
|-VarDecl 0x561dff416ea0 <line:204:1, col:10> col:10 invalid gMemoryMapTerminated 'int'
|-VarDecl 0x561dff416f20 <line:209:1, col:26> col:26 invalid gEfiDecompress 'int'
|-VarDecl 0x561dff416fa0 <line:218:1, col:31> col:31 invalid EFI_LOAD_FIXED_ADDRESS_CONFIGURATION_TABLE 'int'
`-VarDecl 0x561dff417050 <line:231:1, line:232:1> col:1 invalid EFIAPI 'int'
  `-FullComment 0x561dff4476d0 <line:224:1, line:228:44>
    |-ParagraphComment 0x561dff4474b0 <line:224:1, col:31>
    | `-TextComment 0x561dff447480 <col:1, col:31> Text="  Main entry point to DXE Core."
    |-ParagraphComment 0x561dff447500 <line:226:1, col:2>
    | `-TextComment 0x561dff4474d0 <col:1, col:2> Text="  "
    |-ParamCommandComment 0x561dff447520 <col:3, col:83> [in] implicitly Param="HobStart"
    | `-ParagraphComment 0x561dff4475b0 <col:19, col:83>
    |   `-TextComment 0x561dff447580 <col:19, col:83> Text="               Pointer to the beginning of the HOB List from PEI."
    |-ParagraphComment 0x561dff447600 <line:228:1, col:2>
    | `-TextComment 0x561dff4475d0 <col:1, col:2> Text="  "
    `-BlockCommandComment 0x561dff447620 <col:3, col:44> Name="return"
      `-ParagraphComment 0x561dff447680 <col:10, col:44>
        `-TextComment 0x561dff447650 <col:10, col:44> Text=" This function should never return."
